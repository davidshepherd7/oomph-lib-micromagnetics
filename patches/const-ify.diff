Index: demo_drivers/interaction/elastic_bretherton/elastic_bretherton.cc
===================================================================
--- demo_drivers/interaction/elastic_bretherton/elastic_bretherton.cc	(revision 258)
+++ demo_drivers/interaction/elastic_bretherton/elastic_bretherton.cc	(working copy)
@@ -980,10 +980,10 @@
   }
 
  ///Overload the output function
- void output(ostream &outfile) { }
+ void output(ostream &outfile) const { }
 
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
-void output(ostream &outfile, const unsigned &Np) { }
+void output(ostream &outfile, const unsigned &Np) const { }
 
 }; 
 
@@ -1087,10 +1087,10 @@
   }
  
  ///Overload the output function
- void output(ostream &outfile) { }
+ void output(ostream &outfile) const { }
 
  ///Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(ostream &outfile, const unsigned &Np) { }
+ void output(ostream &outfile, const unsigned &Np) const { }
 
 }; 
 
@@ -1433,7 +1433,7 @@
   }
 
  /// Dump the entire problem
- void dump(ofstream &dump_file)
+ void dump(ofstream &dump_file) const
   {
    using namespace Global_Physical_Variables;
    dump_file << Re << std::endl;
Index: demo_drivers/interaction/pseudo_solid_collapsible_tube/pseudo_solid_collapsible_tube.cc
===================================================================
--- demo_drivers/interaction/pseudo_solid_collapsible_tube/pseudo_solid_collapsible_tube.cc	(revision 258)
+++ demo_drivers/interaction/pseudo_solid_collapsible_tube/pseudo_solid_collapsible_tube.cc	(working copy)
@@ -62,7 +62,7 @@
  PseudoElasticBulkElement() : ELEMENT() {}
  
  /// \short returns the number of DOF types associated with this element. 
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 2*ELEMENT::dim();
   }
Index: demo_drivers/interaction/unstructured_adaptive_fsi/unstructured_adaptive_2d_fsi.cc
===================================================================
--- demo_drivers/interaction/unstructured_adaptive_fsi/unstructured_adaptive_2d_fsi.cc	(revision 258)
+++ demo_drivers/interaction/unstructured_adaptive_fsi/unstructured_adaptive_2d_fsi.cc	(working copy)
@@ -271,7 +271,7 @@
 
  ///Output function to compute the strain energy in the solid and the 
  ///dissipation in the fluid and write to the output stream trace
- void output_strain_and_dissipation(std::ostream &trace)
+ void output_strain_and_dissipation(std::ostream &trace) const
   {
    double strain_energy = this->get_solid_strain_energy();
    double dissipation = this->get_fluid_dissipation();
Index: demo_drivers/mpi/distribution/airy_cantilever/airy_cantilever2.cc
===================================================================
--- demo_drivers/mpi/distribution/airy_cantilever/airy_cantilever2.cc	(revision 258)
+++ demo_drivers/mpi/distribution/airy_cantilever/airy_cantilever2.cc	(working copy)
@@ -60,7 +60,7 @@
  MySolidElement() : ELEMENT() {};
 
  /// Overload output function:
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
 
    // Element dimension
Index: demo_drivers/mpi/distribution/bifurcation_tracking/pitchfork.cc
===================================================================
--- demo_drivers/mpi/distribution/bifurcation_tracking/pitchfork.cc	(revision 258)
+++ demo_drivers/mpi/distribution/bifurcation_tracking/pitchfork.cc	(working copy)
@@ -454,10 +454,10 @@
   }
 
  ///Overload the output function
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
  
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(ostream &outfile, const unsigned &Np)
+ void output(ostream &outfile, const unsigned &Np) const
   {FiniteElement::output(outfile,Np);}
  
 }; 
@@ -515,10 +515,10 @@
   {return *node_pt(l)->value_pt(2);}
 
  ///Overload the output function
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  ///Output function: x,y[,z],u,v[,w],p at Nplot^DIM points
- void output(ostream &outfile, const unsigned &Nplot)
+ void output(ostream &outfile, const unsigned &Nplot) const
   {
    //Set output Vector
    Vector<double> s(1);
Index: demo_drivers/mpi/solvers/airy_cantilever.cc
===================================================================
--- demo_drivers/mpi/solvers/airy_cantilever.cc	(revision 258)
+++ demo_drivers/mpi/solvers/airy_cantilever.cc	(working copy)
@@ -73,7 +73,7 @@
  MySolidElement() : ELEMENT() {};
 
  /// Overload output function:
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
 
    // Element dimension
Index: demo_drivers/bifurcation_tracking/hopf.cc
===================================================================
--- demo_drivers/bifurcation_tracking/hopf.cc	(revision 258)
+++ demo_drivers/bifurcation_tracking/hopf.cc	(working copy)
@@ -179,7 +179,7 @@
    } //End of function
 
   //Define an output function for the element 
-  void output(ostream &output) 
+  void output(ostream &output) const
    {
     for(unsigned n=0;n<3;n++)
      {
Index: demo_drivers/bifurcation_tracking/fold.cc
===================================================================
--- demo_drivers/bifurcation_tracking/fold.cc	(revision 258)
+++ demo_drivers/bifurcation_tracking/fold.cc	(working copy)
@@ -326,7 +326,7 @@
 
 
   //Define an output function for the element 
-  void output(ostream &output) 
+  void output(ostream &output) const
    {
     //Read out the number of nodes in the element   
     unsigned n_node = this->nnode();
Index: demo_drivers/bifurcation_tracking/pitchfork.cc
===================================================================
--- demo_drivers/bifurcation_tracking/pitchfork.cc	(revision 258)
+++ demo_drivers/bifurcation_tracking/pitchfork.cc	(working copy)
@@ -454,10 +454,10 @@
   }
 
  ///Overload the output function
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
  
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(ostream &outfile, const unsigned &Np)
+ void output(ostream &outfile, const unsigned &Np) const
   {FiniteElement::output(outfile,Np);}
  
 }; 
@@ -515,10 +515,10 @@
   {return *node_pt(l)->value_pt(2);}
 
  ///Overload the output function
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  ///Output function: x,y[,z],u,v[,w],p at Nplot^DIM points
- void output(ostream &outfile, const unsigned &Nplot)
+ void output(ostream &outfile, const unsigned &Nplot) const
   {
    //Set output Vector
    Vector<double> s(1);
Index: demo_drivers/flux_transport/advection/one_d_advection.cc
===================================================================
--- demo_drivers/flux_transport/advection/one_d_advection.cc	(revision 258)
+++ demo_drivers/flux_transport/advection/one_d_advection.cc	(working copy)
@@ -165,7 +165,7 @@
  } // End of constructor
 
  ///Output the face element
- void output_faces(std::ostream &outfile)
+ void output_faces(std::ostream &outfile) const
   {
    //Loop over the elements
    unsigned n_element = this->nelement();
@@ -273,7 +273,7 @@
   }
 
  ///Compute the complete errors in the problem
- void compute_error(const double &t, Vector<double> &error)
+ void compute_error(const double &t, Vector<double> &error) const
   {
    error[0] = 0.0;
    
Index: demo_drivers/flux_transport/advection/two_d_advection.cc
===================================================================
--- demo_drivers/flux_transport/advection/two_d_advection.cc	(revision 258)
+++ demo_drivers/flux_transport/advection/two_d_advection.cc	(working copy)
@@ -265,7 +265,7 @@
   }
  
  ///Compute the complete errors in the problem
- void compute_error(const double &t, Vector<double> &error)
+ void compute_error(const double &t, Vector<double> &error) const
   {
    error[0] = 0.0;
    
Index: demo_drivers/flux_transport/euler/one_d_euler.cc
===================================================================
--- demo_drivers/flux_transport/euler/one_d_euler.cc	(revision 258)
+++ demo_drivers/flux_transport/euler/one_d_euler.cc	(working copy)
@@ -209,7 +209,7 @@
  } // End of constructor
 
  ///Output the face element
- void output_faces(std::ostream &outfile)
+ void output_faces(std::ostream &outfile) const
   {
    //Loop over the elements
    unsigned n_element = this->nelement();
Index: demo_drivers/flux_transport/euler/couette.cc
===================================================================
--- demo_drivers/flux_transport/euler/couette.cc	(revision 258)
+++ demo_drivers/flux_transport/euler/couette.cc	(working copy)
@@ -429,7 +429,7 @@
   }
  
  ///Compute the complete errors in the problem
- void compute_error(const double &t, Vector<double> &error)
+ void compute_error(const double &t, Vector<double> &error) const
   {
    error.initialise(0.0);
    
Index: demo_drivers/flux_transport/euler/two_d_euler.cc
===================================================================
--- demo_drivers/flux_transport/euler/two_d_euler.cc	(revision 258)
+++ demo_drivers/flux_transport/euler/two_d_euler.cc	(working copy)
@@ -458,7 +458,7 @@
   }
  
  ///Compute the complete errors in the problem
- void compute_error(const double &t, Vector<double> &error)
+ void compute_error(const double &t, Vector<double> &error) const
   {
    error.initialise(0.0);
    
Index: demo_drivers/multi_physics/soluble_surfactant/soluble_surfactant.cc
===================================================================
--- demo_drivers/multi_physics/soluble_surfactant/soluble_surfactant.cc	(revision 258)
+++ demo_drivers/multi_physics/soluble_surfactant/soluble_surfactant.cc	(working copy)
@@ -661,7 +661,7 @@
  double* &k_pt() {return K_pt;}
 
 
-void output(std::ostream &outfile, const unsigned &n_plot)
+void output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Set output Vector
  Vector<double> s(1);
Index: demo_drivers/multi_physics/soluble_surfactant/double_buoyant_navier_stokes_elements.h
===================================================================
--- demo_drivers/multi_physics/soluble_surfactant/double_buoyant_navier_stokes_elements.h	(revision 258)
+++ demo_drivers/multi_physics/soluble_surfactant/double_buoyant_navier_stokes_elements.h	(working copy)
@@ -130,12 +130,12 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  Output x, y, u, v, p, theta at Nplot^DIM plot points
  // Start of output function
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -176,17 +176,17 @@
 
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(std::ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -215,7 +215,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
  
Index: demo_drivers/multi_physics/axisym_heat_sphere/multi_domain_axisym_boussinesq_elements.h
===================================================================
--- demo_drivers/multi_physics/axisym_heat_sphere/multi_domain_axisym_boussinesq_elements.h	(revision 258)
+++ demo_drivers/multi_physics/axisym_heat_sphere/multi_domain_axisym_boussinesq_elements.h	(working copy)
@@ -388,7 +388,7 @@
   /// \short Output function:
   ///  Output x, y, theta at Nplot^DIM plot points
  // Start of output function
-  void output(ostream &outfile, const unsigned &nplot)
+  void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -419,14 +419,14 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
@@ -1034,7 +1034,7 @@
   /// \short Output function:
   ///  Output x, y, theta at Nplot^DIM plot points
  // Start of output function
-  void output(ostream &outfile, const unsigned &nplot)
+  void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -1065,14 +1065,14 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
Index: demo_drivers/multi_physics/axisym_heat_sphere/axisym_buoyant_navier_stokes.h
===================================================================
--- demo_drivers/multi_physics/axisym_heat_sphere/axisym_buoyant_navier_stokes.h	(revision 258)
+++ demo_drivers/multi_physics/axisym_heat_sphere/axisym_buoyant_navier_stokes.h	(working copy)
@@ -116,12 +116,12 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at Nplot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -158,17 +158,17 @@
   }
 
  /// \short C-style output function:  Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(std::ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -381,7 +381,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
 
Index: demo_drivers/multi_physics/thermal_fibre/non_isothermal_axisym_nst_elements.h
===================================================================
--- demo_drivers/multi_physics/thermal_fibre/non_isothermal_axisym_nst_elements.h	(revision 258)
+++ demo_drivers/multi_physics/thermal_fibre/non_isothermal_axisym_nst_elements.h	(working copy)
@@ -50,7 +50,7 @@
   }
 
  ///Overload the standard output function with the broken default
- void output(ostream &outfile) 
+ void output(ostream &outfile) const
   {
    FiniteElement::output(outfile);
   }
@@ -58,7 +58,7 @@
  /// \short Output function:  
  ///  Output r, z, u, w, v, p, theta at Nplot^2 plot points
  // Start of output function
- void output(ostream &outfile, const unsigned &nplot)
+ void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -99,13 +99,13 @@
 
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    FiniteElement::output(file_pt);
   }
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    FiniteElement::output(file_pt,n_plot);
   }
@@ -113,7 +113,7 @@
  /// \short Output function for an exact solution: Broken default
  void output_fct(ostream &outfile, 
                  const unsigned &Nplot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
    FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);
   }
@@ -133,7 +133,7 @@
  /// Call the broken default
  void compute_error(ostream &outfile,
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm)
+                    double& error, double& norm) const
  {
   FiniteElement::compute_error(outfile,exact_soln_pt,error,norm);
  }
Index: demo_drivers/multi_physics/double_diffusive_convection/db_navier_st_elements.h
===================================================================
--- demo_drivers/multi_physics/double_diffusive_convection/db_navier_st_elements.h	(revision 258)
+++ demo_drivers/multi_physics/double_diffusive_convection/db_navier_st_elements.h	(working copy)
@@ -130,12 +130,12 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  Output x, y, u, v, p, theta at Nplot^DIM plot points
  // Start of output function
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -176,17 +176,17 @@
 
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(std::ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -215,7 +215,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
  
Index: demo_drivers/multi_physics/insoluble_surfactant/surfactant.cc
===================================================================
--- demo_drivers/multi_physics/insoluble_surfactant/surfactant.cc	(revision 258)
+++ demo_drivers/multi_physics/insoluble_surfactant/surfactant.cc	(working copy)
@@ -553,7 +553,7 @@
  ///Access function for pointer to the surface Peclet x Strouhal number
  double* &peclet_strouhal_s_pt() {return Peclet_Strouhal_S_pt;}
 
-void output(std::ostream &outfile, const unsigned &n_plot)
+void output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Set output Vector
  Vector<double> s(1);
Index: demo_drivers/multi_physics/3d_boussinesq_convection/my_boussinesq_elements.h
===================================================================
--- demo_drivers/multi_physics/3d_boussinesq_convection/my_boussinesq_elements.h	(revision 258)
+++ demo_drivers/multi_physics/3d_boussinesq_convection/my_boussinesq_elements.h	(working copy)
@@ -89,12 +89,12 @@
  double* &ra_pt() {return Ra_pt;}
 
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  Output x, y, u, v, p at Nplot^DIM plot points
  // Start of output function
- void output(ostream &outfile, const unsigned &nplot)
+ void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -128,17 +128,17 @@
 
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -185,7 +185,7 @@
  void compute_error(ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
  
@@ -397,7 +397,7 @@
     (block_lookup_list);
   }
 
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return QCrouzeixRaviartElement<DIM>::ndof_types();
   }
@@ -436,12 +436,12 @@
   {return RefineableQAdvectionDiffusionElement<DIM,3>::required_nvalue(n);}
 
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  Output x, y, theta at Nplot^DIM plot points
  // Start of output function
- void output(ostream &outfile, const unsigned &nplot)
+ void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -471,17 +471,17 @@
 
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -525,7 +525,7 @@
  void compute_error(ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
  
@@ -788,7 +788,7 @@
 
 
  /// hierher need to rewrite this in parallel
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
Index: demo_drivers/multi_physics/3d_boussinesq_convection/3d_ref_b_convect.cc
===================================================================
--- demo_drivers/multi_physics/3d_boussinesq_convection/3d_ref_b_convect.cc	(revision 258)
+++ demo_drivers/multi_physics/3d_boussinesq_convection/3d_ref_b_convect.cc	(working copy)
@@ -612,12 +612,12 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile)
+ void output(ostream &outfile) const
   {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at Nplot^DIM plot points
- void output(ostream &outfile, const unsigned &nplot)
+ void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -654,17 +654,17 @@
   }
 
  /// \short C-style output function:  Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -869,7 +869,7 @@
  void compute_error(ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
 
@@ -880,7 +880,7 @@
  /// Overload to broken default.
 void compute_error(ostream &outfile,
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::
    compute_error(outfile,exact_soln_pt,error,norm);}
  
@@ -1245,7 +1245,7 @@
   } //End of function
 
  ///
- unsigned ndof_types() 
+ unsigned ndof_types() const
   {
    return DIM+2;
   }
Index: demo_drivers/multi_physics/spherical_shell_convection/spherical_buoyant_navier_stokes.h
===================================================================
--- demo_drivers/multi_physics/spherical_shell_convection/spherical_buoyant_navier_stokes.h	(revision 258)
+++ demo_drivers/multi_physics/spherical_shell_convection/spherical_buoyant_navier_stokes.h	(working copy)
@@ -115,12 +115,12 @@
   
   
   ///  Overload the standard output function with the broken default
-  void output(std::ostream &outfile)
+  void output(std::ostream &outfile) const
   {FiniteElement::output(outfile);}
   
   /// \short Output function:  
   ///  x,y,u   or    x,y,z,u at Nplot^DIM plot points
-  void output(std::ostream &outfile, const unsigned &nplot)
+  void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -162,17 +162,17 @@
   }
 
  /// \short C-style output function:  Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(std::ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -385,7 +385,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
 
Index: demo_drivers/multi_physics/b_convection_sphere/multi_domain_axisym_boussinesq_elements.h
===================================================================
--- demo_drivers/multi_physics/b_convection_sphere/multi_domain_axisym_boussinesq_elements.h	(revision 258)
+++ demo_drivers/multi_physics/b_convection_sphere/multi_domain_axisym_boussinesq_elements.h	(working copy)
@@ -388,7 +388,7 @@
   /// \short Output function:
   ///  Output x, y, theta at Nplot^DIM plot points
  // Start of output function
-  void output(ostream &outfile, const unsigned &nplot)
+  void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -419,14 +419,14 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
@@ -1034,7 +1034,7 @@
   /// \short Output function:
   ///  Output x, y, theta at Nplot^DIM plot points
  // Start of output function
-  void output(ostream &outfile, const unsigned &nplot)
+  void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -1065,14 +1065,14 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
Index: demo_drivers/multi_physics/b_convection_sphere/axisym_buoyant_navier_stokes.h
===================================================================
--- demo_drivers/multi_physics/b_convection_sphere/axisym_buoyant_navier_stokes.h	(revision 258)
+++ demo_drivers/multi_physics/b_convection_sphere/axisym_buoyant_navier_stokes.h	(working copy)
@@ -116,12 +116,12 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at Nplot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(2);
@@ -158,17 +158,17 @@
   }
 
  /// \short C-style output function:  Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(std::ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -381,7 +381,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
 
Index: demo_drivers/multi_physics/thermo/thermo.cc
===================================================================
--- demo_drivers/multi_physics/thermo/thermo.cc	(revision 258)
+++ demo_drivers/multi_physics/thermo/thermo.cc	(working copy)
@@ -86,12 +86,12 @@
  double* &alpha_pt() {return Alpha_pt;}
   
  ///  Overload the standard output function with the broken default
- void output(ostream &outfile) {FiniteElement::output(outfile);}
+ void output(ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  Output x, y, u, v, p, theta at Nplot^DIM plot points
  // Start of output function
- void output(ostream &outfile, const unsigned &nplot)
+ void output(ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -124,17 +124,17 @@
   } //End of output function
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
  void output_fct(ostream &outfile, const unsigned &Nplot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {FiniteElement::output_fct(outfile,Nplot,exact_soln_pt);}
 
 
@@ -157,7 +157,7 @@
  void compute_error(ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
  
Index: demo_drivers/axisym_navier_stokes/counter_rotating_disks/linearised_axisym_navier_stokes_elements.cc
===================================================================
--- demo_drivers/axisym_navier_stokes/counter_rotating_disks/linearised_axisym_navier_stokes_elements.cc	(revision 258)
+++ demo_drivers/axisym_navier_stokes/counter_rotating_disks/linearised_axisym_navier_stokes_elements.cc	(working copy)
@@ -144,7 +144,7 @@
  compute_error(std::ostream &outfile,
                FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                const double& time,
-               double& error, double& norm)
+               double& error, double& norm) const
  {
   // Initialise error and norm to zero
   error = 0.0;
@@ -227,7 +227,7 @@
  void LinearisedAxisymmetricNavierStokesEquations::
  compute_error(std::ostream &outfile,
                FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-               double& error, double& norm)
+               double& error, double& norm) const
  {
   // Initialise error and norm to zero
   error = 0.0;
@@ -312,7 +312,7 @@
  output_fct(std::ostream &outfile,
             const unsigned &nplot, 
             const double& time,
-            FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+            FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
  {
   
   // Allocate storage for vector of local coordinates
@@ -372,7 +372,7 @@
  void LinearisedAxisymmetricNavierStokesEquations::
  output_fct(std::ostream &outfile, 
             const unsigned &nplot, 
-            FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+            FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   
   // Allocate storage for vector of local coordinates
@@ -430,7 +430,7 @@
  /// coordinate direction.
  //==============================================================
  void LinearisedAxisymmetricNavierStokesEquations::output_veloc(
-  std::ostream &outfile, const unsigned &nplot, const unsigned &t)
+  std::ostream &outfile, const unsigned &nplot, const unsigned &t) const
  {
   // Determine number of nodes in element
   const unsigned n_node = nnode();
@@ -511,7 +511,7 @@
  /// coordinate direction.
  //==============================================================
  void LinearisedAxisymmetricNavierStokesEquations::output(
-  std::ostream &outfile, const unsigned &nplot)
+  std::ostream &outfile, const unsigned &nplot) const
  {
   // Provide storage for vector of local coordinates
   Vector<double> s(2);
@@ -646,7 +646,7 @@
  /// coordinate direction.
  //==============================================================
  void LinearisedAxisymmetricNavierStokesEquations::output(
-  FILE* file_pt, const unsigned &nplot)
+  FILE* file_pt, const unsigned &nplot) const
  {
   // Provide storage for vector of local coordinates
   Vector<double> s(2);
Index: demo_drivers/axisym_navier_stokes/counter_rotating_disks/linearised_axisym_navier_stokes_elements.h
===================================================================
--- demo_drivers/axisym_navier_stokes/counter_rotating_disks/linearised_axisym_navier_stokes_elements.h	(revision 258)
+++ demo_drivers/axisym_navier_stokes/counter_rotating_disks/linearised_axisym_navier_stokes_elements.h	(working copy)
@@ -527,7 +527,7 @@
 
    /// \short Output function: r, z, U^C, U^S, V^C, V^S, W^C, W^S, P^C, P^S
    /// in tecplot format. Default number of plot points
-   void output(std::ostream &outfile)
+   void output(std::ostream &outfile) const
    {
     const unsigned nplot = 5;
     output(outfile,nplot);
@@ -539,7 +539,7 @@
    
    /// \short Output function: r, z, U^C, U^S, V^C, V^S, W^C, W^S, P^C, P^S
    /// in tecplot format. Default number of plot points
-   void output(FILE* file_pt)
+   void output(FILE* file_pt) const
    {
     const unsigned nplot = 5;
     output(file_pt,nplot);
@@ -795,24 +795,24 @@
     }
    
     /// Redirect output to NavierStokesEquations output
-    void output(std::ostream &outfile) 
+    void output(std::ostream &outfile) const
     { LinearisedAxisymmetricNavierStokesEquations::output(outfile); }
     
     /// Redirect output to NavierStokesEquations output
-    void output(std::ostream &outfile, const unsigned &n_plot)
+    void output(std::ostream &outfile, const unsigned &n_plot) const
     { LinearisedAxisymmetricNavierStokesEquations::output(outfile,n_plot); }
     
     /// Redirect output to NavierStokesEquations output
-    void output(FILE* file_pt) 
+    void output(FILE* file_pt) const
     { LinearisedAxisymmetricNavierStokesEquations::output(file_pt); }
     
     /// Redirect output to NavierStokesEquations output
-    void output(FILE* file_pt, const unsigned &n_plot)
+    void output(FILE* file_pt, const unsigned &n_plot) const
     { LinearisedAxisymmetricNavierStokesEquations::output(file_pt,n_plot); }
     
     /// \short The number of "blocks" that degrees of freedom in this
     /// element are sub-divided into: Velocity and pressure.
-    unsigned ndof_types() { return 8; }
+    unsigned ndof_types() const { return 8; }
     
     /// \short Create a list of pairs for all unknowns in this element,
     /// so that the first entry in each pair contains the global equation
@@ -1042,24 +1042,24 @@
      }
     
     /// Redirect output to NavierStokesEquations output
-    void output(std::ostream &outfile) 
+    void output(std::ostream &outfile) const
     { LinearisedAxisymmetricNavierStokesEquations::output(outfile); }
     
     /// Redirect output to NavierStokesEquations output
-    void output(std::ostream &outfile, const unsigned &n_plot)
+    void output(std::ostream &outfile, const unsigned &n_plot) const
     { LinearisedAxisymmetricNavierStokesEquations::output(outfile,n_plot); }
     
     /// Redirect output to NavierStokesEquations output
-    void output(FILE* file_pt) 
+    void output(FILE* file_pt) const
     { LinearisedAxisymmetricNavierStokesEquations::output(file_pt); }
     
     /// Redirect output to NavierStokesEquations output
-    void output(FILE* file_pt, const unsigned &n_plot)
+    void output(FILE* file_pt, const unsigned &n_plot) const
     { LinearisedAxisymmetricNavierStokesEquations::output(file_pt,n_plot); }
     
     /// \short Returns the number of "blocks" that degrees of freedom
     /// in this element are sub-divided into: Velocity and pressure.
-    unsigned ndof_types() { return 8; }
+    unsigned ndof_types() const { return 8; }
     
     /// \short Create a list of pairs for all unknowns in this element,
     /// so that the first entry in each pair contains the global equation
Index: demo_drivers/solid/airy_cantilever/airy_cantilever.cc
===================================================================
--- demo_drivers/solid/airy_cantilever/airy_cantilever.cc	(revision 258)
+++ demo_drivers/solid/airy_cantilever/airy_cantilever.cc	(working copy)
@@ -56,7 +56,7 @@
  MySolidElement() : ELEMENT() {};
 
  /// Overload output function:
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
 
    // Element dimension
Index: demo_drivers/solid/airy_cantilever/airy_cantilever2.cc
===================================================================
--- demo_drivers/solid/airy_cantilever/airy_cantilever2.cc	(revision 258)
+++ demo_drivers/solid/airy_cantilever/airy_cantilever2.cc	(working copy)
@@ -58,7 +58,7 @@
  MySolidElement() : ELEMENT() {};
 
  /// Overload output function:
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
 
    // Element dimension
Index: demo_drivers/solid/compressed_square/compressed_square.cc
===================================================================
--- demo_drivers/solid/compressed_square/compressed_square.cc	(revision 258)
+++ demo_drivers/solid/compressed_square/compressed_square.cc	(working copy)
@@ -54,7 +54,7 @@
  MySolidElement() : ELEMENT() {}
 
  /// Overload output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    Vector<double> s(2);
    Vector<double> x(2);
Index: demo_drivers/solid/unstructured_adaptive_solid/unstructured_adaptive_solid.cc
===================================================================
--- demo_drivers/solid/unstructured_adaptive_solid/unstructured_adaptive_solid.cc	(revision 258)
+++ demo_drivers/solid/unstructured_adaptive_solid/unstructured_adaptive_solid.cc	(working copy)
@@ -298,7 +298,7 @@
 /// Calculate the strain energy in the entire elastic solid
 //=======================================================================
 template<class ELEMENT>
-double UnstructuredSolidProblem<ELEMENT>::get_strain_energy()
+double UnstructuredSolidProblem<ELEMENT>::get_strain_energy() const
 {
  double strain_energy=0.0;
  const unsigned n_element = Solid_mesh_pt->nelement();
Index: demo_drivers/navier_stokes/jeffery_orbit/my_taylor_hood_elements.h
===================================================================
--- demo_drivers/navier_stokes/jeffery_orbit/my_taylor_hood_elements.h	(revision 258)
+++ demo_drivers/navier_stokes/jeffery_orbit/my_taylor_hood_elements.h	(working copy)
@@ -58,7 +58,7 @@
   
   /// Overload output function
   void output(std::ostream &outfile, 
-              const unsigned &nplot)
+              const unsigned &nplot) const
    {
     
     // Assign dimension 
Index: demo_drivers/navier_stokes/jeffery_orbit/jeffery_orbit.cc
===================================================================
--- demo_drivers/navier_stokes/jeffery_orbit/jeffery_orbit.cc	(revision 258)
+++ demo_drivers/navier_stokes/jeffery_orbit/jeffery_orbit.cc	(working copy)
@@ -1164,7 +1164,7 @@
 //=====================================================================  
 template<class ELEMENT>
 void UnstructuredImmersedEllipseProblem<ELEMENT>::
-output_exact_solution(std::ofstream &output_file)
+output_exact_solution(std::ofstream &output_file) const
   {
    //Get the current time
    double time = this->time();
Index: demo_drivers/navier_stokes/unstructured_adaptive_ALE/unstructured_adaptive_ALE.cc
===================================================================
--- demo_drivers/navier_stokes/unstructured_adaptive_ALE/unstructured_adaptive_ALE.cc	(revision 258)
+++ demo_drivers/navier_stokes/unstructured_adaptive_ALE/unstructured_adaptive_ALE.cc	(working copy)
@@ -144,7 +144,7 @@
   
   /// Overload output function
   void output(std::ostream &outfile, 
-              const unsigned &nplot)
+              const unsigned &nplot) const
    {
     
     // Assign dimension 
@@ -1346,7 +1346,7 @@
 //========================================================================
 template<class ELEMENT>
 void UnstructuredFluidProblem<ELEMENT>::compute_error_estimate(double& max_err,
-                                                               double& min_err)
+                                                               double& min_err) const
 { 
  // Get error estimator
  ErrorEstimator* err_est_pt=Fluid_mesh_pt->spatial_error_estimator_pt();
Index: demo_drivers/navier_stokes/three_d_bretherton/extra_elements.h
===================================================================
--- demo_drivers/navier_stokes/three_d_bretherton/extra_elements.h	(revision 258)
+++ demo_drivers/navier_stokes/three_d_bretherton/extra_elements.h	(working copy)
@@ -142,10 +142,12 @@
   }
  
  ///Overload the output function
- void output(std::ostream &outfile) { }
+ void output(std::ostream &outfile)
+  {}
 
  ///Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(std::ostream &outfile, const unsigned &Np) { }
+ void output(std::ostream &outfile, const unsigned &Np)
+  {}
 
  ///Overload the self test
  //unsigned self_test() {return GeneralisedElement::self_test();}
@@ -871,10 +873,10 @@
   }
 
  ///Overload the output function
- void output(std::ostream &outfile) { }
+ void output(std::ostream &outfile) const { }
 
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
-void output(std::ostream &outfile, const unsigned &Np) 
+void output(std::ostream &outfile, const unsigned &Np) const
  {
   SpineElement<FaceGeometry<ELEMENT> >::output(outfile,Np);
  }
Index: demo_drivers/navier_stokes/three_d_bretherton/st_mesh.h
===================================================================
--- demo_drivers/navier_stokes/three_d_bretherton/st_mesh.h	(revision 258)
+++ demo_drivers/navier_stokes/three_d_bretherton/st_mesh.h	(working copy)
@@ -130,7 +130,7 @@
    }*/
 
 
-void full_output(std::ostream &outfile, const unsigned &n_plot)
+void full_output(std::ostream &outfile, const unsigned &n_plot) const
  {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
@@ -152,7 +152,7 @@
  }
 
 
-void surface_output(std::ostream &outfile, const unsigned &n_plot)
+void surface_output(std::ostream &outfile, const unsigned &n_plot) const
  {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
Index: demo_drivers/navier_stokes/unstructured_adaptive_fs/adaptive_drop_in_channel.cc
===================================================================
--- demo_drivers/navier_stokes/unstructured_adaptive_fs/adaptive_drop_in_channel.cc	(revision 258)
+++ demo_drivers/navier_stokes/unstructured_adaptive_fs/adaptive_drop_in_channel.cc	(working copy)
@@ -147,7 +147,7 @@
   
   /// Overload output function
   void output(std::ostream &outfile, 
-              const unsigned &nplot)
+              const unsigned &nplot) const
    {
     
     // Assign dimension 
@@ -1238,7 +1238,7 @@
 //========================================================================
 template<class ELEMENT>
 void DropInChannelProblem<ELEMENT>::compute_error_estimate(double& max_err,
-                                                             double& min_err)
+                                                             double& min_err) const
 { 
  // Get error estimator
  ErrorEstimator* err_est_pt=Fluid_mesh_pt->spatial_error_estimator_pt();
Index: demo_drivers/navier_stokes/unstructured_adaptive_fs/adaptive_bubble_in_channel.cc
===================================================================
--- demo_drivers/navier_stokes/unstructured_adaptive_fs/adaptive_bubble_in_channel.cc	(revision 258)
+++ demo_drivers/navier_stokes/unstructured_adaptive_fs/adaptive_bubble_in_channel.cc	(working copy)
@@ -105,7 +105,7 @@
   
   /// Overload output function
   void output(std::ostream &outfile, 
-              const unsigned &nplot)
+              const unsigned &nplot) const
    {
     
     // Assign dimension 
@@ -1243,7 +1243,7 @@
 //========================================================================
 template<class ELEMENT>
 void BubbleInChannelProblem<ELEMENT>::compute_error_estimate(double& max_err,
-                                                             double& min_err)
+                                                             double& min_err) const
 { 
  // Get error estimator
  ErrorEstimator* err_est_pt=Fluid_mesh_pt->spatial_error_estimator_pt();
Index: demo_drivers/optimisation/C_style_output/c_style_output.cc
===================================================================
--- demo_drivers/optimisation/C_style_output/c_style_output.cc	(revision 258)
+++ demo_drivers/optimisation/C_style_output/c_style_output.cc	(working copy)
@@ -180,7 +180,7 @@
 /// Global output function to compare C++ and C-style output routines
 //=====================================================================
 void output_both_versions(const string& file_root, Mesh* mesh_pt,
-                          const unsigned& npts)
+                          const unsigned& npts) const
 {
 
 
Index: demo_drivers/young_laplace/refineable_young_laplace.cc
===================================================================
--- demo_drivers/young_laplace/refineable_young_laplace.cc	(revision 258)
+++ demo_drivers/young_laplace/refineable_young_laplace.cc	(working copy)
@@ -540,7 +540,7 @@
 /// Run code for current setting of parameter values -- specify name
 /// of output directory
 //========================================================================
-void run_it(const string& output_directory)
+void run_it(const string& output_directory) const
 {
 
  // Create label for output
Index: demo_drivers/young_laplace/young_laplace.cc
===================================================================
--- demo_drivers/young_laplace/young_laplace.cc	(revision 258)
+++ demo_drivers/young_laplace/young_laplace.cc	(working copy)
@@ -473,7 +473,7 @@
 /// Run code for current setting of parameter values -- specify name
 /// of output directory
 //========================================================================
-void run_it(const string& output_directory)
+void run_it(const string& output_directory) const
 {
  
  // Create label for output
Index: demo_drivers/womersley/one_d_womersley/flux_control_elements.h
===================================================================
--- demo_drivers/womersley/one_d_womersley/flux_control_elements.h	(revision 258)
+++ demo_drivers/womersley/one_d_womersley/flux_control_elements.h	(working copy)
@@ -271,10 +271,10 @@
 /*   } */
  
  ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  /// Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {FiniteElement::output(outfile,nplot);}
  
  /// \short Function to add to external data the Data object whose
Index: demo_drivers/poisson/one_d_poisson_generic_only/one_d_poisson_generic_only.cc
===================================================================
--- demo_drivers/poisson/one_d_poisson_generic_only/one_d_poisson_generic_only.cc	(revision 258)
+++ demo_drivers/poisson/one_d_poisson_generic_only/one_d_poisson_generic_only.cc	(working copy)
@@ -156,7 +156,7 @@
   /// at each node. In a more general "Equation" element, such abstraction
   /// is essential, because different Elements will store the same variables
   /// in different locations.
-  double u(const unsigned &n) {return node_pt(n)->value(0);}
+  double u(const unsigned &n) const {return node_pt(n)->value(0);}
 
   /// For the Poisson equation, only one value is stored at each node
   unsigned required_nvalue(const unsigned &n) const {return 1;}
@@ -333,7 +333,7 @@
    } //End of function
   
   //Define an output function for the element 
-  void output(ostream &output) 
+  void output(ostream &output) const
    {
     //Read out the number of nodes in the element   
     unsigned n_node = nnode();
Index: demo_drivers/eigenproblems/orr_sommerfeld/orr_sommerfeld.cc
===================================================================
--- demo_drivers/eigenproblems/orr_sommerfeld/orr_sommerfeld.cc	(revision 258)
+++ demo_drivers/eigenproblems/orr_sommerfeld/orr_sommerfeld.cc	(working copy)
@@ -100,7 +100,7 @@
  double* &a_imag_pt() {return A_Imag_pt;}
 
  /// Output with default number of plot points
- void output(ostream &outfile) 
+ void output(ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -108,7 +108,7 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// Nplot^DIM plot points
- void output(ostream &outfile, const unsigned &nplot)
+ void output(ostream &outfile, const unsigned &nplot) const
   {
    //Vector of local coordinates
    Vector<double> s(DIM);
@@ -642,7 +642,7 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(ostream &outfile)
+ void output(ostream &outfile) const
   {
    OrrSommerfeldEquations<1>::output(outfile);
   }
@@ -652,7 +652,7 @@
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at Nplot^DIM plot points
- void output(ostream &outfile, const unsigned &Nplot)
+ void output(ostream &outfile, const unsigned &Nplot) const
   {
    OrrSommerfeldEquations<1>::output(outfile,Nplot);
   }
@@ -986,7 +986,7 @@
    fill_in_contribution_to_residuals(residuals);
   }
 
- void output(std::ostream &output, const unsigned &)
+ void output(std::ostream &output, const unsigned &) const
   {
    eigenvalue_problem_pt->mesh_pt()->output(output,5);
   }
Index: demo_drivers/eigenproblems/harmonic/harmonic.cc
===================================================================
--- demo_drivers/eigenproblems/harmonic/harmonic.cc	(revision 258)
+++ demo_drivers/eigenproblems/harmonic/harmonic.cc	(working copy)
@@ -83,7 +83,7 @@
   {return nodal_value(n,0);}
 
  /// Output the eigenfunction with default number of plot points
- void output(ostream &outfile) 
+ void output(ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -91,7 +91,7 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// Nplot  plot points
- void output(ostream &outfile, const unsigned &nplot)
+ void output(ostream &outfile, const unsigned &nplot) const
   {
    //Vector of local coordinates
    Vector<double> s(1);
@@ -243,7 +243,7 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(ostream &outfile)
+ void output(ostream &outfile) const
   {
    HarmonicEquations::output(outfile);
   }
@@ -252,7 +252,7 @@
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at Nplot^DIM plot points
- void output(ostream &outfile, const unsigned &Nplot)
+ void output(ostream &outfile, const unsigned &Nplot) const
   {
    HarmonicEquations::output(outfile,Nplot);
   }
Index: demo_drivers/FAQ/broken_this_demo.cc
===================================================================
--- demo_drivers/FAQ/broken_this_demo.cc	(revision 258)
+++ demo_drivers/FAQ/broken_this_demo.cc	(working copy)
@@ -70,7 +70,7 @@
  virtual ~SomeDerivedClass(){};
 
  /// Some member function
- void output_template_parameter()
+ void output_template_parameter() const
   {
    std::cout << "My template parameter is: " 
              << TEMPLATE_PARAMETER << std::endl;
Index: demo_drivers/FAQ/customising_output.cc
===================================================================
--- demo_drivers/FAQ/customising_output.cc	(revision 258)
+++ demo_drivers/FAQ/customising_output.cc	(working copy)
@@ -54,7 +54,7 @@
  ~CustomisedQPoissonElement(){};
 
  /// Overload output function
- void output(std::ostream& output_file)
+ void output(std::ostream& output_file) const
   {
    output_file << "Hello world" << std::endl;
   }
Index: demo_drivers/polar_navier_stokes/jeffery_hamel/polar_streamfunction_traction_elements.h
===================================================================
--- demo_drivers/polar_navier_stokes/jeffery_hamel/polar_streamfunction_traction_elements.h	(revision 258)
+++ demo_drivers/polar_navier_stokes/jeffery_hamel/polar_streamfunction_traction_elements.h	(working copy)
@@ -145,10 +145,10 @@
   }
  
  ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
-void output(std::ostream &outfile, const unsigned &nplot)
+void output(std::ostream &outfile, const unsigned &nplot) const
  {FiniteElement::output(outfile,nplot);}
 
  /// local streamfunction
Index: demo_drivers/polar_navier_stokes/jeffery_hamel/streamfunction_elements.h
===================================================================
--- demo_drivers/polar_navier_stokes/jeffery_hamel/streamfunction_elements.h	(revision 258)
+++ demo_drivers/polar_navier_stokes/jeffery_hamel/streamfunction_elements.h	(working copy)
@@ -45,7 +45,7 @@
  virtual inline unsigned u_index_velocity(const unsigned &i) const {return i+1;}
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    const unsigned n_plot=5;
    output(outfile,n_plot);
@@ -56,7 +56,7 @@
  void output(std::ostream &outfile, const unsigned &n_plot);
  
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    const unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -310,28 +310,28 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {PolarStreamfunctionEquations::output(outfile);}
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {PolarStreamfunctionEquations::output(outfile,n_plot);}
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {PolarStreamfunctionEquations::output(file_pt);}
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {PolarStreamfunctionEquations::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution:
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {PolarStreamfunctionEquations::output_fct(outfile,n_plot,exact_soln_pt);}
 
  /// \short Output function for a time-dependent exact solution.
@@ -589,7 +589,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
 void  PolarStreamfunctionEquations::output(std::ostream &outfile, 
-                                    const unsigned &nplot)
+                                    const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -630,7 +630,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
 void  PolarStreamfunctionEquations::output(FILE* file_pt,
-                                    const unsigned &nplot)
+                                    const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
Index: demo_drivers/polar_navier_stokes/jeffery_hamel/jeffery_hamel.cc
===================================================================
--- demo_drivers/polar_navier_stokes/jeffery_hamel/jeffery_hamel.cc	(revision 258)
+++ demo_drivers/polar_navier_stokes/jeffery_hamel/jeffery_hamel.cc	(working copy)
@@ -392,7 +392,7 @@
 /// Output an individual element 
 //========================================================================
 template<class ELEMENT>
-void PolarNSProblem<ELEMENT>::element_output(std::ostream& outfile,unsigned e,const unsigned& nplot)
+void PolarNSProblem<ELEMENT>::element_output(std::ostream& outfile,unsigned e,const unsigned& nplot) const
 { 
   // Upcast from GeneralisedElement to the present element
   ELEMENT* el_pt = dynamic_cast<ELEMENT*>(mesh_pt()->element_pt(e));
@@ -482,7 +482,7 @@
 // My function for outputting the streamfunction
 //========================================================================
 template<class ELEMENT> 
-void PolarNSProblem<ELEMENT>::output_streamfunction(DocInfo &doc_info,bool eigen)
+void PolarNSProblem<ELEMENT>::output_streamfunction(DocInfo &doc_info,bool eigen) const
 {
  //Create a streamfunction problem 
  // This needs to know if its solving for the flow or the eigenfunction
Index: demo_drivers/polar_navier_stokes/jeffery_hamel/streamfunction_include.h
===================================================================
--- demo_drivers/polar_navier_stokes/jeffery_hamel/streamfunction_include.h	(revision 258)
+++ demo_drivers/polar_navier_stokes/jeffery_hamel/streamfunction_include.h	(working copy)
@@ -444,7 +444,7 @@
 // My function for outputting the streamfunction using 
 // Rich's get_vels() function
 //========================================================================
-void StreamfunctionProblem::my_output(const int radial,const int azimuthal,bool log_output,string file_name)
+void StreamfunctionProblem::my_output(const int radial,const int azimuthal,bool log_output,string file_name) const
 {
   // Quick adjustment so that I don't ever end up exactly on a boundary
   // (get_vels fails on certain boundaries)
Index: src/steady_axisym_advection_diffusion/steady_axisym_advection_diffusion_elements.cc
===================================================================
--- src/steady_axisym_advection_diffusion/steady_axisym_advection_diffusion_elements.cc	(revision 258)
+++ src/steady_axisym_advection_diffusion/steady_axisym_advection_diffusion_elements.cc	(working copy)
@@ -222,7 +222,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
 void SteadyAxisymAdvectionDiffusionEquations::output(std::ostream &outfile, 
-                                                     const unsigned &nplot)
+                                                     const unsigned &nplot) const
 { 
  //Vector of local coordinates
  Vector<double> s(2);
@@ -275,7 +275,7 @@
 //======================================================================
 //template <unsigned DIM>
 void SteadyAxisymAdvectionDiffusionEquations::output(FILE* file_pt,
-                                                     const unsigned &nplot)
+                                                     const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
@@ -315,7 +315,7 @@
 //template <unsigned DIM>
 void SteadyAxisymAdvectionDiffusionEquations::output_fct(std::ostream &outfile, 
                                                          const unsigned &nplot, 
-                                                         FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                                                         FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
 
    //Vector of local coordinates
@@ -369,7 +369,7 @@
 void SteadyAxisymAdvectionDiffusionEquations::compute_error(std::ostream &outfile, 
                                                             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
                                                             double& error,
-                                                            double& norm)
+                                                            double& norm) const
 { 
 
  //Initialise
Index: src/steady_axisym_advection_diffusion/steady_axisym_advection_diffusion_elements.h
===================================================================
--- src/steady_axisym_advection_diffusion/steady_axisym_advection_diffusion_elements.h	(revision 258)
+++ src/steady_axisym_advection_diffusion/steady_axisym_advection_diffusion_elements.h	(working copy)
@@ -103,7 +103,7 @@
   }
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot = 5;
    output(outfile,nplot);
@@ -111,11 +111,11 @@
 
  /// \short Output FE representation of soln: r,z,u  at 
  /// nplot^2 plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot = 5;
    output(file_pt,n_plot);
@@ -123,20 +123,20 @@
 
  /// \short C-style output FE representation of soln: r,z,u  at 
  /// n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: r,z,u_exact at nplot^2 plot points
  void output_fct(std::ostream &outfile, 
                  const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
                     exact_soln_pt, double& error, 
-                    double& norm);
+                    double& norm) const;
 
  /// Access function: Pointer to source function
  SteadyAxisymAdvectionDiffusionSourceFctPt& source_fct_pt() 
@@ -318,7 +318,7 @@
  ///refineable version
  virtual void dinterpolated_u_adv_diff_ddata(const Vector<double> &s, 
                                              Vector<double> &du_ddata,
-                                             Vector<unsigned> &global_eqn_number)
+                                             Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    const unsigned n_node = nnode();
@@ -470,14 +470,14 @@
 
  /// \short Output function:  
  ///  r,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    SteadyAxisymAdvectionDiffusionEquations::output(outfile);
   }
 
  /// \short Output function:  
  ///  r,z,u  at n_plot^2 plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    SteadyAxisymAdvectionDiffusionEquations::output(outfile,n_plot);
   }
@@ -485,14 +485,14 @@
 
  /// \short C-style output function:  
  ///  r,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    SteadyAxisymAdvectionDiffusionEquations::output(file_pt);
   }
 
  ///  \short C-style output function:  
  ///   r,z,u at n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    SteadyAxisymAdvectionDiffusionEquations::output(file_pt,n_plot);
   }
@@ -501,7 +501,7 @@
  ///  r,z,u_exact at n_plot^2 plot points
  void output_fct(std::ostream &outfile, 
                  const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
    SteadyAxisymAdvectionDiffusionEquations::output_fct(outfile,n_plot,exact_soln_pt);
   }
@@ -718,14 +718,14 @@
  
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    FiniteElement::output(outfile);
   }
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    FiniteElement::output(outfile,nplot);
   }
Index: src/flux_transport/scalar_advection_elements.h
===================================================================
--- src/flux_transport/scalar_advection_elements.h	(revision 258)
+++ src/flux_transport/scalar_advection_elements.h	(working copy)
@@ -103,7 +103,7 @@
  ///Assemble the contributions to the mass matrix and residuals
  void compute_error(FiniteElement::SteadyExactSolutionFctPt
                     initial_condition_pt, const double &t, 
-                    Vector<double> &error)
+                    Vector<double> &error) const
   {
    //Find the number of fluxes
    const unsigned n_flux = this->nflux();
@@ -212,12 +212,12 @@
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {ScalarAdvectionEquations<DIM>::output(outfile);}
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {ScalarAdvectionEquations<DIM>::output(outfile,n_plot);}
 
 
@@ -395,7 +395,7 @@
 
 
   //There is a single required n_flux
-  unsigned required_nflux() {return 1;}
+  unsigned required_nflux() const {return 1;}
 
   ///Calculate the normal flux, so this is the dot product of the 
   ///numerical flux with n_in
@@ -458,7 +458,7 @@
 public:
 
  //There is a single required n_flux
-  unsigned required_nflux() {return 1;}
+  unsigned required_nflux() const {return 1;}
   
   //Calculate averages 
   void calculate_element_averages(double* &average_value)
@@ -597,7 +597,7 @@
    {FluxTransportEquations<2>::calculate_element_averages(average_value);}
 
   //There is a single required n_flux
-  unsigned required_nflux() {return 1;}
+  unsigned required_nflux() const {return 1;}
 
  //Constructor
  DGSpectralScalarAdvectionElement() : 
@@ -697,12 +697,12 @@
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {ScalarAdvectionEquations<DIM>::output(outfile);}
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {ScalarAdvectionEquations<DIM>::output(outfile,n_plot);}
 
 
@@ -881,7 +881,7 @@
 public:
 
   //There is a single required n_flux
-  unsigned required_nflux() {return 1;}
+  unsigned required_nflux() const {return 1;}
 
   //Calculate averages 
   void calculate_element_averages(double* &average_value)
@@ -956,7 +956,7 @@
 public:
 
   //There is a single required n_flux
-  unsigned required_nflux() {return 1;}
+  unsigned required_nflux() const {return 1;}
 
    //Calculate averages 
   void calculate_element_averages(double* &average_value)
Index: src/flux_transport/flux_transport_elements.cc
===================================================================
--- src/flux_transport/flux_transport_elements.cc	(revision 258)
+++ src/flux_transport/flux_transport_elements.cc	(working copy)
@@ -241,7 +241,7 @@
  //==================================================================
 template<unsigned DIM>
  double FluxTransportEquations<DIM>::interpolated_u_flux_transport(
-  const Vector<double> &s, const unsigned &i)
+  const Vector<double> &s, const unsigned &i) const
  {
   //Find the number of nodes
   const unsigned n_node = this->nnode();
@@ -370,7 +370,7 @@
  //==================================================================
  template<unsigned DIM>
  void FluxTransportEquations<DIM>::
- output(std::ostream &outfile, const unsigned &nplot)
+ output(std::ostream &outfile, const unsigned &nplot) const
  {
    //Find the number of fluxes
   const unsigned n_flux = this->nflux();
Index: src/flux_transport/euler_elements.cc
===================================================================
--- src/flux_transport/euler_elements.cc	(revision 258)
+++ src/flux_transport/euler_elements.cc	(working copy)
@@ -104,7 +104,7 @@
  //==================================================================
  template<unsigned DIM>
  void EulerEquations<DIM>::
- output(std::ostream &outfile, const unsigned &nplot)
+ output(std::ostream &outfile, const unsigned &nplot) const
  {
    //Find the number of fluxes
   const unsigned n_flux = this->nflux();
Index: src/flux_transport/flux_transport_elements.h
===================================================================
--- src/flux_transport/flux_transport_elements.h	(revision 258)
+++ src/flux_transport/flux_transport_elements.h	(working copy)
@@ -160,7 +160,7 @@
 
  //Get the value of the unknowns
  double interpolated_u_flux_transport(const Vector<double> &s, 
-                                      const unsigned &i);
+                                      const unsigned &i) const;
 
  /// \short i-th component of du/dt at local node n. 
  /// Uses suitably interpolated value for hanging nodes.
@@ -170,13 +170,13 @@
  void calculate_element_averages(double* &average_values);
 
  //Default output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
   }
 
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 };
 
Index: src/flux_transport/euler_elements.h
===================================================================
--- src/flux_transport/euler_elements.h	(revision 258)
+++ src/flux_transport/euler_elements.h	(working copy)
@@ -108,7 +108,7 @@
  ///Assemble the contributions to the mass matrix and residuals
  void compute_error(FiniteElement::UnsteadyExactSolutionFctPt
                     exact_solution_pt, const double &t, 
-                    Vector<double> &error)
+                    Vector<double> &error) const
   {
    //Find the number of fluxes
    const unsigned n_flux = this->nflux();
@@ -172,7 +172,7 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
   unsigned nplot=5;
   output(outfile,nplot);
@@ -180,7 +180,7 @@
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  void allocate_memory_for_averages()
   {
@@ -252,12 +252,12 @@
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {EulerEquations<DIM>::output(outfile);}
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {EulerEquations<DIM>::output(outfile,n_plot);}
 
 
@@ -456,7 +456,7 @@
    
 
   //There is a single required n_flux
-  unsigned required_nflux() {return Nflux;}
+  unsigned required_nflux() const {return Nflux;}
 
   ///Calculate the normal flux, so this is the dot product of the 
   ///numerical flux with n_out
@@ -680,11 +680,11 @@
    {return FaceElement::zeta_nodal(n,k,i);}     
    
   //There is a single required n_flux
-  unsigned required_nflux() {return Nflux;}
+  unsigned required_nflux() const {return Nflux;}
 
   ///We overload interpolated_u to reflect
   void interpolated_u(const Vector<double> &s, 
-                      Vector<double> &u)
+                      Vector<double> &u)  const
    {
     //Get the standard interpolated_u
     DGFaceElement::interpolated_u(s,u);
@@ -737,7 +737,7 @@
 public:
 
  ///Overload the required number of fluxes for the DGElement
- unsigned required_nflux() {return this->nflux();}
+ unsigned required_nflux() const {return this->nflux();}
  
  //Calculate averages 
  void calculate_element_averages(double* &average_value)
@@ -869,7 +869,7 @@
 public:
   
  ///Overload the required number of fluxes for the DGElement
- unsigned required_nflux() {return this->nflux();}
+ unsigned required_nflux() const {return this->nflux();}
 
   //Calculate averages 
  void calculate_element_averages(double* &average_value)
Index: src/multi_physics/boussinesq_elements.h
===================================================================
--- src/multi_physics/boussinesq_elements.h	(revision 258)
+++ src/multi_physics/boussinesq_elements.h	(working copy)
@@ -127,12 +127,12 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  Output x, y, u, v, p, theta at Nplot^DIM plot points
  // Start of output function
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -169,11 +169,11 @@
 
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
@@ -206,7 +206,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
  
@@ -774,12 +774,12 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {FiniteElement::output(outfile);}
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at Nplot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    Vector<double> s(DIM);
@@ -816,11 +816,11 @@
   }
 
  /// \short C-style output function:  Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short Output function for an exact solution: Broken default
@@ -1036,7 +1036,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm)
+                    double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,
                                 time,error,norm);}
 
Index: src/multi_physics/multi_domain_boussinesq_elements.h
===================================================================
--- src/multi_physics/multi_domain_boussinesq_elements.h	(revision 258)
+++ src/multi_physics/multi_domain_boussinesq_elements.h	(working copy)
@@ -349,7 +349,7 @@
  }
  
  /// Get number of dof types from underlying element
- unsigned ndof_types()
+ unsigned ndof_types() const
  {
   return NST_ELEMENT::ndof_types();
  }
@@ -402,7 +402,7 @@
   /// \short Output function:
   ///  Output x, y, theta at Nplot^DIM plot points
  // Start of output function
-  void output(std::ostream &outfile, const unsigned &nplot)
+  void output(std::ostream &outfile, const unsigned &nplot) const
   {
    //vector of local coordinates
    unsigned n_dim=this->dim();
@@ -434,14 +434,14 @@
 
 
  ///  Overload the standard output function with the broken default
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
@@ -730,7 +730,7 @@
  
 
  /// Specify number of dof types for use in block preconditioner
- unsigned ndof_types()
+ unsigned ndof_types() const
  {
   return 1;
  }
@@ -1054,7 +1054,7 @@
   /// \short Output function:
   ///  Output x, y, theta at Nplot^DIM plot points
  // Start of output function
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    // Element dimension
    const unsigned n_dim=this->dim();
@@ -1088,14 +1088,14 @@
 
 
  ///  Overload the standard output function with the broken default
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short C-style output function: Broken default
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  ///  \short C-style output function: Broken default
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
Index: src/unsteady_heat/unsteady_heat_elements.h
===================================================================
--- src/unsteady_heat/unsteady_heat_elements.h	(revision 258)
+++ src/unsteady_heat/unsteady_heat_elements.h	(working copy)
@@ -142,7 +142,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -151,10 +151,10 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -163,13 +163,13 @@
 
  /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: x,y,u_exact or x,y,z,u_exact at nplot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
 
  /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
@@ -178,21 +178,21 @@
   void output_fct(std::ostream &outfile, const unsigned &nplot,
                   const double& time, 
                   FiniteElement::UnsteadyExactSolutionFctPt 
-                  exact_soln_pt);
+                  exact_soln_pt) const;
 
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    const double& time, double& error, double& norm);
+                    const double& time, double& error, double& norm) const;
 
 
  /// Access function: Pointer to source function
@@ -389,25 +389,25 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {UnsteadyHeatEquations<DIM>::output(outfile);}
 
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {UnsteadyHeatEquations<DIM>::output(outfile,n_plot);}
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {UnsteadyHeatEquations<DIM>::output(file_pt);}
 
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {UnsteadyHeatEquations<DIM>::output(file_pt,n_plot);}
 
 
@@ -415,7 +415,7 @@
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {UnsteadyHeatEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}
 
 
Index: src/unsteady_heat/unsteady_heat_elements.cc
===================================================================
--- src/unsteady_heat/unsteady_heat_elements.cc	(revision 258)
+++ src/unsteady_heat/unsteady_heat_elements.cc	(working copy)
@@ -237,7 +237,7 @@
 //======================================================================
 template <unsigned DIM>
 void  UnsteadyHeatEquations<DIM>::output(std::ostream &outfile, 
-                                         const unsigned &nplot)
+                                         const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -275,7 +275,7 @@
 //======================================================================
 template <unsigned DIM>
 void  UnsteadyHeatEquations<DIM>::output(FILE* file_pt,
-                                         const unsigned &nplot)
+                                         const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -317,7 +317,7 @@
 template <unsigned DIM>
 void UnsteadyHeatEquations<DIM>::output_fct(std::ostream &outfile, 
                                             const unsigned &nplot, 
-                        FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                        FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -374,7 +374,7 @@
 void UnsteadyHeatEquations<DIM>::output_fct(std::ostream &outfile, 
                                             const unsigned &nplot,
                                             const double& time, 
-                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 
 {
  
@@ -431,7 +431,7 @@
 template <unsigned DIM>
 void UnsteadyHeatEquations<DIM>::compute_error(std::ostream &outfile, 
                                            FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                                               double& error, double& norm)
+                                               double& error, double& norm) const
 { 
  
  // Initialise
@@ -512,7 +512,7 @@
 template<unsigned DIM>
 void UnsteadyHeatEquations<DIM>::compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
 
 { 
 
Index: src/unsteady_heat/unsteady_heat_flux_elements.h
===================================================================
--- src/unsteady_heat/unsteady_heat_flux_elements.h	(revision 258)
+++ src/unsteady_heat/unsteady_heat_flux_elements.h	(working copy)
@@ -117,21 +117,21 @@
 
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FaceGeometry<ELEMENT>::output(outfile);}
+ void output(std::ostream &outfile) const {FaceGeometry<ELEMENT>::output(outfile);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FaceGeometry<ELEMENT>::output(outfile,n_plot);}
 
  /// C-style output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt) {FaceGeometry<ELEMENT>::output(file_pt);}
+ void output(FILE* file_pt) const {FaceGeometry<ELEMENT>::output(file_pt);}
 
  /// \short C-style output function -- forward to broken version in 
  /// FiniteElement until somebody decides what exactly they want to plot 
  /// here...
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FaceGeometry<ELEMENT>::output(file_pt,n_plot);}
 
 protected:
Index: src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_elements.cc
===================================================================
--- src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_elements.cc	(revision 258)
+++ src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_elements.cc	(working copy)
@@ -613,7 +613,7 @@
  void TimeHarmonicFourierDecomposedLinearElasticityEquations::output_fct(
   std::ostream &outfile, 
   const unsigned &nplot, 
-  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   //Vector of local coordinates
   Vector<double> s(2);
@@ -663,7 +663,7 @@
 //=======================================================================
  void TimeHarmonicFourierDecomposedLinearElasticityEquations::
  output(std::ostream &outfile, 
-        const unsigned &nplot)
+        const unsigned &nplot) const
  {
   //Set output Vector
   Vector<double> s(2);
@@ -711,7 +711,7 @@
 //=======================================================================
 void TimeHarmonicFourierDecomposedLinearElasticityEquations::output(
  FILE* file_pt, 
- const unsigned &nplot)
+ const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
@@ -762,7 +762,7 @@
 void TimeHarmonicFourierDecomposedLinearElasticityEquations::compute_error(
  std::ostream &outfile,
  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
- double& error, double& norm)
+ double& error, double& norm) const
 {
  
  error=0.0;
Index: src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_elements.h
===================================================================
--- src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_elements.h	(revision 258)
+++ src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_elements.h	(working copy)
@@ -72,8 +72,7 @@
   /// Compute vector of FE interpolated displacement u at local coordinate s
   void interpolated_u_time_harmonic_fourier_decomposed_linear_elasticity(
     const Vector<double> &s, 
-    Vector<std::complex<double> >& disp) 
-    const
+    Vector<std::complex<double> >& disp) const
    {
     //Find number of nodes
     unsigned n_node = nnode();
@@ -367,27 +366,27 @@
    ///Output exact solution: r,z, u_r_real, u_z_real, ..., u_theta_imag
    void output_fct(std::ostream &outfile, 
                    const unsigned &nplot, 
-                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
    
    /// Output: r,z, u_r_real, u_z_real, ..., u_theta_imag
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
    {
     unsigned n_plot=5;
     output(outfile,n_plot);
    }
    
    /// Output: r,z, u_r_real, u_z_real, ..., u_theta_imag
-   void output(std::ostream &outfile, const unsigned &n_plot);
+   void output(std::ostream &outfile, const unsigned &n_plot) const;
    
    /// C-style output: r,z, u_r_real, u_z_real, ..., u_theta_imag
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
    {
     unsigned n_plot=5;
     output(file_pt,n_plot);
    }
    
    /// Output:  r,z, u_r_real, u_z_real, ..., u_theta_imag
-   void output(FILE* file_pt, const unsigned &n_plot);
+   void output(FILE* file_pt, const unsigned &n_plot) const;
    
    /// Validate against exact solution.
    /// Solution is provided via function pointer.
@@ -395,7 +394,7 @@
    /// and L2 norm of displacement solution over element
    void compute_error(std::ostream &outfile,
                       FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                      double& error, double& norm);
+                      double& error, double& norm) const;
 
 
     private:
@@ -430,21 +429,21 @@
     TimeHarmonicFourierDecomposedLinearElasticityEquations() { }
     
     /// Output function
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::output(outfile);}
    
    /// Output function
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::
      output(outfile,n_plot);}
    
    
    /// C-style output function
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::output(file_pt);}
    
    /// C-style output function
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::
      output(file_pt,n_plot);}
    
@@ -489,20 +488,20 @@
     TimeHarmonicFourierDecomposedLinearElasticityEquations() { }
     
     /// Output function
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::output(outfile);}
    
    /// Output function
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::
      output(outfile,n_plot);}
    
    /// C-style output function
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::output(file_pt);}
    
    /// C-style output function
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
    {TimeHarmonicFourierDecomposedLinearElasticityEquations::
      output(file_pt,n_plot);}
    
Index: src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_traction_elements.h
===================================================================
--- src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_traction_elements.h	(revision 258)
+++ src/time_harmonic_fourier_decomposed_linear_elasticity/time_harmonic_fourier_decomposed_linear_elasticity_traction_elements.h	(working copy)
@@ -191,19 +191,19 @@
  {return FaceElement::zeta_nodal(n,k,i);}     
 
  /// \short Output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
  {FiniteElement::output(outfile);}
  
  /// \short Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {FiniteElement::output(outfile,n_plot);}
  
  /// \short C_style output function
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
  {FiniteElement::output(file_pt);}
  
  /// \short C-style output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {FiniteElement::output(file_pt,n_plot);}
  
  
Index: src/constitutive/constitutive_laws.cc
===================================================================
--- src/constitutive/constitutive_laws.cc	(revision 258)
+++ src/constitutive/constitutive_laws.cc	(working copy)
@@ -36,7 +36,7 @@
 //===============================================================
 /// This function is used to check whether a matrix is square
 //===============================================================
-bool ConstitutiveLaw::is_matrix_square(const DenseMatrix<double> &M)
+bool ConstitutiveLaw::is_matrix_square(const DenseMatrix<double> &M) const
 {
  //If the number rows and columns is not equal, the matrix is not square
  if(M.nrow() != M.ncol()) {return false;}
@@ -47,7 +47,7 @@
 /// This function is used to check whether matrices are of equal dimension
 //========================================================================
 bool ConstitutiveLaw::are_matrices_of_equal_dimensions(
- const DenseMatrix<double> &M1, const DenseMatrix<double> &M2)
+ const DenseMatrix<double> &M1, const DenseMatrix<double> &M2) const
 {
  //If the numbers of rows and columns are not the same, then the
  //matrices are not of equal dimension
@@ -107,7 +107,7 @@
 //===========================================================================
 double ConstitutiveLaw::
 calculate_contravariant( const DenseMatrix<double> &Gdown,
-                         DenseMatrix<double> &Gup)
+                         DenseMatrix<double> &Gup) const
 {
  //Initial error checking
 #ifdef PARANOID
@@ -214,7 +214,7 @@
 void ConstitutiveLaw::
 calculate_d_contravariant_dG(const DenseMatrix<double> &Gdown,
                              RankFourTensor<double> &d_Gup_dG,
-                             DenseMatrix<double> &d_detG_dG)
+                             DenseMatrix<double> &d_detG_dG) const
 {
  //Find the dimension of the matrix
  const unsigned dim = Gdown.ncol();
Index: src/constitutive/constitutive_laws.h
===================================================================
--- src/constitutive/constitutive_laws.h	(revision 258)
+++ src/constitutive/constitutive_laws.h	(working copy)
@@ -489,11 +489,11 @@
    protected:
 
   /// \short Test whether a matrix is square
-  bool is_matrix_square(const DenseMatrix<double> &M);
+  bool is_matrix_square(const DenseMatrix<double> &M) const;
 
   /// \short Test whether two matrices are of equal dimensions
   bool are_matrices_of_equal_dimensions(const DenseMatrix<double> &M1, 
-                                        const DenseMatrix<double> &M2);
+                                        const DenseMatrix<double> &M2) const;
 
   /// \short Check for errors in the input, 
   /// i.e. check that the dimensions of the arrays are all consistent
@@ -504,14 +504,14 @@
   /// \short Calculate a contravariant tensor from a covariant tensor,
   /// and return the determinant of the covariant tensor.
   double calculate_contravariant(const DenseMatrix<double> &Gcov,
-                                 DenseMatrix<double> &Gcontra);
+                                 DenseMatrix<double> &Gcontra) const;
 
   /// \short Calculate the derivatives of the contravariant tensor
   /// and the derivatives of the determinant of the covariant tensor
   /// with respect to the components of the covariant tensor
   void calculate_d_contravariant_dG(const DenseMatrix<double> &Gcov,
                                     RankFourTensor<double> &dGcontra_dG,
-                                    DenseMatrix<double> &d_detG_dG);
+                                    DenseMatrix<double> &d_detG_dG) const;
   
 
    public:
Index: src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_elements.cc
===================================================================
--- src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_elements.cc	(revision 258)
+++ src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_elements.cc	(working copy)
@@ -458,7 +458,7 @@
  void TimeHarmonicLinearElasticityEquations<DIM>::output_fct(
   std::ostream &outfile, 
   const unsigned &nplot, 
-  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   //Vector of local coordinates
   Vector<double> s(DIM);
@@ -510,7 +510,7 @@
 //=======================================================================
  template <unsigned DIM>
  void TimeHarmonicLinearElasticityEquations<DIM>::output(std::ostream &outfile, 
-                                             const unsigned &nplot)
+                                             const unsigned &nplot) const
  {
   //Set output Vector
   Vector<double> s(DIM);
@@ -559,7 +559,7 @@
 //=======================================================================
 template <unsigned DIM>
 void TimeHarmonicLinearElasticityEquations<DIM>::output(FILE* file_pt, 
-                                            const unsigned &nplot)
+                                            const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
Index: src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_elements.h
===================================================================
--- src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_elements.h	(revision 258)
+++ src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_elements.h	(working copy)
@@ -77,8 +77,7 @@
    /// Compute vector of FE interpolated displacement u at local coordinate s
    void interpolated_u_time_harmonic_linear_elasticity(
     const Vector<double> &s, 
-    Vector<std::complex<double> >& disp) 
-    const
+    Vector<std::complex<double> >& disp) const
    {
     //Find number of nodes
     unsigned n_node = nnode();
@@ -341,28 +340,28 @@
    ///Output exact solution x,y,[z],u_r,v_r,[w_r],u_i,v_i,[w_i]
    void output_fct(std::ostream &outfile, 
                    const unsigned &nplot, 
-                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
    
    /// Output: x,y,[z],u_r,v_r,[w_r],u_i,v_i,[w_i]
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
    {
     unsigned n_plot=5;
     output(outfile,n_plot);
    }
    
    /// Output: x,y,[z],u_r,v_r,[w_r],u_i,v_i,[w_i]
-   void output(std::ostream &outfile, const unsigned &n_plot);
+   void output(std::ostream &outfile, const unsigned &n_plot) const;
    
    
    /// C-style output: x,y,[z],u_r,v_r,[w_r],u_i,v_i,[w_i]
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
    {
     unsigned n_plot=5;
     output(file_pt,n_plot);
    }
    
    /// Output: x,y,[z],u_r,v_r,[w_r],u_i,v_i,[w_i]
-   void output(FILE* file_pt, const unsigned &n_plot);
+   void output(FILE* file_pt, const unsigned &n_plot) const;
    
    
     private:
@@ -395,20 +394,20 @@
     TimeHarmonicLinearElasticityEquations<DIM>() { }
    
    /// Output function
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
    {TimeHarmonicLinearElasticityEquations<DIM>::output(outfile);}
    
    /// Output function
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
    {TimeHarmonicLinearElasticityEquations<DIM>::output(outfile,n_plot);}
    
    
    /// C-style output function
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
    {TimeHarmonicLinearElasticityEquations<DIM>::output(file_pt);}
    
    /// C-style output function
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
    {TimeHarmonicLinearElasticityEquations<DIM>::output(file_pt,n_plot);}
    
   };
Index: src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_traction_elements.h
===================================================================
--- src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_traction_elements.h	(revision 258)
+++ src/time_harmonic_linear_elasticity/time_harmonic_linear_elasticity_traction_elements.h	(working copy)
@@ -204,19 +204,19 @@
  {return FaceElement::zeta_nodal(n,k,i);}     
 
  /// \short Output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
  {FiniteElement::output(outfile);}
  
  /// \short Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {FiniteElement::output(outfile,n_plot);}
  
  /// \short C_style output function
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
  {FiniteElement::output(file_pt);}
  
  /// \short C-style output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {FiniteElement::output(file_pt,n_plot);}
  
  
Index: src/time_harmonic_linear_elasticity/Ttime_harmonic_linear_elasticity_elements.h
===================================================================
--- src/time_harmonic_linear_elasticity/Ttime_harmonic_linear_elasticity_elements.h	(revision 258)
+++ src/time_harmonic_linear_elasticity/Ttime_harmonic_linear_elasticity_elements.h	(working copy)
@@ -88,26 +88,26 @@
   }
  
  /// \short Output function:  
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
  {
   TimeHarmonicLinearElasticityEquations<DIM>::output(outfile);
   }
 
  ///  \short Output function:  
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    TimeHarmonicLinearElasticityEquations<DIM>::output(outfile,nplot);
   }
 
 
  /// \short C-style output function:  
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    TimeHarmonicLinearElasticityEquations<DIM>::output(file_pt);
   }
 
  ///  \short C-style output function:  
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    TimeHarmonicLinearElasticityEquations<DIM>::output(file_pt,n_plot);
   }
Index: src/axisym_navier_stokes/refineable_axisym_navier_stokes_elements.h
===================================================================
--- src/axisym_navier_stokes/refineable_axisym_navier_stokes_elements.h	(revision 258)
+++ src/axisym_navier_stokes/refineable_axisym_navier_stokes_elements.h	(working copy)
@@ -174,7 +174,7 @@
  void dinterpolated_u_axi_nst_ddata(const Vector<double> &s,
                                 const unsigned &i,
                                 Vector<double> &du_ddata,
-                                Vector<unsigned> &global_eqn_number)
+                                Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    unsigned n_node = this->nnode();
Index: src/axisym_navier_stokes/axisym_navier_stokes_elements.cc
===================================================================
--- src/axisym_navier_stokes/axisym_navier_stokes_elements.cc	(revision 258)
+++ src/axisym_navier_stokes/axisym_navier_stokes_elements.cc	(working copy)
@@ -162,7 +162,7 @@
 compute_error(std::ostream &outfile,
               FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
               const double& time,
-              double& error, double& norm)
+              double& error, double& norm) const
 {
  error=0.0;
  norm=0.0;
@@ -230,7 +230,7 @@
 void AxisymmetricNavierStokesEquations::
 compute_error(std::ostream &outfile,
               FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-              double& error, double& norm)
+              double& error, double& norm) const
 {
  error=0.0;
  norm=0.0;
@@ -299,7 +299,7 @@
 void AxisymmetricNavierStokesEquations::
 output_fct(std::ostream &outfile, 
            const unsigned &nplot, 
-           FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+           FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -359,7 +359,7 @@
 output_fct(std::ostream &outfile,
            const unsigned &nplot, 
            const double& time,
-           FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+           FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -419,7 +419,7 @@
 void AxisymmetricNavierStokesEquations::
 output_veloc(std::ostream &outfile, 
              const unsigned &nplot, 
-             const unsigned &t) 
+             const unsigned &t) const
 {
  //Find number of nodes
  unsigned n_node = nnode();
@@ -488,7 +488,7 @@
 /// coordinate direction.
 //==============================================================
 void AxisymmetricNavierStokesEquations::output(std::ostream &outfile, 
-                                               const unsigned &nplot)
+                                               const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
@@ -530,7 +530,7 @@
 /// coordinate direction.
 //==============================================================
 void AxisymmetricNavierStokesEquations::output(FILE* file_pt,
-                                               const unsigned &nplot)
+                                               const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
Index: src/axisym_navier_stokes/axisym_navier_stokes_elements.h
===================================================================
--- src/axisym_navier_stokes/axisym_navier_stokes_elements.h	(revision 258)
+++ src/axisym_navier_stokes/axisym_navier_stokes_elements.h	(working copy)
@@ -649,7 +649,7 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -657,12 +657,12 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned nplot=5;
    output(file_pt,nplot);
@@ -670,21 +670,21 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(FILE* file_pt, const unsigned &nplot);
+ void output(FILE* file_pt, const unsigned &nplot) const;
 
  /// \short Output function: x,y,[z],u,v,[w] in tecplot format.
  /// nplot points in each coordinate direction at timestep t
  /// (t=0: present; t>0: previous timestep)
  void output_veloc(std::ostream &outfile, 
                    const unsigned &nplot, 
-                   const unsigned& t);
+                   const unsigned& t) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given number of plot points. Function prints as
  /// many components as are returned in solution Vector
  void output_fct(std::ostream &outfile, 
                  const unsigned &nplot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given time and at a given number of plot points.
@@ -692,7 +692,7 @@
  void output_fct(std::ostream &outfile, 
                  const unsigned &nplot, 
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Validate against exact solution at given time
  /// Solution is provided via function pointer.
@@ -701,7 +701,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
  /// \short Validate against exact solution.
  /// Solution is provided via function pointer.
@@ -710,7 +710,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
                     double& error, 
-                    double& norm);
+                    double& norm) const;
 
  /// Compute the element's residual Vector
  void fill_in_contribution_to_residuals(Vector<double> &residuals)
@@ -876,7 +876,7 @@
   const Vector<double> &s,
   const unsigned &i,
   Vector<double> &du_ddata,
-  Vector<unsigned> &global_eqn_number)
+  Vector<unsigned> &global_eqn_number) const
  {
   //Find number of nodes
   unsigned n_node = nnode();
@@ -1240,25 +1240,25 @@
   {return internal_local_eqn(P_axi_nst_internal_index,n);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {AxisymmetricNavierStokesEquations::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {AxisymmetricNavierStokesEquations::output(outfile,n_plot);}
 
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) 
+ void output(FILE* file_pt) const
   {AxisymmetricNavierStokesEquations::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {AxisymmetricNavierStokesEquations::output(file_pt,n_plot);}
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 4;
   }
@@ -1515,24 +1515,24 @@
   {return nodal_local_eqn(Pconv[n],p_nodal_index_axi_nst());}
  
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {AxisymmetricNavierStokesEquations::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {AxisymmetricNavierStokesEquations::output(outfile,n_plot);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) 
+ void output(FILE* file_pt) const
   {AxisymmetricNavierStokesEquations::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {AxisymmetricNavierStokesEquations::output(file_pt,n_plot);}
 
  /// \short Returns the number of "blocks" that degrees of freedom
  /// in this element are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 4;
   }
Index: src/axisym_navier_stokes/Taxisym_navier_stokes_elements.h
===================================================================
--- src/axisym_navier_stokes/Taxisym_navier_stokes_elements.h	(revision 258)
+++ src/axisym_navier_stokes/Taxisym_navier_stokes_elements.h	(working copy)
@@ -205,19 +205,19 @@
   std::set<std::pair<Data*,unsigned> > &paired_pressure_data);
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {AxisymmetricNavierStokesEquations::output(outfile);}
  
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {AxisymmetricNavierStokesEquations::output(outfile,nplot);}
  
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) 
+ void output(FILE* file_pt) const
   {AxisymmetricNavierStokesEquations::output(file_pt);}
  
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {AxisymmetricNavierStokesEquations::output(file_pt,n_plot);}
  
 
@@ -286,7 +286,7 @@
 
 /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 4;
   }
@@ -717,19 +717,19 @@
   std::set<std::pair<Data*,unsigned> > &paired_pressure_data);
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {AxisymmetricNavierStokesEquations::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {AxisymmetricNavierStokesEquations::output(outfile,nplot);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) 
+ void output(FILE* file_pt) const
   {AxisymmetricNavierStokesEquations::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {AxisymmetricNavierStokesEquations::output(file_pt,n_plot);}
  
  /// \short Order of recovery shape functions for Z2 error estimation:
@@ -797,7 +797,7 @@
  
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
  {
   return 4;
  }
Index: src/shell/shell_elements.cc
===================================================================
--- src/shell/shell_elements.cc	(revision 258)
+++ src/shell/shell_elements.cc	(working copy)
@@ -70,7 +70,7 @@
 /// Get normal to the shell
 //=====================================================================
 void KirchhoffLoveShellEquations::get_normal(const Vector<double>& s, 
-                                             Vector<double>& N)
+                                             Vector<double>& N) const
 {
 
  //Set the dimension of the coordinates
@@ -148,7 +148,7 @@
 /// Get strain and bending tensors
 //=====================================================================
  std::pair<double,double> KirchhoffLoveShellEquations::get_strain_and_bend(
-  const Vector<double>& s, DenseDoubleMatrix& strain, DenseDoubleMatrix& bend)
+  const Vector<double>& s, DenseDoubleMatrix& strain, DenseDoubleMatrix& bend) const
  {
   //Set the dimension of the coordinates
   const unsigned n_dim = 3;
@@ -734,7 +734,7 @@
 /// Compute the potential (strain) and kinetic energy of the 
 /// element. 
 //=======================================================================
-void KirchhoffLoveShellEquations::get_energy(double& pot_en, double& kin_en)
+void KirchhoffLoveShellEquations::get_energy(double& pot_en, double& kin_en) const
 {
  // Initialise
  pot_en=0.0;
@@ -1186,7 +1186,7 @@
 //===================================================================
 /// The output function
 //===================================================================
-void HermiteShellElement::output(std::ostream &outfile, const unsigned &n_plot)
+void HermiteShellElement::output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -1216,7 +1216,7 @@
 //===================================================================
 /// The output function
 //===================================================================
-void HermiteShellElement::output(FILE* file_pt, const unsigned &n_plot)
+void HermiteShellElement::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -1611,7 +1611,7 @@
 /// Output function
 //===========================================================================
 void ClampedHermiteShellBoundaryConditionElement::
- output(std::ostream &outfile, const unsigned &n_plot)
+ output(std::ostream &outfile, const unsigned &n_plot) const
 {
  
  // Get bulk element 
Index: src/shell/shell_elements.h
===================================================================
--- src/shell/shell_elements.h	(revision 258)
+++ src/shell/shell_elements.h	(working copy)
@@ -84,7 +84,7 @@
 
  /// Invert a DIM by DIM matrix
  inline double calculate_contravariant
-  (double A[2][2], double Aup[2][2]);
+  (double A[2][2], double Aup[2][2]) const;
 
  /// Default load function (zero traction)
  static void Zero_traction_fct(const Vector<double> &xi,
@@ -198,7 +198,7 @@
  /// \short Return (i,j)-th component of second Piola Kirchhoff membrane 
  /// prestress
  double prestress(const unsigned& i,
-                  const unsigned& j)
+                  const unsigned& j) const
   {
    return *Prestress_pt(i,j);
   }
@@ -232,7 +232,7 @@
  GeomObject*& undeformed_midplane_pt() {return Undeformed_midplane_pt;}
  
  /// \short Get normal vector
- void get_normal(const Vector<double>& s, Vector<double>& N);
+ void get_normal(const Vector<double>& s, Vector<double>& N) const;
 
  ///Overload the standard fill in residuals contribution
  void fill_in_contribution_to_residuals(Vector<double> &residuals)
@@ -246,7 +246,7 @@
                                    DenseMatrix<double> &jacobian);
 
  /// \short Get potential (strain) and kinetic energy of the element
- void get_energy(double& pot_en, double& kin_en);
+ void get_energy(double& pot_en, double& kin_en) const;
 
  
  /// \short Get strain and bending tensors; returns pair comprising the
@@ -254,7 +254,7 @@
  /// midplane metric tensor.
  std::pair<double,double> get_strain_and_bend(const Vector<double>& s, 
                                               DenseDoubleMatrix& strain, 
-                                              DenseDoubleMatrix& bend);
+                                              DenseDoubleMatrix& bend) const;
  
 
  /// \short Get integral of instantaneous rate of work done on 
@@ -269,17 +269,17 @@
  double load_rate_of_work();
 
  /// Generic FiniteElement output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Generic FiniteElement output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
  /// Generic FiniteElement output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// Generic FiniteElement output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 }; 
@@ -290,7 +290,7 @@
 /// Matrix inversion for 2 dimensions
 //================================================================== 
 double KirchhoffLoveShellEquations::calculate_contravariant
-(double A[2][2], double Aup[2][2])
+(double A[2][2], double Aup[2][2]) const
 {
  //Calculate determinant
  double det = A[0][0]*A[1][1] - A[0][1]*A[1][0];
@@ -330,16 +330,16 @@
   }
  
  /// Overload the output function
- void output(std::ostream &outfile) {SolidQHermiteElement<2>::output(outfile);}
+ void output(std::ostream &outfile) const {SolidQHermiteElement<2>::output(outfile);}
 
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// Overload the output function
- void output(FILE* file_pt) {SolidQHermiteElement<2>::output(file_pt);}
+ void output(FILE* file_pt) const {SolidQHermiteElement<2>::output(file_pt);}
 
  /// Output function
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 };
 
@@ -555,7 +555,7 @@
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Just the solid degrees of freedom themselves.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
@@ -714,24 +714,24 @@
 
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// \short C-style output function -- forward to broken version in 
  /// FiniteElement until somebody decides what exactly they want to plot 
  /// here...
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Just the solid degrees of freedom themselves.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
Index: src/solid/solid_traction_elements.h
===================================================================
--- src/solid/solid_traction_elements.h	(revision 258)
+++ src/solid/solid_traction_elements.h	(working copy)
@@ -187,7 +187,7 @@
    }
 
  /// \short Output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned n_plot=5;
    output(outfile,n_plot);
@@ -195,7 +195,7 @@
  
 
  /// \short Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {
   unsigned n_dim = this->nodal_dimension();
   
@@ -251,11 +251,11 @@
  }
  
  /// \short C_style output function
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
  {FiniteElement::output(file_pt);}
 
  /// \short C-style output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
@@ -881,7 +881,7 @@
 
  /// \short Output function: Note we can only output the traction
  /// at Gauss points so n_plot is actually ignored.
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    //Tecplot header info 
    outfile << "ZONE" << std::endl;
@@ -962,7 +962,7 @@
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Just the solid degrees of freedom themselves.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
@@ -1416,7 +1416,7 @@
 
  
  /// \short Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    // Elemental dimension
    unsigned dim_el=dim();
@@ -1521,7 +1521,7 @@
 
 
  /// \short Output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned n_plot=5;
    output(outfile,n_plot);
@@ -1755,7 +1755,7 @@
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Just the solid degrees of freedom themselves.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return this->dim()+1;
   };
@@ -2512,7 +2512,7 @@
 
  
  /// \short Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    // Elemental dimension
    unsigned dim_el=dim();
@@ -2604,7 +2604,7 @@
 
 
  /// \short Output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned n_plot=5;
    output(outfile,n_plot);
@@ -2825,7 +2825,7 @@
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Just the solid degrees of freedom themselves.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return this->dim()+1;
   };
Index: src/solid/solid_elements.cc
===================================================================
--- src/solid/solid_elements.cc	(revision 258)
+++ src/solid/solid_elements.cc	(working copy)
@@ -555,7 +555,7 @@
 /// Output: x,y,[z],xi0,xi1,[xi2],gamma
 //=======================================================================
 template <unsigned DIM>
-void PVDEquations<DIM>::output(std::ostream &outfile, const unsigned &n_plot)
+void PVDEquations<DIM>::output(std::ostream &outfile, const unsigned &n_plot) const
 {
  
  Vector<double> x(DIM);
@@ -608,7 +608,7 @@
 /// C-style output: x,y,[z],xi0,xi1,[xi2],gamma
 //=======================================================================
 template <unsigned DIM>
-void PVDEquations<DIM>::output(FILE* file_pt, const unsigned &n_plot)
+void PVDEquations<DIM>::output(FILE* file_pt, const unsigned &n_plot) const
   {
    //Set output Vector
    Vector<double> s(DIM);
@@ -731,7 +731,7 @@
 //=======================================================================
 template <unsigned DIM>
 void PVDEquations<DIM>::extended_output(std::ostream &outfile, 
-                                        const unsigned &n_plot)
+                                        const unsigned &n_plot) const
 {
  
  Vector<double> x(DIM);
@@ -805,7 +805,7 @@
 /// Get potential (strain) and kinetic energy
 //=======================================================================
 template <unsigned DIM>
-void PVDEquationsBase<DIM>::get_energy(double &pot_en, double &kin_en)
+void PVDEquationsBase<DIM>::get_energy(double &pot_en, double &kin_en) const
 {
  // Initialise
  pot_en=0;
@@ -925,7 +925,7 @@
 //=======================================================================
 template <unsigned DIM>
 void PVDEquations<DIM>::get_stress(const Vector<double> &s, 
-                                   DenseMatrix<double> &sigma)
+                                   DenseMatrix<double> &sigma) const
 {
  //Find out how many nodes there are
  unsigned n_node = this->nnode();
@@ -1038,7 +1038,7 @@
 template <unsigned DIM>
 void PVDEquationsBase<DIM>::get_principal_stress(
  const Vector<double> &s, DenseMatrix<double>& principal_stress_vector,
- Vector<double>& principal_stress)
+ Vector<double>& principal_stress) const
 {
  // Compute contravariant ("upper") 2nd Piola Kirchhoff stress 
  DenseDoubleMatrix sigma(DIM,DIM);
@@ -1160,7 +1160,7 @@
 //=======================================================================
 template <unsigned DIM>
 void PVDEquationsBase<DIM>::get_deformed_covariant_basis_vectors(
- const Vector<double> &s, DenseMatrix<double>& def_covariant_basis)
+ const Vector<double> &s, DenseMatrix<double>& def_covariant_basis) const
 {
 
  //Find out how many nodes there are
@@ -1885,7 +1885,7 @@
 //=======================================================================
 template <unsigned DIM>
 void PVDEquationsWithPressure<DIM>::output(std::ostream &outfile, 
-                                           const unsigned &n_plot)
+                                           const unsigned &n_plot) const
 {
  //Set output Vector
  Vector<double> s(DIM);
@@ -2032,7 +2032,7 @@
 //=======================================================================
 template <unsigned DIM>
 void PVDEquationsWithPressure<DIM>::output(FILE* file_pt,
-                                           const unsigned &n_plot)
+                                           const unsigned &n_plot) const
 {
  //Set output Vector
  Vector<double> s(DIM);
@@ -2232,7 +2232,7 @@
 //=======================================================================
 template <unsigned DIM>
 void PVDEquationsWithPressure<DIM>::get_stress(const Vector<double> &s, 
-                                               DenseMatrix<double> &sigma)
+                                               DenseMatrix<double> &sigma) const
 {
  //Find out how many nodes there are
  unsigned n_node = this->nnode();
Index: src/solid/solid_elements.h
===================================================================
--- src/solid/solid_elements.h	(revision 258)
+++ src/solid/solid_elements.h	(working copy)
@@ -142,7 +142,7 @@
 
    /// \short Return the local degree of freedom associated with the
    /// i-th solid pressure. Default is that there are none.
-   virtual int solid_p_local_eqn(const unsigned &i) {return -1;}
+   virtual int solid_p_local_eqn(const unsigned &i) const {return -1;}
    
    /// \short Return the index at which the solid pressure is stored if it
    /// is stored at the nodes. If not stored at the nodes this will return
@@ -197,20 +197,20 @@
    /// (needed by \c get_principal_stress(...), so I'm afraid I will
    /// have to insist that you implement it...
    virtual void get_stress(const Vector<double> &s, 
-                           DenseMatrix<double> &sigma)=0;
+                           DenseMatrix<double> &sigma) const=0;
    
    /// \short Return the strain tensor
    void get_strain(const Vector<double> &s, DenseMatrix<double> &strain) const;
    
    /// Get potential (strain) and kinetic energy
-   void get_energy(double &pot_en, double &kin_en);
+   void get_energy(double &pot_en, double &kin_en) const;
 
    /// \short Return the deformed covariant basis vectors
    /// at specified local coordinate: \c def_covariant_basis(i,j)
    /// is the j-th component of the i-th basis vector.
    void get_deformed_covariant_basis_vectors(const Vector<double> &s,
                                              DenseMatrix<double>& 
-                                             def_covariant_basis); 
+                                             def_covariant_basis) const;
    
    
    /// \short Compute principal stress vectors and (scalar) principal stresses
@@ -218,7 +218,7 @@
    /// is the j-th component of the i-th principal stress vector.
    void get_principal_stress(const Vector<double> &s,
                              DenseMatrix<double>& principal_stress_vector,
-                             Vector<double>& principal_stress);
+                             Vector<double>& principal_stress) const;
    
    
    /// \short Evaluate isotropic growth function at Lagrangian coordinate xi
@@ -275,7 +275,7 @@
 
 
    /// \short returns the number of DOF types associated with this element. 
-   unsigned ndof_types()
+   unsigned ndof_types() const
     {
      return DIM;
     }
@@ -291,7 +291,7 @@
    /// 1 - y displacement\n
    /// 2 - z displacement\n
    void get_dof_numbers_for_unknowns(
-    std::list<std::pair<unsigned long,unsigned> >& block_lookup_list)
+    std::list<std::pair<unsigned long,unsigned> >& block_lookup_list) const
     {
      // temporary pair (used to store block lookup prior to being added to list
      std::pair<unsigned,unsigned> block_lookup;
@@ -349,7 +349,7 @@
    /// prestress at Lagrangian coordinate xi
    double prestress(const unsigned& i,
                     const unsigned& j,
-                    const Vector<double> xi)
+                    const Vector<double> xi) const
    {
     if (Prestress_fct_pt==0)
      {
@@ -405,7 +405,7 @@
    
    /// \short Return the 2nd Piola Kirchoff stress tensor, as calculated
    /// from the constitutive law at specified local coordinate
-   void get_stress(const Vector<double> &s, DenseMatrix<double> &sigma);
+   void get_stress(const Vector<double> &s, DenseMatrix<double> &sigma) const;
 
    /// \short Fill in the residuals for the solid equations (the discretised
    /// principle of virtual displacements)
@@ -465,30 +465,30 @@
    
 
    /// Output: x,y,[z],xi0,xi1,[xi2],gamma
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
     {
      unsigned n_plot=5;
      output(outfile,n_plot);
     }
    
    /// Output: x,y,[z],xi0,xi1,[xi2],gamma
-   void output(std::ostream &outfile, const unsigned &n_plot);
+   void output(std::ostream &outfile, const unsigned &n_plot) const;
    
    
    /// C-style output: x,y,[z],xi0,xi1,[xi2],gamma
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
     {
      unsigned n_plot=5;
      output(file_pt,n_plot);
     }
    
    /// Output: x,y,[z],xi0,xi1,[xi2],gamma
-   void output(FILE* file_pt, const unsigned &n_plot);
+   void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
    /// \short Output: x,y,[z],xi0,xi1,[xi2],gamma and the strain and stress
    /// components
-   void extended_output(std::ostream &outfile, const unsigned &n_plot);
+   void extended_output(std::ostream &outfile, const unsigned &n_plot) const;
    
 
     protected:
@@ -504,7 +504,7 @@
    /// stress free and current configurations.
    inline void get_stress(const DenseMatrix<double> &g, 
                           const DenseMatrix<double> &G,
-                          DenseMatrix<double> &sigma)
+                          DenseMatrix<double> &sigma) const
     {
 #ifdef PARANOID
      //If the pointer to the constitutive law hasn't been set, issue an error
@@ -579,18 +579,18 @@
    QPVDElement() : SolidQElement<DIM,NNODE_1D>(), PVDEquations<DIM>() { }
    
    /// Output function
-   void output(std::ostream &outfile) {PVDEquations<DIM>::output(outfile);}
+   void output(std::ostream &outfile) const {PVDEquations<DIM>::output(outfile);}
    
    /// Output function
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
     {PVDEquations<DIM>::output(outfile,n_plot);}
    
    
    /// C-style output function
-   void output(FILE* file_pt) {PVDEquations<DIM>::output(file_pt);}
+   void output(FILE* file_pt) const {PVDEquations<DIM>::output(file_pt);}
    
    /// C-style output function
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
     {PVDEquations<DIM>::output(file_pt,n_plot);}
   
   };
@@ -663,18 +663,18 @@
     PVDEquations<DIM>() { }
    
    /// SolidQHermiteElement output function
-   void output(std::ostream &outfile)
+   void output(std::ostream &outfile) const
     {SolidQHermiteElement<DIM>::output(outfile);}
    
    /// SolidQHermiteElement output function
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
     {SolidQHermiteElement<DIM>::output(outfile,n_plot);}
    
    /// C-style SolidQHermiteElement output function
-   void output(FILE* file_pt) {SolidQHermiteElement<DIM>::output(file_pt);}
+   void output(FILE* file_pt) const {SolidQHermiteElement<DIM>::output(file_pt);}
    
    /// C-style SolidQHermiteElement output function
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
     {SolidQHermiteElement<DIM>::output(file_pt,n_plot);}
    
   };
@@ -828,7 +828,7 @@
    
    /// \short Return the 2nd Piola Kirchoff stress tensor, as calculated
    /// from the constitutive law at specified local coordinate
-   void get_stress(const Vector<double> &s, DenseMatrix<double> &sigma);
+   void get_stress(const Vector<double> &s, DenseMatrix<double> &sigma) const;
    
    /// Return whether the material is incompressible
    bool is_incompressible() const {return Incompressible;}
@@ -840,7 +840,7 @@
    void set_compressible() {Incompressible=false;}
    
    /// Return the lth solid pressure
-   virtual double solid_p(const unsigned &l)=0;
+   virtual double solid_p(const unsigned &l) const=0;
    
    /// Set the lth solid pressure to p_value
    virtual void set_solid_p(const unsigned &l, const double &p_value)=0;
@@ -964,7 +964,7 @@
    
    
    /// Return the interpolated_solid_pressure 
-   double interpolated_solid_p(const Vector<double> &s) 
+   double interpolated_solid_p(const Vector<double> &s) const
     {
      //Find number of nodes
      unsigned n_solid_pres = this->npres_solid();
@@ -984,25 +984,25 @@
    
 
    /// Output: x,y,[z],xi0,xi1,[xi2],p,gamma
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
     {
      unsigned n_plot=5;
      output(outfile,n_plot);
     }
    
    /// Output: x,y,[z],xi0,xi1,[xi2],p,gamma
-   void output(std::ostream &outfile, const unsigned &n_plot);
+   void output(std::ostream &outfile, const unsigned &n_plot) const;
    
    
    /// C-style output: x,y,[z],xi0,xi1,[xi2],p,gamma
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
     {
      unsigned n_plot=5;
      output(file_pt,n_plot);
     }
    
    /// C-style output: x,y,[z],xi0,xi1,[xi2],p,gamma
-   void output(FILE* file_pt, const unsigned &n_plot);
+   void output(FILE* file_pt, const unsigned &n_plot) const;
    
    /// \short Compute the diagonal of the displacement mass matrix for
    /// LSC preconditioner
@@ -1010,7 +1010,7 @@
    
    /// \short returns the number of DOF types associated with this element:
    /// 2: displacements and pressure // hierher
-   unsigned ndof_types()
+   unsigned ndof_types() const
    {
     return DIM+1; // hierher
     }
@@ -1100,7 +1100,7 @@
                           const DenseMatrix<double> &G, 
                           DenseMatrix<double> &sigma_dev, 
                           DenseMatrix<double> &Gcontra, 
-                          double &gen_dil, double &inv_kappa) 
+                          double &gen_dil, double &inv_kappa) const
     {
 #ifdef PARANOID
      //If the pointer to the constitutive law hasn't been set, issue an error
@@ -1206,7 +1206,7 @@
                           const DenseMatrix<double> &G,
                           DenseMatrix<double> &sigma_dev, 
                           DenseMatrix<double> &Gcontra, 
-                          double &detG)
+                          double &detG) const
     {
 #ifdef PARANOID
      //If the pointer to the constitutive law hasn't been set, issue an error
@@ -1304,7 +1304,7 @@
  /// \short Overload the access function 
  /// that is used to return local equation correpsonding to the i-th
  /// solid pressure value
- inline int solid_p_local_eqn(const unsigned &i)
+ inline int solid_p_local_eqn(const unsigned &i) const
   {return this->internal_local_eqn(P_solid_internal_index,i);}
  
  /// Return the pressure shape functions
@@ -1326,7 +1326,7 @@
  }
  
  /// Return the lth pressure value
- double solid_p(const unsigned &l) 
+ double solid_p(const unsigned &l) const
   {return this->internal_data_pt(P_solid_internal_index)->value(l);}
  
  /// Set the l-th pressure value to p_value
@@ -1344,18 +1344,18 @@
   }
 
  /// Generic FiniteElement output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// PVDEquationsWithPressure output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {PVDEquationsWithPressure<DIM>::output(outfile,n_plot);}
 
  
  /// C-style Generic FiniteElement output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// C-style PVDEquationsWithPressure output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {PVDEquationsWithPressure<DIM>::output(file_pt,n_plot);}
 
 };
@@ -1458,7 +1458,7 @@
  /// \short Overload the access function 
  /// that is used to return local equation correpsonding to the i-th
  /// solid pressure value
- inline int solid_p_local_eqn(const unsigned &i)
+ inline int solid_p_local_eqn(const unsigned &i) const
   {return this->nodal_local_eqn(Pconv[i],this->solid_p_nodal_index());}
 
  /// Return the pressure shape functions
@@ -1481,7 +1481,7 @@
 
  /// Return the l-th pressure value, make sure to use the hanging
  /// representation if there is one!
- double solid_p(const unsigned &l) 
+ double solid_p(const unsigned &l) const
   {return this->nodal_value(Pconv[l],this->solid_p_nodal_index());}
 
  /// Set the l-th solid pressure value to p_value
@@ -1500,18 +1500,18 @@
   }
 
  /// Generic FiniteElement output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// PVDEquationsWithPressure output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {PVDEquationsWithPressure<DIM>::output(outfile,n_plot);}
 
 
  /// C-style generic FiniteElement output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// C-style PVDEquationsWithPressure output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {PVDEquationsWithPressure<DIM>::output(file_pt,n_plot);}
 
 };
@@ -1656,18 +1656,18 @@
   TPVDElement() : SolidTElement<DIM,NNODE_1D>(), PVDEquations<DIM>() { }
  
  /// Output function
- void output(std::ostream &outfile) {PVDEquations<DIM>::output(outfile);}
+ void output(std::ostream &outfile) const {PVDEquations<DIM>::output(outfile);}
  
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {PVDEquations<DIM>::output(outfile,n_plot);}
  
  
  /// C-style output function
- void output(FILE* file_pt) {PVDEquations<DIM>::output(file_pt);}
+ void output(FILE* file_pt) const {PVDEquations<DIM>::output(file_pt);}
  
  /// C-style output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {PVDEquations<DIM>::output(file_pt,n_plot);}
 
  /// \short Order of recovery shape functions for Z2 error estimation:
@@ -1812,18 +1812,18 @@
    SolidTBubbleEnrichedElement<DIM,NNODE_1D>(), PVDEquations<DIM>() { }
  
  /// Output function
- void output(std::ostream &outfile) {PVDEquations<DIM>::output(outfile);}
+ void output(std::ostream &outfile) const {PVDEquations<DIM>::output(outfile);}
  
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {PVDEquations<DIM>::output(outfile,n_plot);}
  
  
  /// C-style output function
- void output(FILE* file_pt) {PVDEquations<DIM>::output(file_pt);}
+ void output(FILE* file_pt) const {PVDEquations<DIM>::output(file_pt);}
  
  /// C-style output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {PVDEquations<DIM>::output(file_pt,n_plot);}
 
 
@@ -1983,7 +1983,7 @@
  /// \short Overload the access function 
  /// that is used to return local equation correpsonding to the i-th
  /// solid pressure value
- inline int solid_p_local_eqn(const unsigned &i)
+ inline int solid_p_local_eqn(const unsigned &i) const
   {return this->nodal_local_eqn(Pconv[i],this->solid_p_nodal_index());}
  
  /// Pressure shape functions at local coordinate s
@@ -2020,7 +2020,7 @@
 
  /// Return the l-th pressure value, make sure to use the hanging
  /// representation if there is one!
- double solid_p(const unsigned &l) 
+ double solid_p(const unsigned &l) const
   {return this->nodal_value(Pconv[l],this->solid_p_nodal_index());}
 
  /// Set the l-th solid pressure value to p_value
@@ -2038,18 +2038,18 @@
   }
 
  /// Generic FiniteElement output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// PVDEquationsWithPressure output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {PVDEquationsWithPressure<DIM>::output(outfile,n_plot);}
 
 
  /// C-style generic FiniteElement output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// C-style PVDEquationsWithPressure output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {PVDEquationsWithPressure<DIM>::output(file_pt,n_plot);}
  
  /// \short Order of recovery shape functions for Z2 error estimation:
Index: src/biharmonic/biharmonic_problem.h
===================================================================
--- src/biharmonic/biharmonic_problem.h	(revision 258)
+++ src/biharmonic/biharmonic_problem.h	(working copy)
@@ -338,29 +338,29 @@
   }
  
  /// Output function -- does nothing
- void output(std::ostream &outfile) {}
+ void output(std::ostream &outfile) const {}
  
  
  /// \short Output function -- does nothing
- void output(std::ostream &outfile, const unsigned &n_plot) {}
+ void output(std::ostream &outfile, const unsigned &n_plot) const {}
 
  
   /// \short Output function -- does nothing
- void output_fluid_velocity(std::ostream &outfile, const unsigned &n_plot) {}
+ void output_fluid_velocity(std::ostream &outfile, const unsigned &n_plot) const {}
 
 
  /// C-style output function -- does nothing
- void output(FILE* file_pt) {}
+ void output(FILE* file_pt) const {}
  
  
  /// \short C-style output function -- does nothing
- void output(FILE* file_pt, const unsigned &n_plot) {}
+ void output(FILE* file_pt, const unsigned &n_plot) const {}
  
  
  /// compute_error -- does nothing
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm) {}
+                    exact_soln_pt, double& error, double& norm) const {}
 
 
  /// \short Compute the elemental residual vector - wrapper function called by
Index: src/biharmonic/biharmonic_flux_elements.h
===================================================================
--- src/biharmonic/biharmonic_flux_elements.h	(revision 258)
+++ src/biharmonic/biharmonic_flux_elements.h	(working copy)
@@ -163,29 +163,29 @@
 
 
  /// Output function -- does nothing
- void output(std::ostream &outfile) {}
+ void output(std::ostream &outfile) const {}
 
 
  /// \short Output function -- does nothing
- void output(std::ostream &outfile, const unsigned &n_plot) {}
+ void output(std::ostream &outfile, const unsigned &n_plot) const {}
  
 
  /// C-style output function -- does nothing
- void output(FILE* file_pt) {}
+ void output(FILE* file_pt) const {}
  
 
  /// \short C-style output function -- does nothing
- void output(FILE* file_pt, const unsigned &n_plot) {}
+ void output(FILE* file_pt, const unsigned &n_plot) const {}
 
 
  /// compute_error -- does nothing
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm) {}
+                    exact_soln_pt, double& error, double& norm) const {}
  
 
  virtual void output_fct(std::ostream &outfile,const unsigned &nplot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {}
   
 private:
Index: src/biharmonic/biharmonic_elements.h
===================================================================
--- src/biharmonic/biharmonic_elements.h	(revision 258)
+++ src/biharmonic/biharmonic_elements.h	(working copy)
@@ -110,7 +110,7 @@
  
  
  /// output with nplot points
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   { 
 
  //Vector of local coordinates
@@ -141,20 +141,20 @@
  
 
  /// Output at default number of plot points
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {FiniteElement::output(outfile);}
  
  /// C-style output 
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
  /// output fluid velocity field
- void output_fluid_velocity(std::ostream &outfile, const unsigned &nplot)
+ void output_fluid_velocity(std::ostream &outfile, const unsigned &nplot) const
   { 
 
  //Vector of local coordinates
@@ -189,7 +189,7 @@
 
 
  /// output with nplot points
- void interpolated_dudx(const Vector<double>& s, Vector<double>& dudx)
+ void interpolated_dudx(const Vector<double>& s, Vector<double>& dudx) const
   { 
    
    //Find out how many nodes there are
@@ -228,7 +228,7 @@
 
  /// output analytic solution
  void output_fct(std::ostream &outfile,const unsigned &nplot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   { 
 
    //Vector of local coordinates
@@ -277,14 +277,14 @@
  /// Implement broken FiniteElement base class version
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {FiniteElement::output_fct(outfile,nplot,time,exact_soln_pt);}
  
  
  /// computes the error 
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm)
+                    exact_soln_pt, double& error, double& norm) const
   {
 
   // Initialise
@@ -366,11 +366,11 @@
  /// Call broken base-class version.
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {FiniteElement::compute_error(outfile,exact_soln_pt,time,error,norm);}
  
  /// calculates interpolated u at s
- double interpolated_u_biharmonic(const Vector<double>& s)
+ double interpolated_u_biharmonic(const Vector<double>& s) const
   {
    // initialise storage for u_interpolated
    double uu=0;
@@ -425,7 +425,7 @@
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into (for block preconditioning)
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return this->required_nvalue(1);
   }
@@ -557,40 +557,40 @@
  
 
  /// Output
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {BiharmonicEquations<DIM>::output(outfile);}
  
  /// output wrapper
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {BiharmonicEquations<DIM>::output(outfile, n_plot);}	
  
  /// C-style output 
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {BiharmonicEquations<DIM>::output(file_pt);}
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {BiharmonicEquations<DIM>::output(file_pt,n_plot);}
 
  
  
  /// analytic solution wrapper
  void output_fct(std::ostream &outfile,const unsigned &nplot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {BiharmonicEquations<DIM>::output_fct(outfile, nplot, exact_soln_pt);}
  
 
 /// Final override
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {BiharmonicEquations<DIM>::output_fct(outfile,nplot,time,exact_soln_pt);}
 
  
  /// computes error
  void compute_error(std::ostream &outfile,  
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm)
+                    exact_soln_pt, double& error, double& norm) const
   {BiharmonicEquations<DIM>::compute_error(outfile, exact_soln_pt, error, 
                                            norm);}
 
Index: src/navier_stokes/Tnavier_stokes_elements.h
===================================================================
--- src/navier_stokes/Tnavier_stokes_elements.h	(revision 258)
+++ src/navier_stokes/Tnavier_stokes_elements.h	(working copy)
@@ -201,18 +201,18 @@
   std::set<std::pair<Data*,unsigned> > &paired_pressure_data);
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {NavierStokesEquations<DIM>::output(outfile);}
  
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::output(outfile,nplot);}
  
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) {NavierStokesEquations<DIM>::output(file_pt);}
+ void output(FILE* file_pt) const {NavierStokesEquations<DIM>::output(file_pt);}
  
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {NavierStokesEquations<DIM>::output(file_pt,n_plot);}
  
 
@@ -283,18 +283,18 @@
  /// \short Full output function:
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. Default number of plot points
- void full_output(std::ostream &outfile)
+ void full_output(std::ostream &outfile) const
   {NavierStokesEquations<DIM>::full_output(outfile);}
 
  /// \short Full output function:
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. nplot points in each coordinate direction
- void full_output(std::ostream &outfile, const unsigned &nplot)
+ void full_output(std::ostream &outfile, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::full_output(outfile,nplot);}
 
 /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return DIM+1;
   }
@@ -873,18 +873,18 @@
   std::set<std::pair<Data*,unsigned> > &paired_pressure_data);
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {NavierStokesEquations<DIM>::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::output(outfile,nplot);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) {NavierStokesEquations<DIM>::output(file_pt);}
+ void output(FILE* file_pt) const {NavierStokesEquations<DIM>::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {NavierStokesEquations<DIM>::output(file_pt,n_plot);}
  
  /// \short Order of recovery shape functions for Z2 error estimation:
@@ -952,7 +952,7 @@
  
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
  {
   return DIM+1;
  }
Index: src/navier_stokes/impose_parallel_outflow_element.h
===================================================================
--- src/navier_stokes/impose_parallel_outflow_element.h	(revision 258)
+++ src/navier_stokes/impose_parallel_outflow_element.h	(working copy)
@@ -106,10 +106,10 @@
     }
 
    ///Overload the output function
-   void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+   void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
    ///Output function: x,y,[z],u,v,[w],p in tecplot format
-   void output(std::ostream &outfile, const unsigned &nplot)
+   void output(std::ostream &outfile, const unsigned &nplot) const
     {FiniteElement::output(outfile,nplot);}
    
    /// \short The "global" intrinsic coordinate of the element when
Index: src/navier_stokes/fluid_traction_elements.h
===================================================================
--- src/navier_stokes/fluid_traction_elements.h	(revision 258)
+++ src/navier_stokes/fluid_traction_elements.h	(working copy)
@@ -194,10 +194,10 @@
   }
  
  ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
-void output(std::ostream &outfile, const unsigned &nplot)
+void output(std::ostream &outfile, const unsigned &nplot) const
  {FiniteElement::output(outfile,nplot);}
 
 
Index: src/navier_stokes/refineable_navier_stokes_elements.h
===================================================================
--- src/navier_stokes/refineable_navier_stokes_elements.h	(revision 258)
+++ src/navier_stokes/refineable_navier_stokes_elements.h	(working copy)
@@ -497,7 +497,7 @@
  void dinterpolated_u_nst_ddata(const Vector<double> &s,
                                 const unsigned &i,
                                 Vector<double> &du_ddata,
-                                Vector<unsigned> &global_eqn_number)
+                                Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    unsigned n_node = this->nnode();
Index: src/navier_stokes/navier_stokes_elements.cc
===================================================================
--- src/navier_stokes/navier_stokes_elements.cc	(revision 258)
+++ src/navier_stokes/navier_stokes_elements.cc	(working copy)
@@ -280,7 +280,7 @@
 compute_error(std::ostream &outfile,
               FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
               const double& time,
-              double& error, double& norm)
+              double& error, double& norm) const
 {
  error=0.0;
  norm=0.0;
@@ -359,7 +359,7 @@
 void NavierStokesEquations<DIM>::compute_error(
  std::ostream &outfile,
  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
- double& error, double& norm)
+ double& error, double& norm) const
 {
  
  error=0.0;
@@ -437,7 +437,7 @@
 template<unsigned DIM>
 void NavierStokesEquations<DIM>::output_fct(std::ostream &outfile, 
                                    const unsigned &nplot, 
-                                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -497,7 +497,7 @@
 void NavierStokesEquations<DIM>::output_fct(std::ostream &outfile,
                                    const unsigned &nplot, 
                                    const double& time,
-                                   FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                                   FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -556,7 +556,7 @@
 template<unsigned DIM>
 void NavierStokesEquations<DIM>::output_veloc(std::ostream& outfile, 
                                               const unsigned& nplot, 
-                                              const unsigned& t)
+                                              const unsigned& t) const
 {
 
  //Find number of nodes
@@ -627,7 +627,7 @@
 //==============================================================
 template<unsigned DIM>
 void NavierStokesEquations<DIM>::output(std::ostream &outfile, 
-                                        const unsigned &nplot)
+                                        const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -677,7 +677,7 @@
 //==============================================================
 template<unsigned DIM>
 void NavierStokesEquations<DIM>::output(FILE* file_pt,
-                                        const unsigned &nplot)
+                                        const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -725,7 +725,7 @@
 //==============================================================
 template<unsigned DIM>
 void NavierStokesEquations<DIM>::full_output(std::ostream &outfile, 
-                                             const unsigned &nplot)
+                                             const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -858,7 +858,7 @@
 //==============================================================
 template<unsigned DIM>
 void NavierStokesEquations<DIM>::output_vorticity(std::ostream &outfile, 
-                                                  const unsigned &nplot) 
+                                                  const unsigned &nplot) const
 {
 
  //Vector of local coordinates
Index: src/navier_stokes/navier_stokes_flux_control_elements.h
===================================================================
--- src/navier_stokes/navier_stokes_flux_control_elements.h	(revision 258)
+++ src/navier_stokes/navier_stokes_flux_control_elements.h	(working copy)
@@ -198,7 +198,7 @@
  /// are sub-divided into - set to Ndof_number_for_unknown+1
  /// because it's expected this element is added to a fluid mesh 
  /// containing navier stokes elements
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return Dim+1;
   }
@@ -210,6 +210,14 @@
  /// containing navier stokes elements
  unsigned& ndof_number_for_unknown() {return Ndof_number_for_unknown; }
 
+
+ /// \short The id number of the "block" to which the degree
+ /// of freedom in this element is added to. This should be set to the
+ /// number id of the Navier-Stokes pressure block (which is dimension
+ /// dependent!) if this element is added to a fluid mesh
+ /// containing navier stokes elements (const version).
+ unsigned ndof_number_for_unknown() const {return Ndof_number_for_unknown; }
+
  /// \short Create a list of pairs for all unknowns in this element,
  /// so that the first entry in each pair contains the global equation
  /// number of the unknown, while the second one contains the number
Index: src/navier_stokes/navier_stokes_elements.h
===================================================================
--- src/navier_stokes/navier_stokes_elements.h	(revision 258)
+++ src/navier_stokes/navier_stokes_elements.h	(working copy)
@@ -176,10 +176,10 @@
   }
  
  ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  ///Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
  {FiniteElement::output(outfile,nplot);}
  
 };
@@ -944,7 +944,7 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -952,11 +952,11 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
  /// \short C-style output function: x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned nplot=5;
    output(file_pt,nplot);
@@ -964,12 +964,12 @@
 
  /// \short C-style output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(FILE* file_pt, const unsigned &nplot);
+ void output(FILE* file_pt, const unsigned &nplot) const;
 
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. Default number of plot points
- void full_output(std::ostream &outfile) 
+ void full_output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    full_output(outfile,nplot);
@@ -978,33 +978,33 @@
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. nplot points in each coordinate direction
- void full_output(std::ostream &outfile, const unsigned &nplot);
+ void full_output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// \short Output function: x,y,[z],u,v,[w] in tecplot format.
  /// nplot points in each coordinate direction at timestep t
  /// (t=0: present; t>0: previous timestep)
  void output_veloc(std::ostream &outfile, const unsigned &nplot, 
-                   const unsigned& t);
+                   const unsigned& t) const;
 
 
  /// \short Output function: x,y,[z], [omega_x,omega_y,[and/or omega_z]] 
  /// in tecplot format. nplot points in each coordinate direction
  void output_vorticity(std::ostream &outfile, 
-                       const unsigned &nplot);
+                       const unsigned &nplot) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given number of plot points. Function prints as
  /// many components as are returned in solution Vector
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given time and at a given number of plot points.
  /// Function prints as many components as are returned in solution Vector.
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Validate against exact solution at given time
  /// Solution is provided via function pointer.
@@ -1013,7 +1013,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
  /// \short Validate against exact solution.
  /// Solution is provided via function pointer.
@@ -1021,7 +1021,7 @@
  /// and L2 norm of velocity solution over element
  void compute_error(std::ostream &outfile,
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
  /// Compute the element's residual Vector
  void fill_in_contribution_to_residuals(Vector<double> &residuals)
@@ -1204,7 +1204,7 @@
  /// \short Output the FaceElements that apply the Robin boundary condition
  /// to the pressure advection diffusion problem required by 
  /// Fp preconditioner
- void output_pressure_advection_diffusion_robin_elements(std::ostream &outfile)
+ void output_pressure_advection_diffusion_robin_elements(std::ostream &outfile) const
  {
   unsigned nel=Pressure_advection_diffusion_robin_element_pt.size();
   for (unsigned e=0;e<nel;e++)
@@ -1343,7 +1343,7 @@
  virtual void dinterpolated_u_nst_ddata(const Vector<double> &s,
                                         const unsigned &i,
                                         Vector<double> &du_ddata,
-                                        Vector<unsigned> &global_eqn_number)
+                                        Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    unsigned n_node = nnode();
@@ -1412,7 +1412,7 @@
 
  /// \short Output solution in data vector at local cordinates s:
  /// x,y [,z], u,v,[w], p
- void point_output_data(const Vector<double> &s, Vector<double>& data)
+ void point_output_data(const Vector<double> &s, Vector<double>& data) const
  {
   // Dimension
   unsigned dim=s.size();
@@ -1575,38 +1575,38 @@
 
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {NavierStokesEquations<DIM>::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::output(outfile,nplot);}
 
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) {NavierStokesEquations<DIM>::output(file_pt);}
+ void output(FILE* file_pt) const {NavierStokesEquations<DIM>::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &nplot)
+ void output(FILE* file_pt, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::output(file_pt,nplot);}
 
 
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. Default number of plot points
- void full_output(std::ostream &outfile)
+ void full_output(std::ostream &outfile) const
   {NavierStokesEquations<DIM>::full_output(outfile);}
 
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. nplot points in each coordinate direction
- void full_output(std::ostream &outfile, const unsigned &nplot)
+ void full_output(std::ostream &outfile, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::full_output(outfile,nplot);}
 
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return DIM+1;
   }
@@ -2115,24 +2115,24 @@
 
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {NavierStokesEquations<DIM>::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::output(outfile,nplot);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) {NavierStokesEquations<DIM>::output(file_pt);}
+ void output(FILE* file_pt) const {NavierStokesEquations<DIM>::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &nplot)
+ void output(FILE* file_pt, const unsigned &nplot) const
   {NavierStokesEquations<DIM>::output(file_pt,nplot);}
 
  
  /// \short Returns the number of "blocks" that degrees of freedom
  /// in this element are sub-divided into: Velocity and pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return DIM+1;
   }
Index: src/axisym_advection_diffusion/gen_axisym_advection_diffusion_elements.cc
===================================================================
--- src/axisym_advection_diffusion/gen_axisym_advection_diffusion_elements.cc	(revision 258)
+++ src/axisym_advection_diffusion/gen_axisym_advection_diffusion_elements.cc	(working copy)
@@ -290,7 +290,7 @@
 //======================================================================
  void  GeneralisedAxisymAdvectionDiffusionEquations::output(
   std::ostream &outfile, 
-  const unsigned &nplot)
+  const unsigned &nplot) const
  { 
   //Vector of local coordinates
   Vector<double> s(2);
@@ -363,7 +363,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
 void GeneralisedAxisymAdvectionDiffusionEquations::output(FILE* file_pt,
-                                                          const unsigned &nplot)
+                                                          const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
@@ -405,7 +405,7 @@
 void GeneralisedAxisymAdvectionDiffusionEquations::output_fct(
  std::ostream &outfile, 
              const unsigned &nplot, 
-             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
 
    //Vector of local coordinates
@@ -460,7 +460,7 @@
 void GeneralisedAxisymAdvectionDiffusionEquations::compute_error(
  std::ostream &outfile, 
  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
- double& error, double& norm)
+ double& error, double& norm) const
 { 
  
  // Initialise
Index: src/axisym_advection_diffusion/gen_axisym_advection_diffusion_elements.h
===================================================================
--- src/axisym_advection_diffusion/gen_axisym_advection_diffusion_elements.h	(revision 258)
+++ src/axisym_advection_diffusion/gen_axisym_advection_diffusion_elements.h	(working copy)
@@ -156,7 +156,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -164,10 +164,10 @@
 
  /// \short Output FE representation of soln: r,z,u at 
  /// nplot^2 plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -175,20 +175,20 @@
 
  /// \short C-style output FE representation of soln: r,z,u at 
  /// n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: r,z,u_exact at nplot^2 plot points
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
  /// \short Output exact soln: r,z,,u_exact at 
  /// nplot^2 plot points (dummy time-dependent version to 
  /// keep intel compiler happy)
  virtual void output_fct(std::ostream &outfile, const unsigned &nplot,
                          const double& time, 
-  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {
    throw OomphLibError(
     "There is no time-dependent output_fct() for Advection Diffusion elements",
@@ -200,14 +200,14 @@
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm);
+                    exact_soln_pt, double& error, double& norm) const;
 
 
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {
    throw OomphLibError(
     "No time-dependent compute_error() for Advection Diffusion elements",
@@ -497,8 +497,7 @@
 
 
  /// Return FE representation of function value u(s) at local coordinate s
- inline double interpolated_u_cons_axisym_adv_diff(const Vector<double> &s) 
-  const
+ inline double interpolated_u_cons_axisym_adv_diff(const Vector<double> &s) const
   {
    //Find number of nodes
    unsigned n_node = nnode();
@@ -639,25 +638,25 @@
 
  /// \short Output function:  
  ///  r,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {GeneralisedAxisymAdvectionDiffusionEquations::output(outfile);}
 
  /// \short Output function:  
  /// r,z,u  at n_plot^2 plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {GeneralisedAxisymAdvectionDiffusionEquations::output(outfile,n_plot);}
 
 
  /// \short C-style output function:  
  ///  r,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    GeneralisedAxisymAdvectionDiffusionEquations::output(file_pt);
   }
 
  ///  \short C-style output function:  
  ///   r,z,u at n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    GeneralisedAxisymAdvectionDiffusionEquations::output(file_pt,n_plot);
   }
@@ -666,7 +665,7 @@
  ///  r,z,u_exact at n_plot^2 plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {GeneralisedAxisymAdvectionDiffusionEquations
     ::output_fct(outfile,n_plot,exact_soln_pt);}
 
Index: src/axisym_advection_diffusion/refineable_axisym_advection_diffusion_elements.h
===================================================================
--- src/axisym_advection_diffusion/refineable_axisym_advection_diffusion_elements.h	(revision 258)
+++ src/axisym_advection_diffusion/refineable_axisym_advection_diffusion_elements.h	(working copy)
@@ -203,7 +203,7 @@
  /// information
  void dinterpolated_u_adv_diff_ddata(const Vector<double> &s,
                                      Vector<double> &du_ddata,
-                                     Vector<unsigned> &global_eqn_number)
+                                     Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    unsigned n_node = this->nnode();
Index: src/axisym_advection_diffusion/axisym_advection_diffusion_elements.cc
===================================================================
--- src/axisym_advection_diffusion/axisym_advection_diffusion_elements.cc	(revision 258)
+++ src/axisym_advection_diffusion/axisym_advection_diffusion_elements.cc	(working copy)
@@ -244,7 +244,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
 void AxisymAdvectionDiffusionEquations::output(std::ostream &outfile, 
-                                                     const unsigned &nplot)
+                                                     const unsigned &nplot) const
 { 
  //Vector of local coordinates
  Vector<double> s(2);
@@ -299,7 +299,7 @@
 //======================================================================
 //template <unsigned DIM>
 void AxisymAdvectionDiffusionEquations::output(FILE* file_pt,
-                                                     const unsigned &nplot)
+                                                     const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
@@ -341,7 +341,7 @@
 void AxisymAdvectionDiffusionEquations::output_fct(
  std::ostream &outfile, 
  const unsigned &nplot, 
- FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+ FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
 
    //Vector of local coordinates
@@ -396,7 +396,7 @@
  std::ostream &outfile, 
  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
  double& error,
- double& norm)
+ double& norm) const
 { 
  
  //Initialise
Index: src/axisym_advection_diffusion/axisym_advection_diffusion_elements.h
===================================================================
--- src/axisym_advection_diffusion/axisym_advection_diffusion_elements.h	(revision 258)
+++ src/axisym_advection_diffusion/axisym_advection_diffusion_elements.h	(working copy)
@@ -135,7 +135,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot = 5;
    output(outfile,nplot);
@@ -143,11 +143,11 @@
 
  /// \short Output FE representation of soln: r,z,u  at 
  /// nplot^2 plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot = 5;
    output(file_pt,n_plot);
@@ -155,20 +155,20 @@
 
  /// \short C-style output FE representation of soln: r,z,u  at 
  /// n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: r,z,u_exact at nplot^2 plot points
  void output_fct(std::ostream &outfile, 
                  const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
                     exact_soln_pt, double& error, 
-                    double& norm);
+                    double& norm) const;
 
  /// Access function: Pointer to source function
  inline AxisymAdvectionDiffusionSourceFctPt& source_fct_pt() 
@@ -342,7 +342,7 @@
  virtual void dinterpolated_u_axi_adv_diff_ddata(
   const Vector<double> &s, 
   Vector<double> &du_ddata,
-  Vector<unsigned> &global_eqn_number)
+  Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    const unsigned n_node = nnode();
@@ -499,14 +499,14 @@
 
  /// \short Output function:  
  ///  r,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    AxisymAdvectionDiffusionEquations::output(outfile);
   }
 
  /// \short Output function:  
  ///  r,z,u  at n_plot^2 plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    AxisymAdvectionDiffusionEquations::output(outfile,n_plot);
   }
@@ -514,14 +514,14 @@
 
  /// \short C-style output function:  
  ///  r,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    AxisymAdvectionDiffusionEquations::output(file_pt);
   }
 
  ///  \short C-style output function:  
  ///   r,z,u at n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    AxisymAdvectionDiffusionEquations::output(file_pt,n_plot);
   }
@@ -530,7 +530,7 @@
  ///  r,z,u_exact at n_plot^2 plot points
  void output_fct(std::ostream &outfile, 
                  const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
    AxisymAdvectionDiffusionEquations::output_fct(outfile,n_plot,exact_soln_pt);
   }
@@ -752,14 +752,14 @@
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    FiniteElement::output(outfile);
   }
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    FiniteElement::output(outfile,nplot);
   }
Index: src/advection_diffusion/refineable_advection_diffusion_elements.h
===================================================================
--- src/advection_diffusion/refineable_advection_diffusion_elements.h	(revision 258)
+++ src/advection_diffusion/refineable_advection_diffusion_elements.h	(working copy)
@@ -200,7 +200,7 @@
  /// information
  void dinterpolated_u_adv_diff_ddata(const Vector<double> &s,
                                      Vector<double> &du_ddata,
-                                     Vector<unsigned> &global_eqn_number)
+                                     Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    unsigned n_node = this->nnode();
Index: src/advection_diffusion/advection_diffusion_elements.cc
===================================================================
--- src/advection_diffusion/advection_diffusion_elements.cc	(revision 258)
+++ src/advection_diffusion/advection_diffusion_elements.cc	(working copy)
@@ -260,7 +260,7 @@
 //======================================================================
 template <unsigned DIM>
 void  AdvectionDiffusionEquations<DIM>::output(std::ostream &outfile, 
-                                               const unsigned &nplot)
+                                               const unsigned &nplot) const
 { 
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -314,7 +314,7 @@
 //======================================================================
 template <unsigned DIM>
 void AdvectionDiffusionEquations<DIM>::output(FILE* file_pt,
-                                              const unsigned &nplot)
+                                              const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -356,7 +356,7 @@
 template <unsigned DIM>
 void AdvectionDiffusionEquations<DIM>::output_fct(std::ostream &outfile, 
              const unsigned &nplot, 
-             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
 
    //Vector of local coordinates
@@ -411,7 +411,7 @@
 template <unsigned DIM>
 void AdvectionDiffusionEquations<DIM>::compute_error(std::ostream &outfile, 
                                            FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                                           double& error, double& norm)
+                                           double& error, double& norm) const
 { 
 
  // Initialise
Index: src/advection_diffusion/advection_diffusion_flux_elements.h
===================================================================
--- src/advection_diffusion/advection_diffusion_flux_elements.h	(revision 258)
+++ src/advection_diffusion/advection_diffusion_flux_elements.h	(working copy)
@@ -129,11 +129,11 @@
  
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {FiniteElement::output(outfile,nplot);}
 
 
Index: src/advection_diffusion/supg_advection_diffusion_elements.h
===================================================================
--- src/advection_diffusion/supg_advection_diffusion_elements.h	(revision 258)
+++ src/advection_diffusion/supg_advection_diffusion_elements.h	(working copy)
@@ -171,7 +171,7 @@
  /// \short Output function:
  /// x,y,u,w_x,w_y,tau_supg  or    x,y,z,u,w_x,w_y,w_z,tau_supg
  /// nplot points in each coordinate direction
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
 
    //Vector of local coordinates
@@ -218,15 +218,15 @@
   }
 
  /// Output at default number of plot points
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {FiniteElement::output(outfile);}
 
  /// C-style output 
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
Index: src/advection_diffusion/advection_diffusion_elements.h
===================================================================
--- src/advection_diffusion/advection_diffusion_elements.h	(revision 258)
+++ src/advection_diffusion/advection_diffusion_elements.h	(working copy)
@@ -148,7 +148,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -156,11 +156,11 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// nplot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -168,20 +168,20 @@
 
  /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: x,y,u_exact or x,y,z,u_exact at nplot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
  /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
  /// nplot^DIM plot points (dummy time-dependent version to 
  /// keep intel compiler happy)
  virtual void output_fct(std::ostream &outfile, const unsigned &nplot,
                          const double& time, 
-  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {
    throw OomphLibError(
     "There is no time-dependent output_fct() for Advection Diffusion elements",
@@ -193,14 +193,14 @@
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm);
+                    exact_soln_pt, double& error, double& norm) const;
 
 
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {
    throw OomphLibError(
     "No time-dependent compute_error() for Advection Diffusion elements",
@@ -375,7 +375,7 @@
  ///refineable version
  virtual void dinterpolated_u_adv_diff_ddata(
   const Vector<double> &s, Vector<double> &du_ddata,
-  Vector<unsigned> &global_eqn_number)
+  Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    const unsigned n_node = nnode();
@@ -529,25 +529,25 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {AdvectionDiffusionEquations<DIM>::output(outfile);}
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {AdvectionDiffusionEquations<DIM>::output(outfile,n_plot);}
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    AdvectionDiffusionEquations<DIM>::output(file_pt);
   }
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    AdvectionDiffusionEquations<DIM>::output(file_pt,n_plot);
   }
@@ -556,7 +556,7 @@
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {AdvectionDiffusionEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}
 
 
Index: src/advection_diffusion/gen_advection_diffusion_elements.cc
===================================================================
--- src/advection_diffusion/gen_advection_diffusion_elements.cc	(revision 258)
+++ src/advection_diffusion/gen_advection_diffusion_elements.cc	(working copy)
@@ -288,7 +288,7 @@
 //======================================================================
 template <unsigned DIM>
 void  GeneralisedAdvectionDiffusionEquations<DIM>::output(std::ostream &outfile, 
-                                               const unsigned &nplot)
+                                               const unsigned &nplot) const
 { 
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -363,7 +363,7 @@
 //======================================================================
 template <unsigned DIM>
 void GeneralisedAdvectionDiffusionEquations<DIM>::output(FILE* file_pt,
-                                              const unsigned &nplot)
+                                              const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -405,7 +405,7 @@
 template <unsigned DIM>
 void GeneralisedAdvectionDiffusionEquations<DIM>::output_fct(std::ostream &outfile, 
              const unsigned &nplot, 
-             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
 
    //Vector of local coordinates
@@ -460,7 +460,7 @@
 template <unsigned DIM>
 void GeneralisedAdvectionDiffusionEquations<DIM>::compute_error(std::ostream &outfile, 
                                            FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                                           double& error, double& norm)
+                                           double& error, double& norm) const
 { 
 
  // Initialise
Index: src/advection_diffusion/gen_advection_diffusion_elements.h
===================================================================
--- src/advection_diffusion/gen_advection_diffusion_elements.h	(revision 258)
+++ src/advection_diffusion/gen_advection_diffusion_elements.h	(working copy)
@@ -153,7 +153,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -161,11 +161,11 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// nplot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -173,20 +173,20 @@
 
  /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: x,y,u_exact or x,y,z,u_exact at nplot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
  /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
  /// nplot^DIM plot points (dummy time-dependent version to 
  /// keep intel compiler happy)
  virtual void output_fct(std::ostream &outfile, const unsigned &nplot,
                          const double& time, 
-  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {
    throw OomphLibError(
     "There is no time-dependent output_fct() for Advection Diffusion elements",
@@ -198,14 +198,14 @@
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm);
+                    exact_soln_pt, double& error, double& norm) const;
 
 
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {
    throw OomphLibError(
     "No time-dependent compute_error() for Advection Diffusion elements",
@@ -631,25 +631,25 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {GeneralisedAdvectionDiffusionEquations<DIM>::output(outfile);}
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {GeneralisedAdvectionDiffusionEquations<DIM>::output(outfile,n_plot);}
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    GeneralisedAdvectionDiffusionEquations<DIM>::output(file_pt);
   }
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    GeneralisedAdvectionDiffusionEquations<DIM>::output(file_pt,n_plot);
   }
@@ -658,7 +658,7 @@
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {GeneralisedAdvectionDiffusionEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}
 
 
Index: src/young_laplace/young_laplace_elements.cc
===================================================================
--- src/young_laplace/young_laplace_elements.cc	(revision 258)
+++ src/young_laplace/young_laplace_elements.cc	(working copy)
@@ -50,7 +50,7 @@
 //======================================================================
 void  YoungLaplaceEquations::exact_position(const Vector<double>& s, 
                                                Vector<double>& r,
-                       FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                       FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  // Get global coordinates
  Vector<double> x(2);
@@ -94,7 +94,7 @@
 /// Get position vector to meniscus
 //======================================================================
  void  YoungLaplaceEquations::position(const Vector<double>& s, 
-                                       Vector<double>& r)
+                                       Vector<double>& r) const
  {
   
   // Get global coordinates
@@ -404,7 +404,7 @@
 /// Output solution at nplot points in each coordinate direction
 //======================================================================
  void  YoungLaplaceEquations::output(std::ostream &outfile, 
-                                     const unsigned &nplot)
+                                     const unsigned &nplot) const
  {
 
 
@@ -508,7 +508,7 @@
  //======================================================================
   void YoungLaplaceEquations::output_fct(std::ostream &outfile, 
                                           const unsigned &nplot, 
-                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
 
   //Vector of local coordinates
@@ -564,7 +564,7 @@
  //======================================================================
  void YoungLaplaceEquations::compute_error(std::ostream &outfile,  
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt, 
-                    double& error, double& norm)
+                    double& error, double& norm) const
  {
 
   // Initialise
Index: src/young_laplace/young_laplace_elements.h
===================================================================
--- src/young_laplace/young_laplace_elements.h	(revision 258)
+++ src/young_laplace/young_laplace_elements.h	(working copy)
@@ -104,7 +104,7 @@
   {return nodal_value(n,0);}
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned n_plot=5;
    output(outfile,n_plot);
@@ -112,12 +112,12 @@
 
  /// \short Output FE representation of soln
  /// at n_plot^2 plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
 
  /// Output exact soln at n_plot^2 plot points 
  void output_fct(std::ostream &outfile, const unsigned &n_plot,  
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt); 
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
 
  /// \short Output exact soln at
@@ -125,7 +125,7 @@
  /// keep intel compiler happy)
  virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
                          const double& time, 
-                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {
    throw OomphLibError("These equations are steady => no time dependence",
                        "YoungLaplaceEquations::output_fct()",
@@ -136,12 +136,12 @@
  /// Get error against and norm of exact solution 
  void compute_error(std::ostream &outfile,  
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt, 
-                    double& error, double& norm); 
+                    double& error, double& norm) const;
 
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {
    throw OomphLibError("These equations are steady => no time dependence",
                        "YoungLaplaceEquations::compute_error()",
@@ -156,7 +156,7 @@
  
  /// \short Use spines or not? (Based on availability of function pointers
  /// to to spine and spine base vector fields)
- bool use_spines()
+ bool use_spines() const
   {
    return (Spine_fct_pt!=0);
   }
@@ -296,12 +296,12 @@
   }
 
  /// Get position vector to meniscus at local coordinate s
- void position(const Vector<double>& s, Vector<double>& r);
+ void position(const Vector<double>& s, Vector<double>& r) const;
 
  /// Get exact position vector to meniscus at local coordinate s
  void exact_position(const Vector<double>& s, 
                      Vector<double>& r,
-                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// Add the element's contribution to its residual vector
  void fill_in_contribution_to_residuals(Vector<double> &residuals);
@@ -506,12 +506,12 @@
   {return Initial_Nvalue[n];}
 
  /// \short Output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {YoungLaplaceEquations::output(outfile);}
 
 
  ///  \short Output function at n_plot^2 plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {YoungLaplaceEquations::output(outfile,n_plot);}
 
 
Index: src/young_laplace/young_laplace_contact_angle_elements.h
===================================================================
--- src/young_laplace/young_laplace_contact_angle_elements.h	(revision 258)
+++ src/young_laplace/young_laplace_contact_angle_elements.h	(working copy)
@@ -123,21 +123,21 @@
 
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
  /// C-style output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// \short C-style output function -- forward to broken version in 
  /// FiniteElement until somebody decides what exactly they want to plot 
  /// here...
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// Compute cosinus of actual contact angle
Index: src/fluid_interface/interface_elements.cc
===================================================================
--- src/fluid_interface/interface_elements.cc	(revision 258)
+++ src/fluid_interface/interface_elements.cc	(working copy)
@@ -445,7 +445,7 @@
 /// Calculate the i-th velocity component at local coordinate s
 //================================================================
 double FluidInterfaceElement::
-interpolated_u(const Vector<double> &s, const unsigned &i) 
+interpolated_u(const Vector<double> &s, const unsigned &i) const
 {
  //Find number of nodes
  unsigned n_node = FiniteElement::nnode();
@@ -649,7 +649,7 @@
 ///Overload the output function
 //===========================================================================
 void LineFluidInterfaceElement::
-output(std::ostream &outfile, const unsigned &n_plot)
+output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Set output Vector
  Vector<double> s(1);
@@ -677,7 +677,7 @@
 ///Overload the output function
 //===========================================================================
 void LineFluidInterfaceElement::
-output(FILE* file_pt, const unsigned &n_plot)
+output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Set output Vector
  Vector<double> s(1);
@@ -910,7 +910,7 @@
 ///Overload the output function
 //===========================================================================
 void AxisymmetricFluidInterfaceElement::
-output(std::ostream &outfile, const unsigned &n_plot)
+output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Vector of local coordinates
  Vector<double> s(1);
@@ -945,7 +945,7 @@
 ///Overload the output function
 //===========================================================================
 void AxisymmetricFluidInterfaceElement::
-output(FILE* file_pt, const unsigned &n_plot)
+output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Set output Vector
  Vector<double> s(1);
@@ -1200,7 +1200,7 @@
 ///Overload the output function
 //===========================================================================
 void SurfaceFluidInterfaceElement::
-output(std::ostream &outfile, const unsigned &nplot)
+output(std::ostream &outfile, const unsigned &nplot) const
 {
  //Storage for the local coordinate
  Vector<double> s(2);
@@ -1243,7 +1243,7 @@
 ///Overload the output function
 //===========================================================================
 void SurfaceFluidInterfaceElement::
-output(FILE* file_pt, const unsigned &nplot)
+output(FILE* file_pt, const unsigned &nplot) const
 {
  //Storage for local coordinates
  Vector<double> s(2);
Index: src/fluid_interface/interface_elements.h
===================================================================
--- src/fluid_interface/interface_elements.h	(revision 258)
+++ src/fluid_interface/interface_elements.h	(working copy)
@@ -250,17 +250,17 @@
   
 
   ///Overload the output function
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
   
   ///Output function
-  void output(std::ostream &outfile, const unsigned &n_plot)
+  void output(std::ostream &outfile, const unsigned &n_plot) const
    {FiniteElement::output(outfile,n_plot);}
   
   ///Overload the C-style output function
-  void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+  void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
   
   ///C-style Output function
-  void output(FILE* file_pt, const unsigned &n_plot)
+  void output(FILE* file_pt, const unsigned &n_plot) const
    {FiniteElement::output(file_pt,n_plot);}
   
  }; 
@@ -341,17 +341,17 @@
   PointFluidInterfaceBoundingElement() {}
  
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  /// Output the element
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {FluidInterfaceBoundingElement::output(outfile,n_plot);}
  
  ///Overload the C-style output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
  
  ///C-style Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {FluidInterfaceBoundingElement::output(file_pt,n_plot);}
  
  /// Calculate the elemental residual vector and the Jacobian
@@ -403,17 +403,17 @@
    PointFluidInterfaceBoundingElement() {}
   
   /// Overload the output function
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
   
   /// Output the element
-  void output(std::ostream &outfile, const unsigned &n_plot)
+  void output(std::ostream &outfile, const unsigned &n_plot) const
   {FluidInterfaceBoundingElement::output(outfile,n_plot);}
   
   ///Overload the C-style output function
-  void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+  void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
   
   ///C-style Output function
-  void output(FILE* file_pt, const unsigned &n_plot)
+  void output(FILE* file_pt, const unsigned &n_plot) const
   {FluidInterfaceBoundingElement::output(file_pt,n_plot);}
   
   /// Calculate the element's residual vector and Jacobian
@@ -461,17 +461,17 @@
   LineFluidInterfaceBoundingElement() {}
  
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  /// Output the element
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {FluidInterfaceBoundingElement::output(outfile,n_plot);}
  
  ///Overload the C-style output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
  
  ///C-style Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {FluidInterfaceBoundingElement::output(file_pt,n_plot);}
  
  
@@ -528,19 +528,19 @@
 
  
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  /// Output the element
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {
   FluidInterfaceBoundingElement::output(outfile,n_plot);
  }
  
  ///Overload the C-style output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
  
  ///C-style Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {FluidInterfaceBoundingElement::output(file_pt,n_plot);}
  
  /// Calculate the elemental residual vector and Jacobian
@@ -726,8 +726,12 @@
  double u(const unsigned &j, const unsigned &i)
   {return node_pt(j)->value(U_index_interface[i]);}
  
+ /// \short Return the i-th velocity component at local node j (const version).
+ double u(const unsigned &j, const unsigned &i) const
+  {return node_pt(j)->value(U_index_interface[i]);}
+
  /// \short Calculate the i-th velocity component at the local coordinate s.
- double interpolated_u(const Vector<double> &s, const unsigned &i); 
+ double interpolated_u(const Vector<double> &s, const unsigned &i) const;
  
  /// Return the value of the external pressure
  double pext() const 
@@ -878,16 +882,16 @@
  LineFluidInterfaceElement() : FluidInterfaceElement() {}
   
   /// Overload the output functions
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
   
   /// Output the element
-  void output(std::ostream &outfile, const unsigned &n_plot);
+  void output(std::ostream &outfile, const unsigned &n_plot) const;
   
   ///Overload the C-style output function
-  void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+  void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
   
   ///C-style Output function
-  void output(FILE* file_pt, const unsigned &n_plot);
+  void output(FILE* file_pt, const unsigned &n_plot) const;
   
 };
 
@@ -922,16 +926,16 @@
  AxisymmetricFluidInterfaceElement(): FluidInterfaceElement() {}
   
   /// Overload the output functions
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
   
   /// Output the element
-  void output(std::ostream &outfile, const unsigned &n_plot);
+  void output(std::ostream &outfile, const unsigned &n_plot) const;
   
   ///Overload the C-style output function
-  void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+  void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
   
   ///C-style Output function
-  void output(FILE* file_pt, const unsigned &n_plot);
+  void output(FILE* file_pt, const unsigned &n_plot) const;
   
 };
 
@@ -965,16 +969,16 @@
  SurfaceFluidInterfaceElement(): FluidInterfaceElement() {}
   
   /// Overload the output functions
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
   
   /// Output the element
-  void output(std::ostream &outfile, const unsigned &n_plot);
+  void output(std::ostream &outfile, const unsigned &n_plot) const;
   
   ///Overload the C-style output function
-  void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+  void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
   
   ///C-style Output function
-  void output(FILE* file_pt, const unsigned &n_plot);
+  void output(FILE* file_pt, const unsigned &n_plot) const;
   
 };
 
Index: src/fluid_interface/line_interface_elements.h
===================================================================
--- src/fluid_interface/line_interface_elements.h	(revision 258)
+++ src/fluid_interface/line_interface_elements.h	(working copy)
@@ -136,17 +136,17 @@
   const double &J){}
 
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output the element
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {LineFluidInterfaceElement::output(outfile,n_plot);}
 
  ///Overload the C-style output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  ///C-style Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {LineFluidInterfaceElement::output(file_pt,n_plot);}
 
 
@@ -329,17 +329,17 @@
  }
  
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  /// Output the element
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {LineFluidInterfaceElement::output(outfile,n_plot);}
  
  ///Overload the C-style output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
  
  ///C-style Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {LineFluidInterfaceElement::output(file_pt,n_plot);}
  
  
Index: src/fluid_interface/surface_interface_elements.h
===================================================================
--- src/fluid_interface/surface_interface_elements.h	(revision 258)
+++ src/fluid_interface/surface_interface_elements.h	(working copy)
@@ -134,17 +134,17 @@
     }
     
     /// Overload the output function
-    void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+    void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
     
     /// Output the element
-    void output(std::ostream &outfile, const unsigned &n_plot)
+    void output(std::ostream &outfile, const unsigned &n_plot) const
     {SurfaceFluidInterfaceElement::output(outfile,n_plot);}
     
     ///Overload the C-style output function
-    void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+    void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
     
     ///C-style Output function
-    void output(FILE* file_pt, const unsigned &n_plot)
+    void output(FILE* file_pt, const unsigned &n_plot) const
     {SurfaceFluidInterfaceElement::output(file_pt,n_plot);}
     
     
@@ -344,17 +344,17 @@
     }
     
     /// Overload the output function
-    void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+    void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
     
     /// Output the element
-    void output(std::ostream &outfile, const unsigned &n_plot)
+    void output(std::ostream &outfile, const unsigned &n_plot) const
     {SurfaceFluidInterfaceElement::output(outfile,n_plot);}
     
     ///Overload the C-style output function
-    void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+    void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
     
     ///C-style Output function
-    void output(FILE* file_pt, const unsigned &n_plot)
+    void output(FILE* file_pt, const unsigned &n_plot) const
     {SurfaceFluidInterfaceElement::output(file_pt,n_plot);}
     
     
Index: src/fluid_interface/axisym_interface_elements.h
===================================================================
--- src/fluid_interface/axisym_interface_elements.h	(revision 258)
+++ src/fluid_interface/axisym_interface_elements.h	(working copy)
@@ -135,17 +135,17 @@
      const double &J){}
     
     /// Overload the output function
-    void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+    void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
     
     /// Output the element
-    void output(std::ostream &outfile, const unsigned &n_plot)
+    void output(std::ostream &outfile, const unsigned &n_plot) const
     {AxisymmetricFluidInterfaceElement::output(outfile,n_plot);}
     
     ///Overload the C-style output function
-    void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+    void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
     
     ///C-style Output function
-    void output(FILE* file_pt, const unsigned &n_plot)
+    void output(FILE* file_pt, const unsigned &n_plot) const
     {AxisymmetricFluidInterfaceElement::output(file_pt,n_plot);}
     
     
@@ -328,17 +328,17 @@
     }
     
     /// Overload the output function
-    void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+    void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
     
     /// Output the element
-    void output(std::ostream &outfile, const unsigned &n_plot)
+    void output(std::ostream &outfile, const unsigned &n_plot) const
     {AxisymmetricFluidInterfaceElement::output(outfile,n_plot);}
     
     ///Overload the C-style output function
-    void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+    void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
     
     ///C-style Output function
-    void output(FILE* file_pt, const unsigned &n_plot)
+    void output(FILE* file_pt, const unsigned &n_plot) const
     {AxisymmetricFluidInterfaceElement::output(file_pt,n_plot);}
     
     /// \short Helper function to calculate the additional contributions
Index: src/womersley/womersley_elements.cc
===================================================================
--- src/womersley/womersley_elements.cc	(revision 258)
+++ src/womersley/womersley_elements.cc	(working copy)
@@ -318,7 +318,7 @@
 template <unsigned DIM>
 void  WomersleyEquations<DIM>::output_3d(std::ostream &outfile, 
                                          const unsigned &nplot,
-                                         const double& z_out)
+                                         const double& z_out) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -356,7 +356,7 @@
 //======================================================================
 template <unsigned DIM>
 void  WomersleyEquations<DIM>::output(std::ostream &outfile, 
-                                      const unsigned &nplot)
+                                      const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -394,7 +394,7 @@
 //======================================================================
 template <unsigned DIM>
 void  WomersleyEquations<DIM>::output(FILE* file_pt,
-                                         const unsigned &nplot)
+                                         const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -436,7 +436,7 @@
 template <unsigned DIM>
 void WomersleyEquations<DIM>::output_fct(std::ostream &outfile, 
                                             const unsigned &nplot, 
-                        FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                        FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -493,7 +493,7 @@
 void WomersleyEquations<DIM>::output_fct(std::ostream &outfile, 
                                             const unsigned &nplot,
                                             const double& time, 
-                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 
 {
  
@@ -551,7 +551,7 @@
 void WomersleyEquations<DIM>::
 compute_error(std::ostream &outfile, 
               FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-              double& error, double& norm)
+              double& error, double& norm) const
 { 
  
  // Initialise
@@ -632,7 +632,7 @@
 template<unsigned DIM>
 void WomersleyEquations<DIM>::compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
 
 { 
 
Index: src/womersley/womersley_elements.h
===================================================================
--- src/womersley/womersley_elements.h	(revision 258)
+++ src/womersley/womersley_elements.h	(working copy)
@@ -296,7 +296,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -306,15 +306,15 @@
  /// against full Navier Stokes at n_nplot x n_plot points (2D)
  void output_3d(std::ostream &outfile, 
                 const unsigned &n_plot,
-                const double& z_out);
+                const double& z_out) const;
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -323,13 +323,13 @@
 
  /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: x,y,u_exact or x,y,z,u_exact at nplot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
 
  /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
@@ -338,21 +338,21 @@
   void output_fct(std::ostream &outfile, const unsigned &nplot,
                   const double& time, 
                   FiniteElement::UnsteadyExactSolutionFctPt 
-                  exact_soln_pt);
+                  exact_soln_pt) const;
 
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    const double& time, double& error, double& norm);
+                    const double& time, double& error, double& norm) const;
 
  /// Get flux: flux[i] = du/dx_i
  void get_flux(const Vector<double>& s, Vector<double>& flux) const
@@ -690,26 +690,26 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {WomersleyEquations<DIM>::output(outfile);}
 
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {WomersleyEquations<DIM>::output(outfile,n_plot);}
 
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {WomersleyEquations<DIM>::output(file_pt);}
 
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {WomersleyEquations<DIM>::output(file_pt,n_plot);}
 
 
@@ -2601,10 +2601,10 @@
 
  
  ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {FiniteElement::output(outfile,nplot);}
  
 }; 
@@ -2840,7 +2840,7 @@
  
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into - set to 1
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
@@ -2992,7 +2992,7 @@
  
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into - set to 1
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
Index: src/poisson/Tpoisson_elements.h
===================================================================
--- src/poisson/Tpoisson_elements.h	(revision 258)
+++ src/poisson/Tpoisson_elements.h	(working copy)
@@ -92,14 +92,14 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    PoissonEquations<DIM>::output(outfile);
   }
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    PoissonEquations<DIM>::output(outfile,n_plot);
   }
@@ -107,7 +107,7 @@
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    PoissonEquations<DIM>::output(file_pt);
   }
@@ -115,7 +115,7 @@
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    PoissonEquations<DIM>::output(file_pt,n_plot);
   }
@@ -124,7 +124,7 @@
  /// \short Output function for an exact solution:
  ///  x,y,u_exact
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   PoissonEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);
  }
@@ -134,7 +134,7 @@
  ///  x,y,u_exact (calls the steady version)
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {
    PoissonEquations<DIM>::output_fct(outfile,n_plot,time,exact_soln_pt);
   }
Index: src/poisson/spectral_poisson_elements.h
===================================================================
--- src/poisson/spectral_poisson_elements.h	(revision 258)
+++ src/poisson/spectral_poisson_elements.h	(working copy)
@@ -87,31 +87,31 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {PoissonEquations<DIM>::output(outfile);}
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {PoissonEquations<DIM>::output(outfile,n_plot);}
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {PoissonEquations<DIM>::output(file_pt);}
 
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {PoissonEquations<DIM>::output(file_pt,n_plot);}
 
 
  /// \short Output function for an exact solution:
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {PoissonEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}
 
 
Index: src/poisson/poisson_elements.cc
===================================================================
--- src/poisson/poisson_elements.cc	(revision 258)
+++ src/poisson/poisson_elements.cc	(working copy)
@@ -335,7 +335,7 @@
 //======================================================================
 template <unsigned DIM>
 void  PoissonEquations<DIM>::output(std::ostream &outfile, 
-                                    const unsigned &nplot)
+                                    const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -375,7 +375,7 @@
 //======================================================================
 template <unsigned DIM>
 void  PoissonEquations<DIM>::output(FILE* file_pt,
-                                    const unsigned &nplot)
+                                    const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -414,7 +414,7 @@
 template <unsigned DIM>
 void PoissonEquations<DIM>::output_fct(std::ostream &outfile, 
                                        const unsigned &nplot, 
-                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -467,7 +467,7 @@
 template <unsigned DIM>
 void PoissonEquations<DIM>::compute_error(std::ostream &outfile, 
                                           FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                                          double& error, double& norm)
+                                          double& error, double& norm) const
 { 
  
  // Initialise
Index: src/poisson/poisson_flux_elements.h
===================================================================
--- src/poisson/poisson_flux_elements.h	(revision 258)
+++ src/poisson/poisson_flux_elements.h	(working copy)
@@ -120,22 +120,22 @@
 
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
 
  /// C-style output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// \short C-style output function -- forward to broken version in 
  /// FiniteElement until somebody decides what exactly they want to plot 
  /// here...
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
Index: src/poisson/poisson_elements.h
===================================================================
--- src/poisson/poisson_elements.h	(revision 258)
+++ src/poisson/poisson_elements.h	(working copy)
@@ -100,7 +100,7 @@
  virtual inline unsigned u_index_poisson() const {return 0;}
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    const unsigned n_plot=5;
    output(outfile,n_plot);
@@ -108,10 +108,10 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    const unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -119,11 +119,11 @@
 
  /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// Output exact soln: x,y,u_exact or x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
  /// n_plot^DIM plot points (dummy time-dependent version to 
@@ -131,7 +131,7 @@
  virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
                          const double& time, 
                          FiniteElement::UnsteadyExactSolutionFctPt 
-                         exact_soln_pt)
+                         exact_soln_pt) const
   {
    throw OomphLibError(
     "There is no time-dependent output_fct() for Poisson elements ",
@@ -143,13 +143,13 @@
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
 
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {
    throw OomphLibError(
     "There is no time-dependent compute_error() for Poisson elements",
@@ -424,32 +424,32 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {PoissonEquations<DIM>::output(outfile);}
 
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {PoissonEquations<DIM>::output(outfile,n_plot);}
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {PoissonEquations<DIM>::output(file_pt);}
 
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {PoissonEquations<DIM>::output(file_pt,n_plot);}
 
 
  /// \short Output function for an exact solution:
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {PoissonEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}
 
 
@@ -459,7 +459,7 @@
  /// (Calls the steady version)
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {PoissonEquations<DIM>::output_fct(outfile,n_plot,time,exact_soln_pt);}
 
 
Index: src/linear_wave/linear_wave_elements.cc
===================================================================
--- src/linear_wave/linear_wave_elements.cc	(revision 258)
+++ src/linear_wave/linear_wave_elements.cc	(working copy)
@@ -252,7 +252,7 @@
 //======================================================================
 template <unsigned DIM>
 void LinearWaveEquations<DIM>::output(std::ostream &outfile, 
-                                      const unsigned &nplot)
+                                      const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -287,7 +287,7 @@
 //======================================================================
 template <unsigned DIM>
 void  LinearWaveEquations<DIM>::output(FILE* file_pt,
-                                 const unsigned &nplot)
+                                 const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -329,7 +329,7 @@
 template <unsigned DIM>
 void LinearWaveEquations<DIM>::output_fct(
  std::ostream &outfile, const unsigned &nplot, 
- FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+ FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -382,7 +382,7 @@
 template <unsigned DIM>
 void LinearWaveEquations<DIM>::output_fct(
 std::ostream &outfile, const unsigned &nplot, const double& time, 
-FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 {
 
  //Vector of local coordinates
@@ -437,7 +437,7 @@
 void LinearWaveEquations<DIM>::compute_error(
  std::ostream &outfile, 
  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
- double& error, double& norm)
+ double& error, double& norm) const
 { 
 
  // Initialise
@@ -520,7 +520,7 @@
 void LinearWaveEquations<DIM>::compute_error(
  std::ostream &outfile, 
  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
- const double& time, double& error, double& norm)
+ const double& time, double& error, double& norm) const
 
 { 
 
Index: src/linear_wave/linear_wave_flux_elements.h
===================================================================
--- src/linear_wave/linear_wave_flux_elements.h	(revision 258)
+++ src/linear_wave/linear_wave_flux_elements.h	(working copy)
@@ -123,21 +123,21 @@
 
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
 
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 
Index: src/linear_wave/linear_wave_elements.h
===================================================================
--- src/linear_wave/linear_wave_elements.h	(revision 258)
+++ src/linear_wave/linear_wave_elements.h	(working copy)
@@ -118,7 +118,7 @@
   }
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -126,11 +126,11 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// Output with default number of plot points
- void output(FILE* file_pt) 
+ void output(FILE* file_pt) const
   {
    unsigned nplot=5;
    output(file_pt,nplot);
@@ -138,12 +138,12 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &nplot);
+ void output(FILE* file_pt, const unsigned &nplot) const;
 
  /// Output exact soln: x,y,u_exact or x,y,z,u_exact at nplot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
  /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
  /// nplot^DIM plot points (time-dependent version)
@@ -151,19 +151,19 @@
   void output_fct(std::ostream &outfile, const unsigned &nplot,
                   const double& time, 
                   FiniteElement::UnsteadyExactSolutionFctPt 
-                  exact_soln_pt);
+                  exact_soln_pt) const;
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    const double& time, double& error, double& norm);
+                    const double& time, double& error, double& norm) const;
 
  /// Access function: Pointer to source function
  LinearWaveSourceFctPt& source_fct_pt() {return Source_fct_pt;}
@@ -361,22 +361,22 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {LinearWaveEquations<DIM>::output(outfile);}
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {LinearWaveEquations<DIM>::output(outfile,n_plot);}
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {LinearWaveEquations<DIM>::output(file_pt);}
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {LinearWaveEquations<DIM>::output(file_pt,n_plot);}
 
 
@@ -384,7 +384,7 @@
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {LinearWaveEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}
 
 
@@ -395,7 +395,7 @@
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  const double& time,
                  FiniteElement::UnsteadyExactSolutionFctPt
-                 exact_soln_pt)
+                 exact_soln_pt) const
   {LinearWaveEquations<DIM>::output_fct(outfile,n_plot,time,exact_soln_pt);}
 
 
Index: src/axisym_spherical_solid/axisym_solid_elements.h
===================================================================
--- src/axisym_spherical_solid/axisym_solid_elements.h	(revision 258)
+++ src/axisym_spherical_solid/axisym_solid_elements.h	(working copy)
@@ -66,7 +66,7 @@
  
  /// Return the stress tensor, as calculated from the constitutive law
  void get_stress(const DenseMatrix<double> &g, const DenseMatrix<double> &G,
-                 DenseMatrix<double> &sigma)
+                 DenseMatrix<double> &sigma) const
   {
 #ifdef PARANOID
    //If the pointer to the constitutive law hasn't been set, issue an error
@@ -401,10 +401,10 @@
 
 
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    //Set the output Vector
    Vector<double> s(2);
@@ -437,11 +437,11 @@
 
 
  /// Overload the output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
 
  /// Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    //Set the output Vector
    Vector<double> s(2);
@@ -494,17 +494,17 @@
  AxisymQPVDElement() : SolidQElement<2,3>(), AxisymmetricPVDEquations() { }
   
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {AxisymmetricPVDEquations::output(outfile,n_plot);}
 
  /// Overload the output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {AxisymmetricPVDEquations::output(file_pt,n_plot);}
 
 };
@@ -533,10 +533,10 @@
   AxisymmetricPVDEquations() { }
  
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    //Set the output Vector
    Vector<double> s(2);
@@ -569,11 +569,11 @@
 
 
  /// Overload the output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
 
  /// Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    //Set the output Vector
    Vector<double> s(2);
@@ -664,7 +664,7 @@
  /// in the Near-incompresible formulation
  void get_stress(const DenseMatrix<double> &g, const DenseMatrix<double> &G, 
                  DenseMatrix<double> &sigma, DenseMatrix<double> &Gup, 
-                 double &pressure_stress, double &kappa) 
+                 double &pressure_stress, double &kappa) const
   {
 #ifdef PARANOID
    //If the pointer to the constitutive law hasn't been set, issue an error
@@ -690,7 +690,7 @@
  /// in the "true" incompresible formulation
  void get_stress(const DenseMatrix<double> &g, const DenseMatrix<double> &G,
                  DenseMatrix<double> &sigma, DenseMatrix<double> &Gup, 
-                 double &detG)
+                 double &detG) const
   {
 #ifdef PARANOID
    //If the pointer to the constitutive law hasn't been set, issue an error
@@ -724,7 +724,7 @@
  virtual unsigned nsolid_pres() const=0;
 
  /// Return the lth solid pressures
- virtual double solid_p(const unsigned &l)=0;
+ virtual double solid_p(const unsigned &l) const=0;
 
  /// Return the residuals
  inline void fill_in_contribution_to_residuals(Vector<double> &residuals)
@@ -1189,7 +1189,7 @@
   }
  
  /// Return the interpolated_solid_pressure 
- double interpolated_solid_p(const Vector<double> &s) 
+ double interpolated_solid_p(const Vector<double> &s) const
   {
    //Find number of nodes
    unsigned n_solid_pres = nsolid_pres();
@@ -1210,10 +1210,10 @@
   }
 
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    //Set the output Vector
    Vector<double> s(2);
@@ -1246,11 +1246,11 @@
   }
 
  /// Overload the output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
 
  /// Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    //Set the output Vector
    Vector<double> s(2);
@@ -1299,7 +1299,7 @@
  unsigned P_solid_internal_index;
 
  /// Overload the access function for the solid pressure equation numbers
- inline int solid_p_local_eqn(const unsigned &i)
+ inline int solid_p_local_eqn(const unsigned &i) const
   {return internal_local_eqn(P_solid_internal_index,i);}
 
  /// Return the pressure shape functions
@@ -1321,7 +1321,7 @@
   }
   
  /// Return the l-th pressure value
- double solid_p(const unsigned &l) 
+ double solid_p(const unsigned &l) const
   {return this->internal_data_pt(P_solid_internal_index)->value(l);}
  
  /// Return number of pressure values
@@ -1335,18 +1335,18 @@
   }
 
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
  
  /// Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {AxisymmetricPVDEquationsWithPressure::output(outfile,n_plot);}
 
 
  /// Overload the output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
  
  /// Output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {AxisymmetricPVDEquationsWithPressure::output(file_pt,n_plot);}
 
 };
Index: src/axisym_spherical_solid/axisym_solid_traction_elements.h
===================================================================
--- src/axisym_spherical_solid/axisym_solid_traction_elements.h	(revision 258)
+++ src/axisym_spherical_solid/axisym_solid_traction_elements.h	(working copy)
@@ -115,17 +115,17 @@
   }
 
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
  /// Overload the output function
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// Output function: x,y,[z],u,v,[w],p in tecplot format
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 }; 
Index: src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_elements.cc
===================================================================
--- src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_elements.cc	(revision 258)
+++ src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_elements.cc	(working copy)
@@ -408,7 +408,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
  void  FourierDecomposedHelmholtzEquations::output(std::ostream &outfile, 
-                                                   const unsigned &nplot)
+                                                   const unsigned &nplot) const
  {
   
   //Vector of local coordinates
@@ -454,7 +454,7 @@
 //======================================================================
  void  FourierDecomposedHelmholtzEquations::output_real(std::ostream &outfile, 
                                                         const double& phi,
-                                                        const unsigned &nplot)
+                                                        const unsigned &nplot) const
  {
   
   //Vector of local coordinates
@@ -493,7 +493,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
  void  FourierDecomposedHelmholtzEquations::output(FILE* file_pt,
-                                                   const unsigned &nplot)
+                                                   const unsigned &nplot) const
  {
   //Vector of local coordinates
   Vector<double> s(2);
@@ -540,7 +540,7 @@
  void FourierDecomposedHelmholtzEquations::output_fct(
   std::ostream &outfile, 
   const unsigned &nplot, 
-  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   //Vector of local coordinates
   Vector<double> s(2);
@@ -596,7 +596,7 @@
   std::ostream &outfile, 
   const double& phi,
   const unsigned &nplot, 
-  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   //Vector of local coordinates
   Vector<double> s(2);
@@ -648,7 +648,7 @@
  void FourierDecomposedHelmholtzEquations::compute_error(
   std::ostream &outfile, 
   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-  double& error, double& norm)
+  double& error, double& norm) const
  { 
   
   // Initialise
Index: src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_flux_elements.h
===================================================================
--- src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_flux_elements.h	(revision 258)
+++ src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_flux_elements.h	(working copy)
@@ -123,22 +123,22 @@
    
    /// Output function -- forward to broken version in FiniteElement
    /// until somebody decides what exactly they want to plot here...
-   void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+   void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
    
    /// \short Output function -- forward to broken version in FiniteElement
    /// until somebody decides what exactly they want to plot here...
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
    {FiniteElement::output(outfile,n_plot);}
    
    
    /// C-style output function -- forward to broken version in FiniteElement
    /// until somebody decides what exactly they want to plot here...
-   void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+   void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
    
    /// \short C-style output function -- forward to broken version in 
    /// FiniteElement until somebody decides what exactly they want to plot 
    /// here...
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
    {FiniteElement::output(file_pt,n_plot);}
    
    
Index: src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_elements.h
===================================================================
--- src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_elements.h	(revision 258)
+++ src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_elements.h	(working copy)
@@ -167,7 +167,7 @@
   }
   
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    const unsigned n_plot=5;
    output(outfile,n_plot);
@@ -175,7 +175,7 @@
  
  /// \short Output FE representation of soln: x,y,u_re,u_im or 
  /// x,y,z,u_re,u_im at  n_plot^2 plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
  
  /// \short Output function for real part of full time-dependent solution
  /// u = Re( (u_r +i u_i) exp(-i omega t)
@@ -183,10 +183,10 @@
  /// r,z,u at n_plot plot points in each coordinate
  /// direction
  void output_real(std::ostream &outfile, const double& phi,
-                  const unsigned &n_plot);
+                  const unsigned &n_plot) const;
  
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    const unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -194,19 +194,19 @@
 
  /// \short C-style output FE representation of soln: r,z,u_re,u_im or 
  /// at n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
  
  /// Output exact soln: r,z,u_re_exact,u_im_exact 
  /// at n_plot^2 plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Output exact soln: (dummy time-dependent version to 
  /// keep intel compiler happy)
  virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
                          const double& time, 
                          FiniteElement::UnsteadyExactSolutionFctPt 
-                         exact_soln_pt)
+                         exact_soln_pt) const
   {
    throw OomphLibError(
     "There is no time-dependent output_fct() for FourierDecomposedHelmholtz elements ",
@@ -223,19 +223,19 @@
  void output_real_fct(std::ostream &outfile, 
                       const double& phi,
                       const unsigned &n_plot, 
-                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
  
  
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
  
  
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
  {
   throw OomphLibError(
    "There is no time-dependent compute_error() for FourierDecomposedHelmholtz elements",
@@ -336,8 +336,7 @@
  /// \short Return FE representation of function value u(s) 
  /// at local coordinate s
  inline std::complex<double> interpolated_u_fourier_decomposed_helmholtz(
-  const Vector<double> &s)
-  const
+  const Vector<double> &s) const
  {
   //Find number of nodes
   const unsigned n_node = nnode();
@@ -468,12 +467,12 @@
    {return Initial_Nvalue;}
    
    /// \short Output function: r,z,u 
-   void output(std::ostream &outfile)
+   void output(std::ostream &outfile) const
    {FourierDecomposedHelmholtzEquations::output(outfile);}
    
    ///  \short Output function:  
    ///   r,z,u at n_plot^2 plot points
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
    {FourierDecomposedHelmholtzEquations::output(outfile,n_plot);}
    
    /// \short Output function for real part of full time-dependent solution
@@ -482,22 +481,22 @@
    /// r,z,u  at n_plot plot points in each coordinate
    /// direction
    void output_real(std::ostream &outfile, const double& phi,
-                    const unsigned &n_plot)
+                    const unsigned &n_plot) const
    {FourierDecomposedHelmholtzEquations::output_real(outfile,phi,n_plot);}
    
    /// \short C-style output function:  r,z,u
-   void output(FILE* file_pt)
+   void output(FILE* file_pt) const
    {FourierDecomposedHelmholtzEquations::output(file_pt);}
    
    ///  \short C-style output function:  
    ///   r,z,u  at n_plot^2 plot points
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
    {FourierDecomposedHelmholtzEquations::output(file_pt,n_plot);}
    
    /// \short Output function for an exact solution:
    /// r,z,u_exact at n_plot^2 plot points
    void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
    {
     FourierDecomposedHelmholtzEquations::output_fct(outfile,n_plot,
                                                     exact_soln_pt);
@@ -511,7 +510,7 @@
    void output_real_fct(std::ostream &outfile, 
                         const double& phi,
                         const unsigned &n_plot, 
-                        FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                        FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
    {
     FourierDecomposedHelmholtzEquations::output_real_fct(outfile,phi,
                                                          n_plot,exact_soln_pt);
Index: src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_bc_elements.h
===================================================================
--- src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_bc_elements.h	(revision 258)
+++ src/fourier_decomposed_helmholtz/fourier_decomposed_helmholtz_bc_elements.h	(working copy)
@@ -107,21 +107,21 @@
 
   /// Output function -- forward to broken version in FiniteElement
   /// until somebody decides what exactly they want to plot here...
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
   
   /// \short Output function -- forward to broken version in FiniteElement
   /// until somebody decides what exactly they want to plot here...
-  void output(std::ostream &outfile, const unsigned &n_plot)
+  void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
   
   /// C-style output function -- forward to broken version in FiniteElement
   /// until somebody decides what exactly they want to plot here...
-  void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+  void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
   
   /// \short C-style output function -- forward to broken version in 
   /// FiniteElement until somebody decides what exactly they want to plot 
   /// here...
-  void output(FILE* file_pt, const unsigned &n_plot)
+  void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
   /// \short Return the index at which the real/imag unknown value
Index: src/linear_elasticity/linear_elasticity_elements.cc
===================================================================
--- src/linear_elasticity/linear_elasticity_elements.cc	(revision 258)
+++ src/linear_elasticity/linear_elasticity_elements.cc	(working copy)
@@ -156,8 +156,7 @@
 //======================================================================
 template<unsigned DIM>
 void LinearElasticityEquations<DIM>::get_stress(const Vector<double> &s,
-                                                DenseMatrix<double> &stress)
- const
+                                                DenseMatrix<double> &stress) const
 {
 #ifdef PARANOID
  if ((stress.ncol()!=DIM)||(stress.nrow()!=DIM))
@@ -389,7 +388,7 @@
  template <unsigned DIM>
  void LinearElasticityEquations<DIM>::output_fct(std::ostream &outfile, 
                                                  const unsigned &nplot, 
-                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -441,7 +440,7 @@
 //=======================================================================
  template <unsigned DIM>
  void LinearElasticityEquations<DIM>::output(std::ostream &outfile, 
-                                             const unsigned &nplot)
+                                             const unsigned &nplot) const
  {
   //Set output Vector
   Vector<double> s(DIM);
@@ -486,7 +485,7 @@
 //=======================================================================
 template <unsigned DIM>
 void LinearElasticityEquations<DIM>::output(FILE* file_pt, 
-                                            const unsigned &nplot)
+                                            const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -531,7 +530,7 @@
 void LinearElasticityEquations<DIM>::compute_error(
  std::ostream &outfile,
  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
- double& error, double& norm)
+ double& error, double& norm) const
 {
  
  error=0.0;
Index: src/linear_elasticity/linear_elasticity_elements.h
===================================================================
--- src/linear_elasticity/linear_elasticity_elements.h	(revision 258)
+++ src/linear_elasticity/linear_elasticity_elements.h	(working copy)
@@ -66,8 +66,7 @@
    
    /// Compute vector of FE interpolated displacement u at local coordinate s
    void interpolated_u_linear_elasticity(const Vector<double> &s, 
-                                         Vector<double>& disp) 
-    const
+                                         Vector<double>& disp) const
     {
      //Find number of nodes
      unsigned n_node = nnode();
@@ -360,28 +359,28 @@
    ///Output exact solution x,y,[z],u,v,[w]
    void output_fct(std::ostream &outfile, 
                    const unsigned &nplot, 
-                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
    
    /// Output: x,y,[z],u,v,[w]
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
    {
     unsigned n_plot=5;
     output(outfile,n_plot);
    }
    
    /// Output: x,y,[z],u,v,[w]
-   void output(std::ostream &outfile, const unsigned &n_plot);
+   void output(std::ostream &outfile, const unsigned &n_plot) const;
    
    
    /// C-style output: x,y,[z],u,v,[w]
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
    {
     unsigned n_plot=5;
     output(file_pt,n_plot);
    }
    
    /// Output: x,y,[z],u,v,[w]
-   void output(FILE* file_pt, const unsigned &n_plot);
+   void output(FILE* file_pt, const unsigned &n_plot) const;
    
    /// \short Validate against exact solution.
    /// Solution is provided via function pointer.
@@ -389,7 +388,7 @@
    /// and L2 norm of displacement solution over element
    void compute_error(std::ostream &outfile,
                       FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                      double& error, double& norm);
+                      double& error, double& norm) const;
    
     private:
 
@@ -424,26 +423,26 @@
    ///Output exact solution x,y,[z],u,v,[w]
    void output_fct(std::ostream &outfile, 
                    const unsigned &nplot, 
-                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
    {
     LinearElasticityEquations<DIM>::output_fct(outfile,nplot,exact_soln_pt);
    }
    
    /// Output function
-   void output(std::ostream &outfile) 
+   void output(std::ostream &outfile) const
    {LinearElasticityEquations<DIM>::output(outfile);}
    
    /// Output function
-   void output(std::ostream &outfile, const unsigned &n_plot)
+   void output(std::ostream &outfile, const unsigned &n_plot) const
    {LinearElasticityEquations<DIM>::output(outfile,n_plot);}
    
    
    /// C-style output function
-   void output(FILE* file_pt) 
+   void output(FILE* file_pt) const
    {LinearElasticityEquations<DIM>::output(file_pt);}
    
    /// C-style output function
-   void output(FILE* file_pt, const unsigned &n_plot)
+   void output(FILE* file_pt, const unsigned &n_plot) const
    {LinearElasticityEquations<DIM>::output(file_pt,n_plot);}
    
   };
Index: src/linear_elasticity/linear_elasticity_traction_elements.h
===================================================================
--- src/linear_elasticity/linear_elasticity_traction_elements.h	(revision 258)
+++ src/linear_elasticity/linear_elasticity_traction_elements.h	(working copy)
@@ -197,19 +197,19 @@
   {return FaceElement::zeta_nodal(n,k,i);}     
 
  /// \short Output function
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
  {FiniteElement::output(outfile);}
  
  /// \short Output function
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
  {FiniteElement::output(outfile,n_plot);}
  
  /// \short C_style output function
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
  {FiniteElement::output(file_pt);}
  
  /// \short C-style output function
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
  {FiniteElement::output(file_pt,n_plot);}
  
  
Index: src/linear_elasticity/Tlinear_elasticity_elements.h
===================================================================
--- src/linear_elasticity/Tlinear_elasticity_elements.h	(revision 258)
+++ src/linear_elasticity/Tlinear_elasticity_elements.h	(working copy)
@@ -86,26 +86,26 @@
   }
  
  /// \short Output function:  
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
  {
   LinearElasticityEquations<DIM>::output(outfile);
   }
 
  ///  \short Output function:  
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    LinearElasticityEquations<DIM>::output(outfile,nplot);
   }
 
 
  /// \short C-style output function:  
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    LinearElasticityEquations<DIM>::output(file_pt);
   }
 
  ///  \short C-style output function:  
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    LinearElasticityEquations<DIM>::output(file_pt,n_plot);
   }
Index: src/beam/beam_elements.cc
===================================================================
--- src/beam/beam_elements.cc	(revision 258)
+++ src/beam/beam_elements.cc	(working copy)
@@ -78,7 +78,7 @@
 //=======================================================================
 void KirchhoffLoveBeamEquations::get_normal(const Vector<double>& s,
                                             Vector<double>& r,
-                                            Vector<double>&N)
+                                            Vector<double>&N) const
  {
  
 #ifdef PARANOID
@@ -187,7 +187,7 @@
 //=======================================================================
 void KirchhoffLoveBeamEquations::get_non_unit_tangent(const Vector<double>& s,
                                                       Vector<double>& r,
-                                                      Vector<double>& drds)
+                                                      Vector<double>& drds) const
  {
  
 #ifdef PARANOID
@@ -563,7 +563,7 @@
 /// Compute the potential (strain) and kinetic energy of the 
 /// element (wrapper function).
 //=======================================================================
-void KirchhoffLoveBeamEquations::get_energy(double& pot_en, double& kin_en)
+void KirchhoffLoveBeamEquations::get_energy(double& pot_en, double& kin_en) const
 {
  // Initialise
  double stretch=0.0;
@@ -584,7 +584,7 @@
 /// bending components.
 //=======================================================================
 void KirchhoffLoveBeamEquations::get_energy(double &stretch, 
-                                            double &bend, double& kin_en)
+                                            double &bend, double& kin_en) const
 {
  // Initialise
  stretch=0.0;
@@ -763,7 +763,7 @@
 /// with specified number of plot points.
 //=======================================================================
 void HermiteBeamElement::output(const unsigned& t, std::ostream &outfile, 
-                                const unsigned &n_plot)
+                                const unsigned &n_plot) const
 {
 
 #ifdef WARN_ABOUT_SUBTLY_CHANGED_OOMPH_INTERFACES
@@ -802,7 +802,7 @@
 //=======================================================================
 /// Output function
 //=======================================================================
-void HermiteBeamElement::output(std::ostream &outfile, const unsigned &n_plot)
+void HermiteBeamElement::output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -908,7 +908,7 @@
 //=======================================================================
 /// Output function
 //=======================================================================
-void HermiteBeamElement::output(std::ostream &outfile)
+void HermiteBeamElement::output(std::ostream &outfile) const
 {
  unsigned n_plot=5;
  output(outfile,n_plot);
@@ -923,7 +923,7 @@
 /// with specified number of plot points.
 //=======================================================================
 void HermiteBeamElement::output(const unsigned& t, FILE* file_pt,
-                                const unsigned &n_plot)
+                                const unsigned &n_plot) const
 {
 
 #ifdef WARN_ABOUT_SUBTLY_CHANGED_OOMPH_INTERFACES
@@ -966,7 +966,7 @@
 //=======================================================================
 /// Output function
 //=======================================================================
-void HermiteBeamElement::output(FILE* file_pt, const unsigned &n_plot)
+void HermiteBeamElement::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -1081,7 +1081,7 @@
 //=======================================================================
 /// C-style output function
 //=======================================================================
-void HermiteBeamElement::output(FILE* file_pt)
+void HermiteBeamElement::output(FILE* file_pt) const
 {
  unsigned n_plot=5;
  output(file_pt,n_plot);
Index: src/beam/beam_elements.h
===================================================================
--- src/beam/beam_elements.h	(revision 258)
+++ src/beam/beam_elements.h	(working copy)
@@ -224,7 +224,7 @@
  /// all cases).
  void wall_profile(const Vector<double>& xi,
                    const Vector<double>& x,
-                   double& h_ratio)
+                   double& h_ratio) const
   {
    Wall_profile_fct_pt(xi,x,h_ratio);
   }
@@ -255,7 +255,7 @@
   GeomObject*& undeformed_beam_pt() {return Undeformed_beam_pt;}
       
   /// Get normal vector on wall
-  void get_normal(const Vector<double>& s, Vector<double>& N)
+  void get_normal(const Vector<double>& s, Vector<double>& N) const
    {
     Vector<double> r(2);
     get_normal(s,r,N);
@@ -265,13 +265,13 @@
   /// Get position vector to and normal vector on wall
   void get_normal(const Vector<double>& s, 
                   Vector<double>& r,
-                  Vector<double>& N);
+                  Vector<double>& N) const;
   
   /// \short Get position vector to and non-unit tangent vector on wall:
   /// dr/ds
   void get_non_unit_tangent(const Vector<double>& s,
                             Vector<double>& r,
-                            Vector<double>& drds);
+                            Vector<double>& drds) const;
 
   /// \short Return the residuals for the equations of Kirchhoff-Love beam
   /// theory with linear constitutive equations; if  Solid_ic_pt!=0, we
@@ -295,11 +295,11 @@
                                             DenseMatrix<double> &jacobian);
   
   /// \short Get potential (strain) and kinetic energy of the element
-  void get_energy(double& pot_en, double& kin_en);
+  void get_energy(double& pot_en, double& kin_en) const;
 
   /// \short Get the potential energy due to stretching and bending and the
   /// kinetic energy of the element
-  void get_energy(double &stretch, double &bend, double &kin_en);
+  void get_energy(double &stretch, double &bend, double &kin_en) const;
 
 }; 
 
@@ -322,24 +322,24 @@
   }
 
  /// Output function
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output function with specified number of plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// \short Output at previous time (t=0: present; t>0: previous) 
  /// with specified number of plot points
- void output(const unsigned& t, std::ostream &outfile, const unsigned &n_plot);
+ void output(const unsigned& t, std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output function
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C-style output function with specified number of plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// \short C-style output at previous time (t=0: present; t>0: previous)
  /// with specified number of plot points
- void output(const unsigned& t, FILE* file_pt, const unsigned &n_plot);
+ void output(const unsigned& t, FILE* file_pt, const unsigned &n_plot) const;
 
 };
 
@@ -452,7 +452,7 @@
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Just the solid degrees of freedom themselves.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
@@ -566,21 +566,21 @@
  
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
  /// C-style output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// \short C-style output function -- forward to broken version in 
  /// FiniteElement until somebody decides what exactly they want to plot 
  /// here...
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 private:
Index: src/helmholtz/helmholtz_elements.cc
===================================================================
--- src/helmholtz/helmholtz_elements.cc	(revision 258)
+++ src/helmholtz/helmholtz_elements.cc	(working copy)
@@ -257,7 +257,7 @@
 //======================================================================
 template <unsigned DIM>
 void  HelmholtzEquations<DIM>::output(std::ostream &outfile, 
-                                    const unsigned &nplot)
+                                    const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -304,7 +304,7 @@
 template <unsigned DIM>
 void  HelmholtzEquations<DIM>::output_real(std::ostream &outfile, 
                                            const double& phi,
-                                           const unsigned &nplot)
+                                           const unsigned &nplot) const
 {
  
  //Vector of local coordinates
@@ -344,7 +344,7 @@
 //======================================================================
 template <unsigned DIM>
 void  HelmholtzEquations<DIM>::output(FILE* file_pt,
-                                    const unsigned &nplot)
+                                    const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -391,7 +391,7 @@
 template <unsigned DIM>
 void HelmholtzEquations<DIM>::output_fct(std::ostream &outfile, 
                                        const unsigned &nplot, 
-                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -449,7 +449,7 @@
  std::ostream &outfile, 
  const double& phi,
  const unsigned &nplot, 
- FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+ FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -502,7 +502,7 @@
 template <unsigned DIM>
 void HelmholtzEquations<DIM>::compute_error(std::ostream &outfile, 
                                           FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                                          double& error, double& norm)
+                                          double& error, double& norm) const
 { 
  
  // Initialise
Index: src/helmholtz/helmholtz_flux_elements.h
===================================================================
--- src/helmholtz/helmholtz_flux_elements.h	(revision 258)
+++ src/helmholtz/helmholtz_flux_elements.h	(working copy)
@@ -126,22 +126,22 @@
 
  /// Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
 
  /// C-style output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// \short C-style output function -- forward to broken version in 
  /// FiniteElement until somebody decides what exactly they want to plot 
  /// here...
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  
Index: src/helmholtz/helmholtz_elements.h
===================================================================
--- src/helmholtz/helmholtz_elements.h	(revision 258)
+++ src/helmholtz/helmholtz_elements.h	(working copy)
@@ -112,7 +112,7 @@
  }
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    const unsigned n_plot=5;
    output(outfile,n_plot);
@@ -120,7 +120,7 @@
 
  /// \short Output FE representation of soln: x,y,u_re,u_im or 
  /// x,y,z,u_re,u_im at  n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// \short Output function for real part of full time-dependent solution
  /// u = Re( (u_r +i u_i) exp(-i omega t)
@@ -128,10 +128,10 @@
  /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
  /// direction
  void output_real(std::ostream &outfile, const double& phi,
-                  const unsigned &n_plot);
+                  const unsigned &n_plot) const;
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    const unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -139,19 +139,19 @@
 
  /// \short C-style output FE representation of soln: x,y,u_re,u_im or 
  /// x,y,z,u_re,u_im at  n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// Output exact soln: x,y,u_re_exact,u_im_exact 
  /// or x,y,z,u_re_exact,u_im_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Output exact soln: (dummy time-dependent version to 
  /// keep intel compiler happy)
  virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
                          const double& time, 
                          FiniteElement::UnsteadyExactSolutionFctPt 
-                         exact_soln_pt)
+                         exact_soln_pt) const
   {
    throw OomphLibError(
     "There is no time-dependent output_fct() for Helmholtz elements ",
@@ -169,19 +169,19 @@
  void output_real_fct(std::ostream &outfile, 
                       const double& phi,
                       const unsigned &n_plot, 
-                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
  
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
 
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {
    throw OomphLibError(
     "There is no time-dependent compute_error() for Helmholtz elements",
@@ -402,13 +402,13 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {HelmholtzEquations<DIM>::output(outfile);}
 
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {HelmholtzEquations<DIM>::output(outfile,n_plot);}
 
  /// \short Output function for real part of full time-dependent solution
@@ -417,26 +417,26 @@
  /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
  /// direction
  void output_real(std::ostream &outfile, const double& phi,
-                  const unsigned &n_plot)
+                  const unsigned &n_plot) const
  {HelmholtzEquations<DIM>::output_real(outfile,phi,n_plot);}
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {HelmholtzEquations<DIM>::output(file_pt);}
 
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {HelmholtzEquations<DIM>::output(file_pt,n_plot);}
 
 
  /// \short Output function for an exact solution:
  ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {HelmholtzEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}
 
 
@@ -448,7 +448,7 @@
  void output_real_fct(std::ostream &outfile, 
                       const double& phi,
                       const unsigned &n_plot, 
-                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   HelmholtzEquations<DIM>::output_real_fct(outfile,phi,n_plot,exact_soln_pt);
  }
Index: src/helmholtz/Thelmholtz_elements.h
===================================================================
--- src/helmholtz/Thelmholtz_elements.h	(revision 258)
+++ src/helmholtz/Thelmholtz_elements.h	(working copy)
@@ -90,14 +90,14 @@
 
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    HelmholtzEquations<DIM>::output(outfile);
   }
 
  ///  \short Output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    HelmholtzEquations<DIM>::output(outfile,n_plot);
   }
@@ -105,7 +105,7 @@
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    HelmholtzEquations<DIM>::output(file_pt);
   }
@@ -113,7 +113,7 @@
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    HelmholtzEquations<DIM>::output(file_pt,n_plot);
   }
@@ -122,7 +122,7 @@
  /// \short Output function for an exact solution:
  ///  x,y,u_exact
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
  {
   HelmholtzEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);
  }
Index: src/helmholtz/helmholtz_bc_elements.h
===================================================================
--- src/helmholtz/helmholtz_bc_elements.h	(revision 258)
+++ src/helmholtz/helmholtz_bc_elements.h	(working copy)
@@ -153,21 +153,21 @@
 
   /// Output function -- forward to broken version in FiniteElement
   /// until somebody decides what exactly they want to plot here...
-  void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+  void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
   
   /// \short Output function -- forward to broken version in FiniteElement
   /// until somebody decides what exactly they want to plot here...
-  void output(std::ostream &outfile, const unsigned &n_plot)
+  void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
   
   /// C-style output function -- forward to broken version in FiniteElement
   /// until somebody decides what exactly they want to plot here...
-  void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+  void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
   
   /// \short C-style output function -- forward to broken version in 
   /// FiniteElement until somebody decides what exactly they want to plot 
   /// here...
-  void output(FILE* file_pt, const unsigned &n_plot)
+  void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
   /// \short Return the index at which the real/imag unknown value
Index: src/advection_diffusion_reaction/advection_diffusion_reaction_elements.cc
===================================================================
--- src/advection_diffusion_reaction/advection_diffusion_reaction_elements.cc	(revision 258)
+++ src/advection_diffusion_reaction/advection_diffusion_reaction_elements.cc	(working copy)
@@ -369,7 +369,7 @@
 //======================================================================
 template <unsigned NREAGENT, unsigned DIM>
 void  AdvectionDiffusionReactionEquations<NREAGENT,DIM>::
-output(std::ostream &outfile, const unsigned &nplot)
+output(std::ostream &outfile, const unsigned &nplot) const
 { 
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -426,7 +426,7 @@
 //======================================================================
 template <unsigned NREAGENT,unsigned DIM>
 void AdvectionDiffusionReactionEquations<NREAGENT,DIM>::
-output(FILE* file_pt, const unsigned &nplot)
+output(FILE* file_pt, const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(DIM);
@@ -528,7 +528,7 @@
 void AdvectionDiffusionReactionEquations<NREAGENT,DIM>::
 compute_error(std::ostream &outfile, 
               FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-              double& error, double& norm)
+              double& error, double& norm) const
 { 
  
  // Initialise
Index: src/advection_diffusion_reaction/advection_diffusion_reaction_elements.h
===================================================================
--- src/advection_diffusion_reaction/advection_diffusion_reaction_elements.h	(revision 258)
+++ src/advection_diffusion_reaction/advection_diffusion_reaction_elements.h	(working copy)
@@ -197,7 +197,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -205,11 +205,11 @@
 
  /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
  /// nplot^DIM plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot=5;
    output(file_pt,n_plot);
@@ -217,7 +217,7 @@
 
  /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
  /// n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: x,y,u_exact or x,y,z,u_exact at nplot^DIM plot points
@@ -230,7 +230,7 @@
  /// keep intel compiler happy)
  virtual void output_fct(std::ostream &outfile, const unsigned &nplot,
                          const double& time, 
-  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+  FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {
    throw OomphLibError(
     "There is no time-dependent output_fct() for Advection Diffusion elements",
@@ -242,14 +242,14 @@
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
-                    exact_soln_pt, double& error, double& norm);
+                    exact_soln_pt, double& error, double& norm) const;
 
 
  /// Dummy, time dependent error checker
  void compute_error(std::ostream &outfile, 
                     FiniteElement::UnsteadyExactSolutionFctPt 
                     exact_soln_pt,
-                    const double& time, double& error, double& norm)
+                    const double& time, double& error, double& norm) const
   {
    throw OomphLibError(
     "No time-dependent compute_error() for Advection Diffusion elements",
@@ -644,25 +644,25 @@
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {AdvectionDiffusionReactionEquations<NREAGENT,DIM>::output(outfile);}
  
  /// \short Output function:  
  ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {AdvectionDiffusionReactionEquations<NREAGENT,DIM>::output(outfile,n_plot);}
 
 
  /// \short C-style output function:  
  ///  x,y,u   or    x,y,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    AdvectionDiffusionReactionEquations<NREAGENT,DIM>::output(file_pt);
   }
 
  ///  \short C-style output function:  
  ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    AdvectionDiffusionReactionEquations<NREAGENT,DIM>::output(file_pt,n_plot);
   }
Index: src/spherical_navier_stokes/spherical_navier_stokes_elements.cc
===================================================================
--- src/spherical_navier_stokes/spherical_navier_stokes_elements.cc	(revision 258)
+++ src/spherical_navier_stokes/spherical_navier_stokes_elements.cc	(working copy)
@@ -146,7 +146,7 @@
  compute_error(std::ostream &outfile,
                FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                const double& time,
-               double& error, double& norm)
+               double& error, double& norm) const
  {
   error=0.0;
   norm=0.0;
@@ -226,7 +226,7 @@
   std::ostream &outfile,
   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
   double& error, 
-  double& norm)
+  double& norm) const
  {
   
   error=0.0;
@@ -308,7 +308,7 @@
   double& u_error, 
   double& u_norm, 
   double& p_error, 
-  double& p_norm)
+  double& p_norm) const
  {	
   u_error = 0.0;
   p_error = 0.0;
@@ -458,7 +458,7 @@
 // Output the shear stress at the outer wall of a rotating chamber.
 //======================================================================
 void SphericalNavierStokesEquations::
-compute_shear_stress(std::ostream &outfile)
+compute_shear_stress(std::ostream &outfile) const
 { 
  //Vector of local coordinates
  Vector<double> s(2);
@@ -502,7 +502,7 @@
 // Output given velocity values and shear stress along a specific 
 // section of a rotating chamber.
 //======================================================================
-void SphericalNavierStokesEquations::extract_velocity(std::ostream &outfile)
+void SphericalNavierStokesEquations::extract_velocity(std::ostream &outfile) const
 { 
  //Vector of local coordinates
  Vector<double> s(2);
@@ -590,7 +590,7 @@
 void SphericalNavierStokesEquations::
 output_fct(std::ostream &outfile, 
            const unsigned &nplot, 
-           FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+           FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -651,7 +651,7 @@
 output_fct(std::ostream &outfile,
            const unsigned &nplot, 
            const double& time,
-           FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+           FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -709,7 +709,7 @@
 //==============================================================
 void SphericalNavierStokesEquations::output_veloc(std::ostream& outfile, 
                                                   const unsigned& nplot, 
-                                                  const unsigned& t)
+                                                  const unsigned& t) const
 {
  
  //Find number of nodes
@@ -779,7 +779,7 @@
 /// coordinate direction.
 //==============================================================
 void SphericalNavierStokesEquations::output(std::ostream &outfile, 
-                                            const unsigned &nplot)
+                                            const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -846,7 +846,7 @@
 /// coordinate direction.
 //==============================================================
 void SphericalNavierStokesEquations::output(FILE* file_pt,
-                                            const unsigned &nplot)
+                                            const unsigned &nplot) const
 {
  
  //Vector of local coordinates
@@ -893,7 +893,7 @@
 /// coordinate direction 
 //==============================================================
 void SphericalNavierStokesEquations::full_output(std::ostream &outfile, 
-                                                 const unsigned &nplot)
+                                                 const unsigned &nplot) const
 {
 
  throw OomphLibError("Probably Broken",
@@ -1024,7 +1024,7 @@
 //==============================================================
 void SphericalNavierStokesEquations::
 output_vorticity(std::ostream &outfile, 
-                 const unsigned &nplot) 
+                 const unsigned &nplot) const
 {
 
  //Vector of local coordinates
Index: src/spherical_navier_stokes/spherical_navier_stokes_elements.h
===================================================================
--- src/spherical_navier_stokes/spherical_navier_stokes_elements.h	(revision 258)
+++ src/spherical_navier_stokes/spherical_navier_stokes_elements.h	(working copy)
@@ -431,7 +431,7 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -439,11 +439,11 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
  /// \short C-style output function: x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned nplot=5;
    output(file_pt,nplot);
@@ -451,12 +451,12 @@
 
  /// \short C-style output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(FILE* file_pt, const unsigned &nplot);
+ void output(FILE* file_pt, const unsigned &nplot) const;
 
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. Default number of plot points
- void full_output(std::ostream &outfile) 
+ void full_output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    full_output(outfile,nplot);
@@ -465,33 +465,33 @@
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. nplot points in each coordinate direction
- void full_output(std::ostream &outfile, const unsigned &nplot);
+ void full_output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// \short Output function: x,y,[z],u,v,[w] in tecplot format.
  /// nplot points in each coordinate direction at timestep t
  /// (t=0: present; t>0: previous timestep)
  void output_veloc(std::ostream &outfile, const unsigned &nplot, 
-                   const unsigned& t);
+                   const unsigned& t) const;
 
 
  /// \short Output function: x,y,[z], [omega_x,omega_y,[and/or omega_z]] 
  /// in tecplot format. nplot points in each coordinate direction
  void output_vorticity(std::ostream &outfile, 
-                       const unsigned &nplot);
+                       const unsigned &nplot) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given number of plot points. Function prints as
  /// many components as are returned in solution Vector
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given time and at a given number of plot points.
  /// Function prints as many components as are returned in solution Vector.
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Validate against exact solution at given time
  /// Solution is provided via function pointer.
@@ -500,7 +500,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
  /// \short Validate against exact solution.
  /// Solution is provided via function pointer.
@@ -508,7 +508,7 @@
  /// and L2 norm of velocity solution over element
  void compute_error(std::ostream &outfile,
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
                     
  /// Validate against exact solution.
  /// Solution is provided direct from exact_soln function.
@@ -520,16 +520,16 @@
                       FiniteElement::SteadyExactSolutionFctPt 
                       exact_soln_dtheta_pt,
                       double& u_error, double& u_norm, 
-                      double& p_error, double& p_norm);
+                      double& p_error, double& p_norm) const;
  
  // Listing for the shear stress function
- void compute_shear_stress(std::ostream &outfile);
+ void compute_shear_stress(std::ostream &outfile) const;
  
  // Listing for the velocity extraction function
- void extract_velocity(std::ostream &outfile);
+ void extract_velocity(std::ostream &outfile) const;
  
  // Calculate the analytic solution at the point x and output a vector
- Vector<double> actual (const Vector<double> &x)
+ Vector<double> actual (const Vector<double> &x) const
   { 
    const double Re = this->re();
    
@@ -823,33 +823,33 @@
   std::set<std::pair<Data*,unsigned> > &paired_pressure_data);
  
  /// Redirect output to SphericalNavierStokesEquations output
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {SphericalNavierStokesEquations::output(outfile);}
 
  /// Redirect output to SphericalNavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {SphericalNavierStokesEquations::output(outfile,nplot);}
 
 
  /// Redirect output to SphericalNavierStokesEquations output
- void output(FILE* file_pt) 
+ void output(FILE* file_pt) const
   {SphericalNavierStokesEquations::output(file_pt);}
 
  /// Redirect output to SphericalNavierStokesEquations output
- void output(FILE* file_pt, const unsigned &nplot)
+ void output(FILE* file_pt, const unsigned &nplot) const
   {SphericalNavierStokesEquations::output(file_pt,nplot);}
 
 
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. Default number of plot points
- void full_output(std::ostream &outfile)
+ void full_output(std::ostream &outfile) const
   {SphericalNavierStokesEquations::full_output(outfile);}
 
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. nplot points in each coordinate direction
- void full_output(std::ostream &outfile, const unsigned &nplot)
+ void full_output(std::ostream &outfile, const unsigned &nplot) const
   {SphericalNavierStokesEquations::full_output(outfile,nplot);}
 
 
@@ -1087,18 +1087,18 @@
   }
 
  /// Redirect output to SphericalNavierStokesEquations output
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {SphericalNavierStokesEquations::output(outfile);}
 
  /// Redirect output to SphericalNavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {SphericalNavierStokesEquations::output(outfile,nplot);}
 
  /// Redirect output to SphericalNavierStokesEquations output
- void output(FILE* file_pt) {SphericalNavierStokesEquations::output(file_pt);}
+ void output(FILE* file_pt) const {SphericalNavierStokesEquations::output(file_pt);}
 
  /// Redirect output to SphericalNavierStokesEquations output
- void output(FILE* file_pt, const unsigned &nplot)
+ void output(FILE* file_pt, const unsigned &nplot) const
   {SphericalNavierStokesEquations::output(file_pt,nplot);}
 
  
Index: src/polar_navier_stokes/polar_fluid_traction_elements.h
===================================================================
--- src/polar_navier_stokes/polar_fluid_traction_elements.h	(revision 258)
+++ src/polar_navier_stokes/polar_fluid_traction_elements.h	(working copy)
@@ -221,10 +221,10 @@
   }
  
  ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
-void output(std::ostream &outfile, const unsigned &nplot)
+void output(std::ostream &outfile, const unsigned &nplot) const
  {FiniteElement::output(outfile,nplot);}
 
  /// local velocities
Index: src/polar_navier_stokes/polar_stress_integral_elements.h
===================================================================
--- src/polar_navier_stokes/polar_stress_integral_elements.h	(revision 258)
+++ src/polar_navier_stokes/polar_stress_integral_elements.h	(working copy)
@@ -151,10 +151,10 @@
   }
  
  ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
 ///Output function: x,y,[z],u,v,[w],p in tecplot format
-void output(std::ostream &outfile, const unsigned &nplot)
+void output(std::ostream &outfile, const unsigned &nplot) const
  {FiniteElement::output(outfile,nplot);}
 
  /// local velocities
Index: src/polar_navier_stokes/polar_navier_stokes_elements.cc
===================================================================
--- src/polar_navier_stokes/polar_navier_stokes_elements.cc	(revision 258)
+++ src/polar_navier_stokes/polar_navier_stokes_elements.cc	(working copy)
@@ -38,7 +38,7 @@
 compute_error(std::ostream &outfile,
               FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
               const double& time,
-              double& error, double& norm)
+              double& error, double& norm) const
 {
    error=0.0;
    norm=0.0;
@@ -115,7 +115,7 @@
 //=======================================================================
 void PolarNavierStokesEquations::compute_error(std::ostream &outfile,
                                       FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                                      double& error, double& norm)
+                                      double& error, double& norm) const
 {
  
    error=0.0;
@@ -193,7 +193,7 @@
 //=======================================================================
 void PolarNavierStokesEquations::output_fct(std::ostream &outfile, 
                                    const unsigned &nplot, 
-                                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                                   FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -250,7 +250,7 @@
 void PolarNavierStokesEquations::output_fct(std::ostream &outfile,
                                    const unsigned &nplot, 
                                    const double& time,
-                                   FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                                   FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 {
  
  //Vector of local coordinates
@@ -310,7 +310,7 @@
 //==============================================================
 void PolarNavierStokesEquations::output_veloc(std::ostream& outfile, 
                                      const unsigned& nplot, 
-                                     const unsigned& t)
+                                     const unsigned& t) const
 {
 
  //Find number of nodes
@@ -379,7 +379,7 @@
 /// coordinate direction.
 //==============================================================
 void PolarNavierStokesEquations::output(std::ostream &outfile, 
-                               const unsigned &nplot)
+                               const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -540,7 +540,7 @@
 /// coordinate direction.
 //==============================================================
 void PolarNavierStokesEquations::output(FILE* file_pt,
-                                        const unsigned &nplot)
+                                        const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -588,7 +588,7 @@
 /// coordinate direction 
 //==============================================================
 void PolarNavierStokesEquations::full_output(std::ostream &outfile, 
-                                    const unsigned &nplot)
+                                    const unsigned &nplot) const
 {
 
  //Vector of local coordinates
Index: src/polar_navier_stokes/polar_navier_stokes_elements.h
===================================================================
--- src/polar_navier_stokes/polar_navier_stokes_elements.h	(revision 258)
+++ src/polar_navier_stokes/polar_navier_stokes_elements.h	(working copy)
@@ -377,7 +377,7 @@
 
  /// \short Output functionget_vels(const Vector<double>& x_to_get, Vector<double>& vels): x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    output(outfile,nplot);
@@ -385,11 +385,11 @@
 
  /// \short Output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
  /// \short C-style output function: x,y,[z],u,v,[w],p
  /// in tecplot format. Default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned nplot=5;
    output(file_pt,nplot);
@@ -397,12 +397,12 @@
 
  /// \short C-style output function: x,y,[z],u,v,[w],p
  /// in tecplot format. nplot points in each coordinate direction
- void output(FILE* file_pt, const unsigned &nplot);
+ void output(FILE* file_pt, const unsigned &nplot) const;
 
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. Default number of plot points
- void full_output(std::ostream &outfile)
+ void full_output(std::ostream &outfile) const
   {
    unsigned nplot=5;
    full_output(outfile,nplot);
@@ -411,27 +411,27 @@
  /// \short Full output function: 
  /// x,y,[z],u,v,[w],p,du/dt,dv/dt,[dw/dt],dissipation
  /// in tecplot format. nplot points in each coordinate direction
- void full_output(std::ostream &outfile, const unsigned &nplot);
+ void full_output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// \short Output function: x,y,[z],u,v,[w] in tecplot format.
  /// nplot points in each coordinate direction at timestep t
  /// (t=0: present; t>0: previous timestep)
  void output_veloc(std::ostream &outfile, const unsigned &nplot, 
-                   const unsigned& t);
+                   const unsigned& t) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given number of plot points. Function prints as
  /// many components as are returned in solution Vector
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Output exact solution specified via function pointer
  /// at a given time and at a given number of plot points.
  /// Function prints as many components as are returned in solution Vector.
  void output_fct(std::ostream &outfile, const unsigned &nplot, 
                  const double& time,
-                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt);
+                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const;
 
  /// \short Validate against exact solution at given time
  /// Solution is provided via function pointer.
@@ -440,7 +440,7 @@
  void compute_error(std::ostream &outfile,
                     FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                     const double& time,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
  /// \short Validate against exact solution.
  /// Solution is provided via function pointer.
@@ -448,7 +448,7 @@
  /// and L2 norm of velocity solution over element
  void compute_error(std::ostream &outfile,
                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                    double& error, double& norm);
+                    double& error, double& norm) const;
 
  /// Compute the element's residual Vector
  void fill_in_contribution_to_residuals(Vector<double> &residuals)
@@ -733,18 +733,18 @@
  void get_load_data(std::set<std::pair<Data*,unsigned> > &paired_load_data);
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) {PolarNavierStokesEquations::output(outfile);}
+ void output(std::ostream &outfile) const {PolarNavierStokesEquations::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &Nplot)
+ void output(std::ostream &outfile, const unsigned &Nplot) const
   {PolarNavierStokesEquations::output(outfile,Nplot);}
 
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) {PolarNavierStokesEquations::output(file_pt);}
+ void output(FILE* file_pt) const {PolarNavierStokesEquations::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &Nplot)
+ void output(FILE* file_pt, const unsigned &Nplot) const
   {PolarNavierStokesEquations::output(file_pt,Nplot);}
 
 
@@ -946,17 +946,17 @@
  void get_load_data(std::set<std::pair<Data*,unsigned> > &paired_load_data);
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile) {PolarNavierStokesEquations::output(outfile);}
+ void output(std::ostream &outfile) const {PolarNavierStokesEquations::output(outfile);}
 
  /// Redirect output to NavierStokesEquations output
- void output(std::ostream &outfile, const unsigned &Nplot)
+ void output(std::ostream &outfile, const unsigned &Nplot) const
   {PolarNavierStokesEquations::output(outfile,Nplot);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt) {PolarNavierStokesEquations::output(file_pt);}
+ void output(FILE* file_pt) const {PolarNavierStokesEquations::output(file_pt);}
 
  /// Redirect output to NavierStokesEquations output
- void output(FILE* file_pt, const unsigned &Nplot)
+ void output(FILE* file_pt, const unsigned &Nplot) const
   {PolarNavierStokesEquations::output(file_pt,Nplot);}
 
 
Index: src/rigid_body/immersed_rigid_body_elements.cc
===================================================================
--- src/rigid_body/immersed_rigid_body_elements.cc	(revision 258)
+++ src/rigid_body/immersed_rigid_body_elements.cc	(working copy)
@@ -108,7 +108,7 @@
 /// Output the position of the centre of gravity including velocities
 /// and accelerations
 //======================================================================
- void ImmersedRigidBodyElement::output_centre_of_gravity(std::ostream& outfile)
+ void ImmersedRigidBodyElement::output_centre_of_gravity(std::ostream& outfile) const
  {
   // Get timestepper
   TimeStepper* time_stepper_pt=
Index: src/rigid_body/immersed_rigid_body_elements.h
===================================================================
--- src/rigid_body/immersed_rigid_body_elements.h	(revision 258)
+++ src/rigid_body/immersed_rigid_body_elements.h	(working copy)
@@ -254,7 +254,7 @@
   }
 
   /// Output position velocity and acceleration of centre of gravity
-  void output_centre_of_gravity(std::ostream& outfile);
+  void output_centre_of_gravity(std::ostream& outfile) const;
 
   /// Get the contribution to the residuals
   void fill_in_contribution_to_residuals(Vector<double>& residuals)
Index: src/spherical_advection_diffusion/refineable_spherical_advection_diffusion_elements.h
===================================================================
--- src/spherical_advection_diffusion/refineable_spherical_advection_diffusion_elements.h	(revision 258)
+++ src/spherical_advection_diffusion/refineable_spherical_advection_diffusion_elements.h	(working copy)
@@ -203,7 +203,7 @@
  /// information
  void dinterpolated_u_adv_diff_ddata(const Vector<double> &s,
                                      Vector<double> &du_ddata,
-                                     Vector<unsigned> &global_eqn_number)
+                                     Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    unsigned n_node = this->nnode();
Index: src/spherical_advection_diffusion/spherical_advection_diffusion_elements.cc
===================================================================
--- src/spherical_advection_diffusion/spherical_advection_diffusion_elements.cc	(revision 258)
+++ src/spherical_advection_diffusion/spherical_advection_diffusion_elements.cc	(working copy)
@@ -248,7 +248,7 @@
 /// nplot points in each coordinate direction
 //======================================================================
 void SphericalAdvectionDiffusionEquations::output(std::ostream &outfile, 
-                                                     const unsigned &nplot)
+                                                     const unsigned &nplot) const
 { 
  //Vector of local coordinates
  Vector<double> s(2);
@@ -305,7 +305,7 @@
 //======================================================================
 //template <unsigned DIM>
 void SphericalAdvectionDiffusionEquations::output(FILE* file_pt,
-                                                     const unsigned &nplot)
+                                                     const unsigned &nplot) const
 {
  //Vector of local coordinates
  Vector<double> s(2);
@@ -349,7 +349,7 @@
 //template <unsigned DIM>
 void SphericalAdvectionDiffusionEquations::output_fct(std::ostream &outfile, 
                                                          const unsigned &nplot, 
-                                                         FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                                                         FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
 
    //Vector of local coordinates
@@ -404,7 +404,7 @@
  std::ostream &outfile, 
  FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
  double& error,
- double& norm)
+ double& norm) const
 { 
  
  //Initialise
Index: src/spherical_advection_diffusion/spherical_advection_diffusion_elements.h
===================================================================
--- src/spherical_advection_diffusion/spherical_advection_diffusion_elements.h	(revision 258)
+++ src/spherical_advection_diffusion/spherical_advection_diffusion_elements.h	(working copy)
@@ -135,7 +135,7 @@
 
 
  /// Output with default number of plot points
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    unsigned nplot = 5;
    output(outfile,nplot);
@@ -143,11 +143,11 @@
 
  /// \short Output FE representation of soln: r,z,u  at 
  /// nplot^2 plot points
- void output(std::ostream &outfile, const unsigned &nplot);
+ void output(std::ostream &outfile, const unsigned &nplot) const;
 
 
  /// C_style output with default number of plot points
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    unsigned n_plot = 5;
    output(file_pt,n_plot);
@@ -155,20 +155,20 @@
 
  /// \short C-style output FE representation of soln: r,z,u  at 
  /// n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// Output exact soln: r,z,u_exact at nplot^2 plot points
  void output_fct(std::ostream &outfile, 
                  const unsigned &nplot, 
                  FiniteElement::SteadyExactSolutionFctPt 
-                 exact_soln_pt);
+                 exact_soln_pt) const;
 
  /// Get error against and norm of exact solution
  void compute_error(std::ostream &outfile, 
                     FiniteElement::SteadyExactSolutionFctPt 
                     exact_soln_pt, double& error, 
-                    double& norm);
+                    double& norm) const;
 
  /// Access function: Pointer to source function
  inline SphericalAdvectionDiffusionSourceFctPt& source_fct_pt() 
@@ -358,7 +358,7 @@
  virtual void dinterpolated_u_adv_diff_ddata(
   const Vector<double> &s, 
   Vector<double> &du_ddata,
-  Vector<unsigned> &global_eqn_number)
+  Vector<unsigned> &global_eqn_number) const
   {
    //Find number of nodes
    const unsigned n_node = nnode();
@@ -515,14 +515,14 @@
 
  /// \short Output function:  
  ///  r,z,u
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    SphericalAdvectionDiffusionEquations::output(outfile);
   }
 
  /// \short Output function:  
  ///  r,z,u  at n_plot^2 plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    SphericalAdvectionDiffusionEquations::output(outfile,n_plot);
   }
@@ -530,14 +530,14 @@
 
  /// \short C-style output function:  
  ///  r,z,u
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {
    SphericalAdvectionDiffusionEquations::output(file_pt);
   }
 
  ///  \short C-style output function:  
  ///   r,z,u at n_plot^2 plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {
    SphericalAdvectionDiffusionEquations::output(file_pt,n_plot);
   }
@@ -546,7 +546,7 @@
  ///  r,z,u_exact at n_plot^2 plot points
  void output_fct(std::ostream &outfile, 
                  const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
    SphericalAdvectionDiffusionEquations::output_fct(outfile,n_plot,exact_soln_pt);
   }
@@ -766,14 +766,14 @@
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile) 
+ void output(std::ostream &outfile) const
   {
    FiniteElement::output(outfile);
   }
 
  /// \short Output function -- forward to broken version in FiniteElement
  /// until somebody decides what exactly they want to plot here...
- void output(std::ostream &outfile, const unsigned &nplot)
+ void output(std::ostream &outfile, const unsigned &nplot) const
   {
    FiniteElement::output(outfile,nplot);
   }
Index: src/generic/double_vector.h
===================================================================
--- src/generic/double_vector.h	(revision 258)
+++ src/generic/double_vector.h	(working copy)
@@ -248,10 +248,10 @@
  double* values_pt() const {return Values_pt;}
 
  /// output the contents of the vector
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// output the contents of the vector
- void output(std::string filename)
+ void output(std::string filename) const
   {
     // Open file
     std::ofstream some_file;
Index: src/generic/matrices.h
===================================================================
--- src/generic/matrices.h	(revision 258)
+++ src/generic/matrices.h	(working copy)
@@ -158,7 +158,7 @@
  /// to the stream outfile.
  /// Broken virtual since it might not be sensible to implement this for 
  /// some sparse matrices.
- virtual void output(std::ostream &outfile)
+ virtual void output(std::ostream &outfile) const
   {
    throw OomphLibError(
     "Output function is not implemented for this matrix class",
@@ -168,7 +168,7 @@
 
  /// \short Indexed output function to print a matrix to the 
  /// stream outfile as i,j,a(i,j) for a(i,j)!=0 only
- virtual void sparse_indexed_output(std::ostream &outfile)=0;
+ virtual void sparse_indexed_output(std::ostream &outfile) const=0;
 
 };
 
@@ -438,26 +438,26 @@
   {for(unsigned long i=0;i<(N*M);++i) {Matrixdata[i] = val;}}
  
  /// Output function to print a matrix row-by-row to the stream outfile
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
  
  /// Output function to print a matrix row-by-row to a file. Specify filename.
- void output(std::string filename);
+ void output(std::string filename) const;
 
  /// \short Indexed output function to print a matrix to the 
  /// stream outfile as i,j,a(i,j)
- void indexed_output(std::ostream &outfile);
+ void indexed_output(std::ostream &outfile) const;
 
  /// \short Indexed output function to print a matrix to a
  /// file as i,j,a(i,j). Specify filename.
- void indexed_output(std::string filename);
+ void indexed_output(std::string filename) const;
 
  /// \short Indexed output function to print a matrix to the 
  /// stream outfile as i,j,a(i,j) for a(i,j)!=0 only
- void sparse_indexed_output(std::ostream &outfile);
+ void sparse_indexed_output(std::ostream &outfile) const;
  
  /// \short Indexed output function to print a matrix to a 
  /// file as i,j,a(i,j) for a(i,j)!=0 only. Specify filename.
- void sparse_indexed_output(std::string filename);
+ void sparse_indexed_output(std::string filename) const;
 
 };
 
@@ -544,7 +544,7 @@
   
   /// \short Indexed output function to print a matrix to the
   /// stream outfile as i,j,a(i,j) for a(i,j)!=0 only
-  virtual void sparse_indexed_output(std::ostream &outfile)
+  virtual void sparse_indexed_output(std::ostream &outfile) const
    {
     std::string error_message = 
      "SparseMatrix::sparse_indexed_output() is a virtual function.\n";
@@ -558,7 +558,7 @@
   
   /// \short Indexed output function to print a matrix to a
   /// file as i,j,a(i,j) for a(i,j)!=0 only. Specify filename.
-  void sparse_indexed_output(std::string filename)
+  void sparse_indexed_output(std::string filename) const
    {
     // Open file
     std::ofstream some_file;
@@ -702,7 +702,7 @@
 
  /// \short Indexed output function to print a matrix to the
  /// stream outfile as i,j,a(i,j) for a(i,j)!=0 only
- void sparse_indexed_output(std::ostream &outfile)
+ void sparse_indexed_output(std::ostream &outfile) const
   {
    for (unsigned long i=0;i<this->N;i++)
     {
@@ -717,7 +717,7 @@
 
  /// \short Indexed output function to print a matrix to a
  /// file as i,j,a(i,j) for a(i,j)!=0 only. Specify filename.
- void sparse_indexed_output(std::string filename)
+ void sparse_indexed_output(std::string filename) const
   {
    // Open file
    std::ofstream some_file;
@@ -856,14 +856,14 @@
 
  /// \short Indexed output function to print a matrix to the 
  /// stream outfile as i,j,a(i,j) for a(i,j)!=0 only
- void sparse_indexed_output(std::ostream &outfile)
+ void sparse_indexed_output(std::ostream &outfile) const
   {
    CR_matrix.sparse_indexed_output(outfile);
   }
 
   /// \short Indexed output function to print a matrix to a
   /// file as i,j,a(i,j) for a(i,j)!=0 only. Specify filename.
-  void sparse_indexed_output(std::string filename)
+  void sparse_indexed_output(std::string filename) const
    {
     // Open file
     std::ofstream some_file;
@@ -876,7 +876,7 @@
   /// \short Indexed output function to print a matrix to a
   /// file as i,j,a(i,j) for a(i,j)!=0 only. Specify filename.
   /// This uses acual global row numbers.
-  void sparse_indexed_output_with_offset(std::string filename)
+  void sparse_indexed_output_with_offset(std::string filename) const
    {
     
     // Get offset
@@ -2273,7 +2273,7 @@
 
  /// Read-write access is not permitted for these matrices and is
  /// deliberately broken.
- T& entry(const unsigned long &i, const unsigned long &j)
+ T& entry(const unsigned long &i, const unsigned long &j) const
   {
    std::string error_string =
     "Non-const access not provided for the CCMatrix<T> class\n";
@@ -2307,7 +2307,7 @@
 
  /// \short Indexed output function to print a matrix to the
  /// stream outfile as i,j,a(i,j) for a(i,j)!=0 only
- void sparse_indexed_output(std::ostream &outfile)
+ void sparse_indexed_output(std::ostream &outfile) const
   {
    for (unsigned long j=0;j<this->N;j++)
     {
@@ -2322,7 +2322,7 @@
 
  /// \short Indexed output function to print a matrix to a
  /// file as i,j,a(i,j) for a(i,j)!=0 only. Specify filename.
- void sparse_indexed_output(std::string filename)
+ void sparse_indexed_output(std::string filename) const
   {
    // Open file
    std::ofstream some_file;
@@ -2637,7 +2637,7 @@
 /// Output function to print a matrix row-by-row to the stream outfile
 //============================================================================
 template<class T>
-void DenseMatrix<T>::output(std::ostream &outfile)
+void DenseMatrix<T>::output(std::ostream &outfile) const
 {
  //Loop over the rows
  for(unsigned i=0;i<N;i++)
@@ -2658,7 +2658,7 @@
 /// Output function to print a matrix row-by-row to a file. Specify filename.
 //============================================================================
 template<class T>
-void DenseMatrix<T>::output(std::string filename)
+void DenseMatrix<T>::output(std::string filename) const
 {
  // Open file
  std::ofstream some_file;
@@ -2674,7 +2674,7 @@
 /// Indexed output as i,j,a(i,j)
 //============================================================================
 template<class T>
-void DenseMatrix<T>::indexed_output(std::ostream &outfile)
+void DenseMatrix<T>::indexed_output(std::ostream &outfile) const
 {
  //Loop over the rows
  for(unsigned i=0;i<N;i++)
@@ -2694,7 +2694,7 @@
 /// file as i,j,a(i,j). Specify filename.
 //============================================================================
 template<class T>
-void DenseMatrix<T>::indexed_output(std::string filename)
+void DenseMatrix<T>::indexed_output(std::string filename) const
 {
  // Open file
  std::ofstream some_file;
@@ -2709,7 +2709,7 @@
 /// Sparse indexed output as i,j,a(i,j) for a(i,j)!=0 only
 //============================================================================
 template<class T>
-void DenseMatrix<T>::sparse_indexed_output(std::ostream &outfile)
+void DenseMatrix<T>::sparse_indexed_output(std::ostream &outfile) const
 {
  //Loop over the rows
  for(unsigned i=0;i<N;i++)
@@ -2732,7 +2732,7 @@
 /// file as i,j,a(i,j) for a(i,j)!=0 only. Specify filename.
 //============================================================================
 template<class T>
-void DenseMatrix<T>::sparse_indexed_output(std::string filename)
+void DenseMatrix<T>::sparse_indexed_output(std::string filename) const
 {
  // Open file
  std::ofstream some_file;
Index: src/generic/domain.h
===================================================================
--- src/generic/domain.h	(revision 258)
+++ src/generic/domain.h	(working copy)
@@ -100,16 +100,22 @@
    return  Macro_element_pt[i];
   }
 
+ /// \short Access to i-th macro element const version
+ MacroElement* macro_element_pt(const unsigned& i) const
+  {
+   return  Macro_element_pt[i];
+  }
 
+
  /// Number of macro elements in domain
- unsigned nmacro_element()
+ unsigned nmacro_element() const
   {
    return  Macro_element_pt.size();
   }
 
 
  /// Output macro elements
- void output(std::ostream &outfile, const unsigned& nplot)
+ void output(std::ostream &outfile, const unsigned& nplot) const
   {
    unsigned nmacro=Macro_element_pt.size();
    for (unsigned i_macro=0;i_macro<nmacro;i_macro++)
@@ -143,7 +149,7 @@
  
  /// \short Output all macro element boundaries as tecplot zones
  void output_macro_element_boundaries(std::ostream &outfile, 
-                                      const unsigned& nplot)
+                                      const unsigned& nplot) const
   {
    // Loop over macro elements
    unsigned nmacro=nmacro_element();
Index: src/generic/macro_element.h
===================================================================
--- src/generic/macro_element.h	(revision 258)
+++ src/generic/macro_element.h	(working copy)
@@ -119,7 +119,7 @@
 
  /// \short Plot: x,y (or x,y,z) at current time in tecplot 
  /// format
- void output(std::ostream &outfile, const int& nplot)
+ void output(std::ostream &outfile, const int& nplot) const
   {
    unsigned t=0;
    output(t,outfile,nplot);
@@ -129,12 +129,12 @@
  /// \short Plot: x,y (or x,y,z) in tecplot format at time level t
  ///  (t=0: current; t>0: previous)
  virtual void output(const unsigned & t, std::ostream &outfile, 
-                     const unsigned& nplot)=0;
+                     const unsigned& nplot) const=0;
 
 
 
  /// The mapping from local to global coordinates at the current time : r(s)
- void macro_map(const Vector<double>& s, Vector<double>& r)
+ void macro_map(const Vector<double>& s, Vector<double>& r)  const
  {
    // Evaluate at current timestep
    unsigned t=0;
@@ -145,11 +145,11 @@
  ///\short The time-dependent mapping from local to global coordinates: r(t,s).
  /// t is the discrete timelevel: t=0: current time; t>0: previous timestep.
  virtual void macro_map(const unsigned& t, const Vector<double>& s, 
-                        Vector<double>& r)=0;
+                        Vector<double>& r) const=0;
 
  /// \short Output all macro element boundaries as tecplot zones
  virtual void output_macro_element_boundaries(std::ostream &outfile, 
-                                              const unsigned& nplot)=0;
+                                              const unsigned& nplot) const=0;
 
 
  ///\short the jacobian of the mapping from the macro coordinates to the global
@@ -307,7 +307,7 @@
 
  /// \short Plot: x,y in tecplot format at time level t (t=0: current;
  /// t>0: previous)
- void output(const unsigned& t, std::ostream &outfile, const unsigned& nplot)
+ void output(const unsigned& t, std::ostream &outfile, const unsigned& nplot) const
   {
    Vector<double> x(2),f(2);
    outfile << "ZONE I=" << nplot << ", J=" << nplot << std::endl;
@@ -326,13 +326,13 @@
  
  /// \short Output all macro element boundaries as tecplot zones
  void output_macro_element_boundaries(std::ostream &outfile, 
-                                      const unsigned& nplot);
+                                      const unsigned& nplot) const;
 
  /// \short Get global position r(S) at discrete time level t.
  /// t=0: Present time; t>0: previous timestep.
  void macro_map(const unsigned& t,
                 const Vector<double>& S, 
-                Vector<double>& r);
+                Vector<double>& r) const;
 
 
  ///\short assemble the jacobian of the mapping from the macro coordinates to 
@@ -408,7 +408,7 @@
 
  /// \short Plot: x,y in tecplot format at time level t (t=0: current;
  /// t>0: previous)
- void output(const unsigned& t, std::ostream &outfile, const unsigned& nplot)
+ void output(const unsigned& t, std::ostream &outfile, const unsigned& nplot) const
   {
  
    Vector<double> x(3),f(3);
@@ -439,13 +439,13 @@
 
  /// \short Output all macro element boundaries as tecplot zones
  void output_macro_element_boundaries(std::ostream &outfile, 
-                                      const unsigned& nplot);
+                                      const unsigned& nplot) const;
 
  /// \short Get global position r(S) at discrete time level t.
  /// t=0: Present time; t>0: previous timestep.
  void macro_map(const unsigned& t,
                 const Vector<double>& S, 
-                Vector<double>& r);
+                Vector<double>& r) const;
 
 };
 
Index: src/generic/double_vector.cc
===================================================================
--- src/generic/double_vector.cc	(revision 258)
+++ src/generic/double_vector.cc	(working copy)
@@ -618,7 +618,7 @@
  //============================================================================
  /// output the contents of the vector
  //============================================================================
- void DoubleVector::output(std::ostream &outfile)
+ void DoubleVector::output(std::ostream &outfile) const
   {
    // temp pointer to values
    double* temp;
Index: src/generic/pseudosolid_node_update_elements.h
===================================================================
--- src/generic/pseudosolid_node_update_elements.h	(revision 258)
+++ src/generic/pseudosolid_node_update_elements.h	(working copy)
@@ -389,18 +389,18 @@
 
  
  ///Overload the output function: Call that of the basic element
- void output(std::ostream &outfile) {BASIC::output(outfile);}
+ void output(std::ostream &outfile) const {BASIC::output(outfile);}
 
  /// \short Output function: Plot at n_p plot points using the basic element's
  /// output function
- void output(std::ostream &outfile, const unsigned &n_p)
+ void output(std::ostream &outfile, const unsigned &n_p) const
   {BASIC::output(outfile,n_p);}
 
  ///Overload the output function: Call that of the basic element
- void output(FILE* file_pt) {BASIC::output(file_pt);}
+ void output(FILE* file_pt) const {BASIC::output(file_pt);}
 
  ///Output function is just the same as the basic equations
- void output(FILE* file_pt, const unsigned &n_p)
+ void output(FILE* file_pt, const unsigned &n_p) const
   {BASIC::output(file_pt,n_p);}
 
  /// \short Number of 'flux' terms for Z2 error estimation: Error estimation
@@ -447,7 +447,7 @@
  /// it here because it isn't obvious which classification we
  /// should use. This forces the user to re-implement this function
  /// if it's used
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return BASIC::ndof_types() + SOLID::ndof_types();
   }
@@ -1267,17 +1267,17 @@
  unsigned nrecovery_order() {return BASIC::nrecovery_order();}
 
  ///Overload the output function: Use that of the BASIC element
- void output(std::ostream &outfile) {BASIC::output(outfile);}
+ void output(std::ostream &outfile) const {BASIC::output(outfile);}
 
  ///Output function, plotting at n_p points: Use that of the BASIC element
- void output(std::ostream &outfile, const unsigned &n_p)
+ void output(std::ostream &outfile, const unsigned &n_p) const
   {BASIC::output(outfile,n_p);}
 
  ///Overload the output function: Use that of the BASIC element
- void output(FILE* file_pt) {BASIC::output(file_pt);}
+ void output(FILE* file_pt) const {BASIC::output(file_pt);}
 
  ///Output function: Use that of the BASIC element
-  void output(FILE* file_pt, const unsigned &n_p)
+  void output(FILE* file_pt, const unsigned &n_p) const
   {BASIC::output(file_pt,n_p);}
 
  /// \short The number of "blocks" that degrees of freedom in this element
@@ -1287,7 +1287,7 @@
  /// it here because it isn't obvious which classification we
  /// should use. This forces the user to re-implement this function
  /// if it's used
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return BASIC::ndof_types() + SOLID::ndof_types();
   }
Index: src/generic/Telements.h
===================================================================
--- src/generic/Telements.h	(revision 258)
+++ src/generic/Telements.h	(working copy)
@@ -243,7 +243,7 @@
 /// Return local coordinates of node j
 //=======================================================================
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
    {
     s.resize(1);
     switch (j)
@@ -317,7 +317,7 @@
 /// Return local coordinates of node j
 //=======================================================================
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
    {
     s.resize(1);
     switch (j)
@@ -400,7 +400,7 @@
 /// Return local coordinates of node j
 //=======================================================================
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
    {
     s.resize(1);
     switch (j)
@@ -493,7 +493,7 @@
 /// Return local coordinates of node j
 //=======================================================================
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
    {
     switch (j)
      {
@@ -583,7 +583,7 @@
 /// Return local coordinates of node j
 //=======================================================================
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
    {
     switch (j)
      {
@@ -722,7 +722,7 @@
 /// Return local coordinates of node j
 //=======================================================================
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
    {
     switch (j)
   {
@@ -930,7 +930,7 @@
 /// Return local coordinates of node j
 //=======================================================================
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
    {
     switch (j)
      {
@@ -1360,25 +1360,25 @@
  double s_max() const {return 1.0;}
 
  /// Return local coordinates of node j
- inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s)
+ inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s) const
   {TElementShape<1,NNODE_1D>::local_coordinate_of_node(j,s);}
 
   /// Output
-  void output(std::ostream &output);
+  void output(std::ostream &output) const;
 
   /// Output at specified number of plot points
-  void output(std::ostream &outfile, const unsigned &nplot);
+  void output(std::ostream &outfile, const unsigned &nplot) const;
 
  /// C-style output 
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// \short  Get vector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction").
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
   {
    if (nplot>1)
     {
@@ -1392,7 +1392,7 @@
  
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
  {
   std::ostringstream header;
   header << "ZONE I=" << nplot << "\n";
@@ -1401,7 +1401,7 @@
  
  /// Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {return nplot;}
 
  /// \short Build the lower-dimensional FaceElement (an element of type
@@ -1548,25 +1548,25 @@
  double s_max() const {return 1.0;}
 
  /// Return local coordinates of node j
- inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s)
+ inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s) const
   {TElementShape<2,NNODE_1D>::local_coordinate_of_node(j,s);}
 
   /// Output
-  void output(std::ostream &output);
+  void output(std::ostream &output) const;
 
   /// Output at specified number of plot points
-  void output(std::ostream &outfile, const unsigned &nplot);
+  void output(std::ostream &outfile, const unsigned &nplot) const;
 
  /// C-style output 
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// \short  Get vector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction").
  void get_s_plot(const unsigned& iplot, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
   {
    if (nplot>1)
     {
@@ -1594,7 +1594,7 @@
  
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
  {
   std::ostringstream header;
   unsigned nel=0;
@@ -1609,7 +1609,7 @@
  /// Empty by default -- can be used, e.g., to add FE connectivity
  /// lists to elements that need it.
  void write_tecplot_zone_footer(std::ostream& outfile, 
-                                const unsigned& nplot)
+                                const unsigned& nplot) const
   {
    //Output node lists for sub elements for Tecplot (node index 
    //must start at 1)
@@ -1639,7 +1639,7 @@
  /// Empty by default -- can be used, e.g., to add FE connectivity
  /// lists to elements that need it.
  void write_tecplot_zone_footer(FILE* file_pt,
-                                const unsigned& nplot)
+                                const unsigned& nplot) const
   {
    //Output node lists for sub elements for Tecplot (node index 
    //must start at 1)
@@ -1665,7 +1665,7 @@
  
  /// Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {
    unsigned np=0;
    for (unsigned i=1;i<=nplot;i++) {np+=i;}
@@ -1698,7 +1698,7 @@
 {
   public:
  void local_coordinate_of_node(const unsigned& j,
-                               Vector<double>& s)
+                               Vector<double>& s) const
   {
    switch (j)
     {
@@ -1820,7 +1820,7 @@
  {
    public:
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
 {
  switch (j)
   {
@@ -2092,7 +2092,7 @@
   unsigned n_enriched_nodes() {return 5;}
 
   void local_coordinate_of_node(const unsigned& j,
-                                Vector<double>& s)
+                                Vector<double>& s) const
 {
  switch (j)
   {
@@ -2900,25 +2900,25 @@
   double s_max() const {return 1.0;}
   
   /// Return local coordinates of node j
-  inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s)
+  inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s) const
    {TElementShape<3,NNODE_1D>::local_coordinate_of_node(j,s);}
 
   /// Output
-  void output(std::ostream &output);
+  void output(std::ostream &output) const;
   
   /// Output at specified number of plot points
-  void output(std::ostream &outfile, const unsigned &nplot);
+  void output(std::ostream &outfile, const unsigned &nplot) const;
   
   /// C-style output
-  void output(FILE* file_pt);
+  void output(FILE* file_pt) const;
   
   /// C_style output at n_plot points
-  void output(FILE* file_pt, const unsigned &n_plot);
+  void output(FILE* file_pt, const unsigned &n_plot) const;
   
   /// \short  Get vector of local coordinates of plot point i (when plotting
   /// nplot points in each "coordinate direction).
   void get_s_plot(const unsigned& iplot, const unsigned& nplot,
-                  Vector<double>& s)
+                  Vector<double>& s) const
   {
    if (nplot>1)
     {
@@ -2953,7 +2953,7 @@
 
   /// \short Return string for tecplot zone header (when plotting
   /// nplot points in each "coordinate direction)
-  std::string tecplot_zone_string(const unsigned& nplot)
+  std::string tecplot_zone_string(const unsigned& nplot) const
   {
    std::ostringstream header;
    unsigned nel=0;
@@ -2968,7 +2968,7 @@
   /// Empty by default -- can be used, e.g., to add FE connectivity
   /// lists to elements that need it.
   void write_tecplot_zone_footer(std::ostream& outfile,
-                                 const unsigned& nplot)
+                                 const unsigned& nplot) const
    {
     
     //Output node lists for sub elements for Tecplot (node index
@@ -3034,7 +3034,7 @@
  /// Empty by default -- can be used, e.g., to add FE connectivity
  /// lists to elements that need it.
   void write_tecplot_zone_footer(FILE* file_pt,
-                                 const unsigned& nplot)
+                                 const unsigned& nplot) const
    {
     //Output node lists for sub elements for Tecplot (node index
     //must start at 1)
@@ -3063,7 +3063,7 @@
       
  /// \short Return total number of plot points (when plotting
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot)
+ unsigned nplot_points(const unsigned& nplot) const
   { 
    unsigned res=0;
    if(nplot>1)
@@ -3219,7 +3219,7 @@
   {TBubbleEnrichedElementShape<DIM,3>::d2shape_local(s,psi,dpsids,d2psids);}
  
  /// Return local coordinates of node j
- inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s)
+ inline void local_coordinate_of_node(const unsigned& j,Vector<double>& s) const
   {TBubbleEnrichedElementShape<DIM,3>::local_coordinate_of_node(j,s);}
 
  /// \short Build the lower-dimensional FaceElement 
Index: src/generic/problem.cc
===================================================================
--- src/generic/problem.cc	(revision 258)
+++ src/generic/problem.cc	(working copy)
@@ -9637,7 +9637,7 @@
 /// Return the current value of continuous time. If not Time object
 /// has been assigned, then throw an error
 //======================================================================
-double& Problem::time()
+double& Problem::time() const
 {
  if(Time_pt==0) 
   {
@@ -9924,7 +9924,7 @@
 /// Dump refinement pattern of all refineable meshes and all  generic
 /// Problem data to file for restart. 
 //=========================================================================
-void Problem::dump(std::ofstream& dump_file)
+void Problem::dump(std::ofstream& dump_file) const
 {
 
  // Number of submeshes?
Index: src/generic/triangle_mesh.cc
===================================================================
--- src/generic/triangle_mesh.cc	(revision 258)
+++ src/generic/triangle_mesh.cc	(working copy)
@@ -1059,8 +1059,8 @@
 //=========================================================================
 TriangleMeshPolygon::TriangleMeshPolygon(const Vector<TriangleMeshPolyLine*>& 
                                          boundary_polyline_pt) :
- Boundary_polyline_pt(boundary_polyline_pt),    
- Enable_redistribution_of_segments_between_polylines(false)
+ Enable_redistribution_of_segments_between_polylines(false),
+ Boundary_polyline_pt(boundary_polyline_pt)
   {
    
 #ifdef PARANOID
Index: src/generic/dg_elements.h
===================================================================
--- src/generic/dg_elements.h	(revision 258)
+++ src/generic/dg_elements.h	(working copy)
@@ -71,7 +71,7 @@
   virtual inline unsigned flux_index(const unsigned &i) const {return i;}
 
   /// Set the number of flux components
-  virtual unsigned required_nflux() {return 0;}
+  virtual unsigned required_nflux() const {return 0;}
 
  public:
 
@@ -96,7 +96,7 @@
   void report_info();
 
   //Get the value of the unknowns
-  virtual void interpolated_u(const Vector<double> &s, Vector<double> &f);
+  virtual void interpolated_u(const Vector<double> &s, Vector<double> &f) const;
  
   ///\short Get the data that are used to interpolate the unkowns
   ///in the element. These must be returned in order.
@@ -189,7 +189,7 @@
  bool Can_delete_mass_matrix;
 
  /// Set the number of flux components
- virtual unsigned required_nflux() {return 0;}
+ virtual unsigned required_nflux() const {return 0;}
 
   public:
 
Index: src/generic/Qelements.h
===================================================================
--- src/generic/Qelements.h	(revision 258)
+++ src/generic/Qelements.h	(working copy)
@@ -549,7 +549,7 @@
   }
  
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& j, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& j, Vector<double>& s) const
   {
    s.resize(1);
    s[0]=this->s_min()+double(j)/double(NNODE_1D-1)*
@@ -582,22 +582,22 @@
  unsigned nnode_1d() const {return NNODE_1D;}
 
  /// Output 
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output 
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction).
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
   {
    if (nplot>1)
     {
@@ -611,7 +611,7 @@
 
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
  {
   std::ostringstream header;
   header << "ZONE I=" << nplot << "\n";
@@ -620,7 +620,7 @@
 
  /// \short Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {
    unsigned DIM=1;
    unsigned np=1;
@@ -763,7 +763,7 @@
  
 
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& j, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& j, Vector<double>& s) const
   {
    s.resize(2);
    unsigned j0=j%NNODE_1D;
@@ -801,22 +801,22 @@
  unsigned nnode_1d() const {return NNODE_1D;}
 
  /// Output
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output 
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction).
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
   {
    if (nplot>1)
     {
@@ -835,7 +835,7 @@
 
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
   {
    std::ostringstream header;
    header << "ZONE I=" << nplot << ", J=" << nplot << "\n";
@@ -844,7 +844,7 @@
 
  /// Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {
    unsigned DIM=2;
    unsigned np=1;
@@ -1002,7 +1002,7 @@
  }
 
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& j, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& j, Vector<double>& s) const
   {
    s.resize(3);
    unsigned j0=j%NNODE_1D;
@@ -1045,21 +1045,21 @@
  unsigned nnode_1d() const {return NNODE_1D;}
 
  /// Output
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output 
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction).
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
  {
   if (nplot>1)
    {
@@ -1081,7 +1081,7 @@
 
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
   {
    std::ostringstream header;
    header << "ZONE I=" << nplot << ", J=" << nplot << ", K=" 
@@ -1091,7 +1091,7 @@
 
  /// Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {
    unsigned DIM=3;
    unsigned np=1;
@@ -1155,16 +1155,16 @@
   }
 
 ///Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output at n_plot points
- inline void output(std::ostream &outfile, const unsigned &n_plot);
+ inline void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output 
- void output(FILE* file_pt) {FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const {FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- inline void output(FILE* file_pt, const unsigned &n_plot);
+ inline void output(FILE* file_pt, const unsigned &n_plot) const;
  
 
  /// \short Build the lower-dimensional FaceElement (an element of type
@@ -1198,7 +1198,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void SolidQElement<1,NNODE_1D>::output(std::ostream &outfile, 
-                                       const unsigned &n_plot)
+                                       const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -1238,7 +1238,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void SolidQElement<1,NNODE_1D>::output(FILE* file_pt,
-                                      const unsigned &n_plot)
+                                      const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -1323,16 +1323,16 @@
   }
 
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output at n_plot^2 points
- inline void output(std::ostream &outfile, const unsigned &n_plot);
+ inline void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output
- void output(FILE* file_pt){FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const{FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- inline void output(FILE* file_pt, const unsigned &n_plot);
+ inline void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// \short Build the lower-dimensional FaceElement (an element of type
@@ -1360,7 +1360,7 @@
 //===========================================================
 template <unsigned NNODE_1D>
 void SolidQElement<2,NNODE_1D>::output(std::ostream &outfile, 
-                                       const unsigned &n_plot)
+                                       const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -1406,7 +1406,7 @@
 //====================================================================
 template <unsigned NNODE_1D>
 void SolidQElement<2,NNODE_1D>::output(FILE* file_pt,
-                                       const unsigned &n_plot)
+                                       const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -1494,16 +1494,16 @@
   }
 
  /// Overload the output function
- void output(std::ostream &outfile) {FiniteElement::output(outfile);}
+ void output(std::ostream &outfile) const {FiniteElement::output(outfile);}
 
  /// Output at n_plot^2 points
- inline void output(std::ostream &outfile, const unsigned &n_plot);
+ inline void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output
- void output(FILE* file_pt){FiniteElement::output(file_pt);}
+ void output(FILE* file_pt) const{FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- inline void output(FILE* file_pt, const unsigned &n_plot);
+ inline void output(FILE* file_pt, const unsigned &n_plot) const;
 
 
  /// \short Build the lower-dimensional FaceElement (an element of type
@@ -1534,7 +1534,7 @@
 //===========================================================
 template <unsigned NNODE_1D>
 void SolidQElement<3,NNODE_1D>::output(std::ostream &outfile, 
-                                       const unsigned &n_plot)
+                                       const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(3);
@@ -1583,7 +1583,7 @@
 //====================================================================
 template <unsigned NNODE_1D>
 void SolidQElement<3,NNODE_1D>::output(FILE* file_pt,
-                                       const unsigned &n_plot)
+                                       const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(3);
Index: src/generic/block_preconditioner.h
===================================================================
--- src/generic/block_preconditioner.h	(revision 258)
+++ src/generic/block_preconditioner.h	(working copy)
@@ -550,7 +550,7 @@
     }
 
    /// \short return the number of DOF types in mesh i.
-   unsigned ndof_types_in_mesh(const unsigned& i)
+   unsigned ndof_types_in_mesh(const unsigned& i) const
     {
      return Ndof_types_in_mesh[i];
     }
Index: src/generic/brick_mesh.h
===================================================================
--- src/generic/brick_mesh.h	(revision 258)
+++ src/generic/brick_mesh.h	(working copy)
@@ -133,7 +133,7 @@
   }
 
  /// Output interpolated tet local coordinates
- void output(std::ostream &outfile, const unsigned &nplot=5)
+ void output(std::ostream &outfile, const unsigned &nplot=5) const
   {   
    //Vector of local coordinates
    Vector<double> s(3);
Index: src/generic/assembly_handler.h
===================================================================
--- src/generic/assembly_handler.h	(revision 258)
+++ src/generic/assembly_handler.h	(working copy)
@@ -69,12 +69,12 @@
  AssemblyHandler() {}
 
  ///Return the number of degrees of freedom in the element elem_pt
- virtual unsigned ndof(GeneralisedElement* const &elem_pt);
+ virtual unsigned ndof(GeneralisedElement* const &elem_pt) const;
  
  /// \short Return the global equation number of the local unknown ieqn_local
  ///in elem_pt.
  virtual unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                                  const unsigned &ieqn_local);
+                                  const unsigned &ieqn_local) const;
  
  ///Return the contribution to the residuals of the element elem_pt
  virtual void get_residuals(GeneralisedElement* const &elem_pt,
@@ -157,12 +157,12 @@
  ExplicitTimeStepHandler() {} 
 
  ///Return the number of degrees of freedom in the element elem_pt
- unsigned ndof(GeneralisedElement* const &elem_pt);
+ unsigned ndof(GeneralisedElement* const &elem_pt) const;
  
  ///\short Return the global equation number of the local unknown ieqn_local
  ///in elem_pt.
  unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                                  const unsigned &ieqn_local);
+                                  const unsigned &ieqn_local) const;
  
  ///\short Return the contribution to the residuals of the element elem_pt
  ///This is deliberately broken in our eigenproblem
@@ -205,12 +205,12 @@
  EigenProblemHandler(const double &sigma_real) : Sigma_real(sigma_real) {} 
 
  ///Return the number of degrees of freedom in the element elem_pt
- unsigned ndof(GeneralisedElement* const &elem_pt);
+ unsigned ndof(GeneralisedElement* const &elem_pt) const;
  
  ///\short Return the global equation number of the local unknown ieqn_local
  ///in elem_pt.
  unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                                  const unsigned &ieqn_local);
+                                  const unsigned &ieqn_local) const;
  
  ///\short Return the contribution to the residuals of the element elem_pt
  ///This is deliberately broken in our eigenproblem
@@ -255,13 +255,13 @@
  
  ///\short Use underlying assembly handler to return the number of 
  /// degrees of freedom in the element elem_pt
- unsigned ndof(GeneralisedElement* const &elem_pt)
+ unsigned ndof(GeneralisedElement* const &elem_pt) const
   {return Assembly_handler_pt->ndof(elem_pt);}
  
  /// \short Use underlying AssemblyHandler to return the 
  /// global equation number of the local unknown ieqn_local in elem_pt.
  unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                          const unsigned &ieqn_local)
+                          const unsigned &ieqn_local) const
   {return Assembly_handler_pt->eqn_number(elem_pt,ieqn_local);}
  
  ///\short Use underlying AssemblyHandler to return 
@@ -321,13 +321,13 @@
 
  ///Return the number of degrees of freedom in the element elem_pt
  ///Pass through to the original assembly handler
- unsigned ndof(GeneralisedElement* const &elem_pt)
+ unsigned ndof(GeneralisedElement* const &elem_pt) const
   {return Assembly_handler_pt->ndof(elem_pt);}
  
  ///\short Return the global equation number of the local unknown ieqn_local
  ///in elem_pt.Pass through to the original assembly handler
  unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                                  const unsigned &ieqn_local)
+                                  const unsigned &ieqn_local) const
   {return Assembly_handler_pt->eqn_number(elem_pt,ieqn_local);}
  
  ///\short Return the contribution to the residuals of the element elem_pt
@@ -479,11 +479,11 @@
   ~FoldHandler();
 
   ///Get the number of elemental degrees of freedom
-  unsigned ndof(GeneralisedElement* const &elem_pt);
+  unsigned ndof(GeneralisedElement* const &elem_pt) const;
 
   ///Get the global equation number of the local unknown
   unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                           const unsigned &ieqn_local);
+                           const unsigned &ieqn_local) const;
 
    ///Get the residuals
   void get_residuals(GeneralisedElement* const &elem_pt,
@@ -772,7 +772,7 @@
   /// \short Function that is used to return map the global equations
   /// using the simplistic numbering scheme into the actual distributed
   /// scheme
-  inline unsigned global_eqn_number(const unsigned &i)
+  inline unsigned global_eqn_number(const unsigned &i) const
    {
 #ifdef OOMPH_HAS_MPI
     //If the problem is distributed I have to do something
@@ -803,11 +803,11 @@
   //Has this been called
 
   ///Get the number of elemental degrees of freedom
-  unsigned ndof(GeneralisedElement* const &elem_pt);
+  unsigned ndof(GeneralisedElement* const &elem_pt) const;
   
   ///Get the global equation number of the local unknown
   unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                           const unsigned &ieqn_local);
+                           const unsigned &ieqn_local) const;
    
   ///Get the residuals
   void get_residuals(GeneralisedElement* const &elem_pt,
@@ -1019,11 +1019,11 @@
   ~HopfHandler();
 
   ///Get the number of elemental degrees of freedom
-  unsigned ndof(GeneralisedElement* const &elem_pt);
+  unsigned ndof(GeneralisedElement* const &elem_pt) const;
 
   ///Get the global equation number of the local unknown
   unsigned long eqn_number(GeneralisedElement* const &elem_pt,
-                           const unsigned &ieqn_local);
+                           const unsigned &ieqn_local) const;
 
   ///Get the residuals
   void get_residuals(GeneralisedElement* const &elem_pt,
Index: src/generic/displacement_control_element.h
===================================================================
--- src/generic/displacement_control_element.h	(revision 258)
+++ src/generic/displacement_control_element.h	(working copy)
@@ -268,7 +268,7 @@
 
  /// \short The number of "blocks" that degrees of freedom in this element
  /// are sub-divided into: Just the control pressure.
- unsigned ndof_types()
+ unsigned ndof_types() const
   {
    return 1;
   }
Index: src/generic/Qspectral_elements.cc
===================================================================
--- src/generic/Qspectral_elements.cc	(revision 258)
+++ src/generic/Qspectral_elements.cc	(working copy)
@@ -51,7 +51,7 @@
 /// The output function for general 1D QSpectralElements
 //=======================================================================
 template <unsigned NNODE_1D>
-void QSpectralElement<1,NNODE_1D>::output(std::ostream &outfile)
+void QSpectralElement<1,NNODE_1D>::output(std::ostream &outfile) const
 {
  //Tecplot header info 
  outfile << "ZONE I=" << NNODE_1D << std::endl;
@@ -84,7 +84,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void QSpectralElement<1,NNODE_1D>::output(std::ostream &outfile, 
-                                          const unsigned& nplot)
+                                          const unsigned& nplot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -233,7 +233,7 @@
 /// The output function for general 1D QSpectralElements
 //=======================================================================
 template <unsigned NNODE_1D>
-void QSpectralElement<2,NNODE_1D>::output(std::ostream &outfile)
+void QSpectralElement<2,NNODE_1D>::output(std::ostream &outfile) const
 {
  //Tecplot header info 
  outfile << "ZONE I=" << NNODE_1D << ", J=" << NNODE_1D << std::endl;
@@ -272,7 +272,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void QSpectralElement<2,NNODE_1D>::output(std::ostream &outfile, 
-                                          const unsigned &n_plot)
+                                          const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -460,7 +460,7 @@
 /// The output function for general 1D QSpectralElements
 //=======================================================================
 template <unsigned NNODE_1D>
-void QSpectralElement<3,NNODE_1D>::output(std::ostream &outfile)
+void QSpectralElement<3,NNODE_1D>::output(std::ostream &outfile) const
 {
  //Tecplot header info 
  outfile << "ZONE I=" << NNODE_1D << ", J=" << NNODE_1D 
@@ -502,7 +502,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void QSpectralElement<3,NNODE_1D>::
-output(std::ostream &outfile, const unsigned &n_plot)
+output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(3);
Index: src/generic/spines.cc
===================================================================
--- src/generic/spines.cc	(revision 258)
+++ src/generic/spines.cc	(working copy)
@@ -151,7 +151,7 @@
 //=======================================================================
 /// Overload the dump function so that the spine data is also dumped
 //=======================================================================
-void SpineMesh::dump(std::ofstream &dump_file)
+void SpineMesh::dump(std::ofstream &dump_file) const
 {
  //Call the standard mesh dump function
  Mesh::dump(dump_file);
Index: src/generic/nodes.cc
===================================================================
--- src/generic/nodes.cc	(revision 258)
+++ src/generic/nodes.cc	(working copy)
@@ -412,7 +412,7 @@
 //================================================================
 ///Dump data object to a file 
 //================================================================
-void Data::dump(std::ostream& dump_file)
+void Data::dump(std::ostream& dump_file) const
 {
  //Find the amount of storage used
  const unsigned value_pt_range = nvalue();
@@ -1533,7 +1533,7 @@
 //================================================================
 ///Dump nodal positions and associated data to file for restart
 //================================================================
-void Node::dump(std::ostream& dump_file)
+void Node::dump(std::ostream& dump_file) const
 {
  // Number of positional values
  const unsigned npos_storage = Ndim*Nposition_type;
@@ -2281,7 +2281,7 @@
 //========================================================================
 /// Output nodal coordinates
 //========================================================================
-void Node::output(std::ostream &outfile)
+void Node::output(std::ostream &outfile) const
 {
  //Loop over the number of dimensions of the node
  const unsigned n_dim = this->ndim();
@@ -2985,7 +2985,7 @@
 //================================================================
 ///Dump nodal positions and associated data to file for restart
 //================================================================
-void SolidNode::dump(std::ostream& dump_file)
+void SolidNode::dump(std::ostream& dump_file) const
 {
  //Dump out the Lagrangian coordinates
  // Number of lagrangian values
Index: src/generic/assembly_handler.cc
===================================================================
--- src/generic/assembly_handler.cc	(revision 258)
+++ src/generic/assembly_handler.cc	(working copy)
@@ -42,7 +42,7 @@
  ///Get the number of elemental degrees of freedom. Direct call
  ///to the function in the element.
  //===================================================================
- unsigned AssemblyHandler::ndof(GeneralisedElement* const &elem_pt)
+ unsigned AssemblyHandler::ndof(GeneralisedElement* const &elem_pt) const
  {return elem_pt->ndof();}
 
  //==================================================================
@@ -50,7 +50,7 @@
  ///to the function in the element.
  //==================================================================
  unsigned long AssemblyHandler::eqn_number(GeneralisedElement* const &elem_pt,
-                                           const unsigned &ieqn_local)
+                                           const unsigned &ieqn_local) const
  {return elem_pt->eqn_number(ieqn_local);}
  
  //==================================================================
@@ -176,7 +176,7 @@
  ///Get the number of elemental degrees of freedom. Direct call
  ///to the function in the element.
  //===================================================================
- unsigned ExplicitTimeStepHandler::ndof(GeneralisedElement* const &elem_pt)
+ unsigned ExplicitTimeStepHandler::ndof(GeneralisedElement* const &elem_pt) const
  {return elem_pt->ndof();}
 
  //==================================================================
@@ -184,7 +184,7 @@
  ///to the function in the element.
  //==================================================================
  unsigned long ExplicitTimeStepHandler::
- eqn_number(GeneralisedElement* const &elem_pt,const unsigned &ieqn_local)
+ eqn_number(GeneralisedElement* const &elem_pt,const unsigned &ieqn_local) const
  {return elem_pt->eqn_number(ieqn_local);}
  
  //==================================================================
@@ -241,7 +241,7 @@
  ///Get the number of elemental degrees of freedom. Direct call
  ///to the function in the element.
  //===================================================================
- unsigned EigenProblemHandler::ndof(GeneralisedElement* const &elem_pt)
+ unsigned EigenProblemHandler::ndof(GeneralisedElement* const &elem_pt) const
  {return elem_pt->ndof();}
 
  //==================================================================
@@ -249,7 +249,7 @@
  ///to the function in the element.
  //==================================================================
  unsigned long EigenProblemHandler::
- eqn_number(GeneralisedElement* const &elem_pt,const unsigned &ieqn_local)
+ eqn_number(GeneralisedElement* const &elem_pt,const unsigned &ieqn_local) const
  {return elem_pt->eqn_number(ieqn_local);}
  
  //==================================================================
@@ -863,7 +863,7 @@
  //=================================================================
  /// The number of unknowns is 2n+1
  //================================================================
- unsigned FoldHandler::ndof(GeneralisedElement* const &elem_pt)
+ unsigned FoldHandler::ndof(GeneralisedElement* const &elem_pt) const
  {
   unsigned raw_ndof = elem_pt->ndof();
   //Return different values depending on the type of block decomposition
@@ -897,7 +897,7 @@
  /// to the augmented system.
  //=======================================================================
  unsigned long FoldHandler::eqn_number(GeneralisedElement* const &elem_pt,
-                                       const unsigned &ieqn_local)
+                                       const unsigned &ieqn_local) const
  {
   //Find the number of non-augmented dofs in the element
   unsigned raw_ndof = elem_pt->ndof();
@@ -2605,7 +2605,7 @@
  //================================================================
  ///Get the number of elemental degrees of freedom
  //================================================================
- unsigned PitchForkHandler::ndof(GeneralisedElement* const &elem_pt)
+ unsigned PitchForkHandler::ndof(GeneralisedElement* const &elem_pt) const
  {
   unsigned raw_ndof = elem_pt->ndof();
 
@@ -2636,7 +2636,7 @@
  
  ///Get the global equation number of the local unknown
  unsigned long PitchForkHandler::eqn_number(GeneralisedElement* const &elem_pt,
-                                            const unsigned &ieqn_local)
+                                            const unsigned &ieqn_local) const
  {
   //Get the raw value
   unsigned raw_ndof = elem_pt->ndof();
@@ -4238,7 +4238,7 @@
  //=============================================================
  ///Get the number of elemental degrees of freedom
  //=============================================================
- unsigned HopfHandler::ndof(GeneralisedElement* const &elem_pt)
+ unsigned HopfHandler::ndof(GeneralisedElement* const &elem_pt) const
  {
   unsigned raw_ndof = elem_pt->ndof();
   switch(Solve_which_system)
@@ -4267,7 +4267,7 @@
  ///Get the global equation number of the local unknown
  //============================================================
  unsigned long HopfHandler::eqn_number(GeneralisedElement* const &elem_pt,
-                                       const unsigned &ieqn_local)
+                                       const unsigned &ieqn_local) const
  {
   //Get the raw value
   unsigned raw_ndof = elem_pt->ndof();
Index: src/generic/triangle_mesh.h
===================================================================
--- src/generic/triangle_mesh.h	(revision 258)
+++ src/generic/triangle_mesh.h	(working copy)
@@ -238,7 +238,7 @@
  unsigned boundary_id() const {return Boundary_id;}
 
  /// Output curvilinear boundary at n_sample (default: 50) points
- void output(std::ostream &outfile, const unsigned& n_sample=50)
+ void output(std::ostream &outfile, const unsigned& n_sample=50) const
   {
    outfile << "ZONE T=\"Boundary " << Boundary_id << "\"\n";
    Vector<double> zeta(1);
@@ -349,7 +349,7 @@
   }
   
  /// Output the polyline -- close it if optional boolean flag is true
- void output(std::ostream &outfile, const bool& close_it=false)
+ void output(std::ostream &outfile, const bool& close_it=false) const
   {
    outfile <<"ZONE T=\"TriangleMeshPolyLine with boundary ID" 
            << Boundary_id<<"\""<<std::endl;
@@ -544,7 +544,7 @@
 
  /// Output each sub-boundary at n_sample (default: 50) points
  /// and internal point
- virtual void output(std::ostream &outfile, const unsigned& n_sample=50)=0;
+ virtual void output(std::ostream &outfile, const unsigned& n_sample=50) const=0;
   
  /// Coordinate of the internal point
  Vector<double> internal_point() const
@@ -689,7 +689,7 @@
   
  /// Output the constituent polylines (nsample argument is ignored
  /// since we have straightline segments anyway)
- void output(std::ostream &outfile, const unsigned& n_sample=50)
+ void output(std::ostream &outfile, const unsigned& n_sample=50) const
  {
   unsigned nbound=Boundary_polyline_pt.size();
   bool close_it=false;
@@ -952,7 +952,7 @@
  
   /// Output each sub-boundary at n_sample (default: 50) points
   /// and internal point
-  void output(std::ostream &outfile, const unsigned& n_sample=50)
+  void output(std::ostream &outfile, const unsigned& n_sample=50) const
   {
    TriangleMeshPolygon::output(outfile,n_sample);
    outfile << "ZONE T=\"Internal point\"\n";
@@ -1089,7 +1089,7 @@
  
 
  /// Output each sub-boundary at n_sample (default: 50) points
- void output(std::ostream &outfile, const unsigned& n_sample=50)
+ void output(std::ostream &outfile, const unsigned& n_sample=50) const
   {
    unsigned nb=Curvilinear_boundary_pt.size();
    for (unsigned i=0;i<nb;i++)
@@ -1136,7 +1136,7 @@
     
   /// Output each sub-boundary at n_sample (default: 50) points
   /// and internal point
-  void output(std::ostream &outfile, const unsigned& n_sample=50)
+  void output(std::ostream &outfile, const unsigned& n_sample=50) const
   {
    TriangleMeshCurvilinearClosedCurve::output(outfile,n_sample);
    outfile << "ZONE T=\"Internal point\"\n";
Index: src/generic/hermite_elements.cc
===================================================================
--- src/generic/hermite_elements.cc	(revision 258)
+++ src/generic/hermite_elements.cc	(working copy)
@@ -131,7 +131,7 @@
 /// The output function for general 1D QHermiteElements
 //=======================================================================
 template <>
-void QHermiteElement<1>::output(std::ostream &outfile)
+void QHermiteElement<1>::output(std::ostream &outfile) const
 {
  //Tecplot header info 
  outfile << "ZONE I=" << 2 << std::endl;
@@ -175,7 +175,7 @@
 /// The output function for n_plot points in each coordinate direction
 //=======================================================================
 template <>
-void QHermiteElement<1>::output(std::ostream &outfile, const unsigned &n_plot)
+void QHermiteElement<1>::output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -208,7 +208,7 @@
 /// The C-style output function for general 1D QHermiteElements
 //=======================================================================
 template <>
-void QHermiteElement<1>::output(FILE* file_pt)
+void QHermiteElement<1>::output(FILE* file_pt) const
 {
  //Tecplot header info 
  fprintf(file_pt,"ZONE I=2\n");
@@ -253,7 +253,7 @@
 /// The C-style output function for n_plot points in each coordinate direction
 //=======================================================================
 template <>
-void QHermiteElement<1>::output(FILE* file_pt, const unsigned &n_plot)
+void QHermiteElement<1>::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -754,7 +754,7 @@
 /// The output function for QHermiteElement<2,ORDER>
 //===========================================================
 template<>
-void QHermiteElement<2>::output(std::ostream &outfile)
+void QHermiteElement<2>::output(std::ostream &outfile) const
 {
  //Tecplot header info 
  outfile << "ZONE I=" << 2 << ", J=" << 2 << std::endl;
@@ -803,7 +803,7 @@
 ///The output function for n_plot points in each coordinate direction
 //=======================================================================
 template<>
-void QHermiteElement<2>::output(std::ostream &outfile, const unsigned &n_plot)
+void QHermiteElement<2>::output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -845,7 +845,7 @@
 /// The C-style output function for QHermiteElement<2,ORDER>
 //===========================================================
 template<>
-void QHermiteElement<2>::output(FILE* file_pt)
+void QHermiteElement<2>::output(FILE* file_pt) const
 {
  //Tecplot header info 
  fprintf(file_pt,"ZONE I=2, J=2");
@@ -894,7 +894,7 @@
 ///The C-style output function for n_plot points in each coordinate direction
 //=======================================================================
 template<>
-void QHermiteElement<2>::output(FILE* file_pt, const unsigned &n_plot)
+void QHermiteElement<2>::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -1096,7 +1096,7 @@
 /// Overload the output function
 //====================================================================
 template<unsigned DIM>
-void SolidQHermiteElement<DIM>::output(std::ostream &outfile) 
+void SolidQHermiteElement<DIM>::output(std::ostream &outfile) const
 {QHermiteElement<DIM>::output(outfile);}
 
 
@@ -1106,7 +1106,7 @@
 //=======================================================================
 template <>
 void SolidQHermiteElement<1>::output(std::ostream &outfile, 
-                                    const unsigned &n_plot)
+                                    const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -1146,7 +1146,7 @@
 /// Overload the C-style output function
 //====================================================================
 template<unsigned DIM>
-void SolidQHermiteElement<DIM>::output(FILE* file_pt)
+void SolidQHermiteElement<DIM>::output(FILE* file_pt) const
 {QHermiteElement<DIM>::output(file_pt);}
 
 
@@ -1156,7 +1156,7 @@
 //=======================================================================
 template <>
 void SolidQHermiteElement<1>::output(FILE* file_pt,
-                                    const unsigned &n_plot)
+                                    const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -1200,7 +1200,7 @@
 /// The output function for any number of points per element
 //=====================================================================
 template<>
-void SolidQHermiteElement<2>::output(std::ostream &outfile, const unsigned &n_p)
+void SolidQHermiteElement<2>::output(std::ostream &outfile, const unsigned &n_p) const
 {
  //Local variables
  Vector<double> s(2);
@@ -1244,7 +1244,7 @@
 /// The C-style output function for any number of points per element
 //=====================================================================
 template<>
-void SolidQHermiteElement<2>::output(FILE* file_pt, const unsigned &n_plot)
+void SolidQHermiteElement<2>::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
Index: src/generic/Qspectral_elements.h
===================================================================
--- src/generic/Qspectral_elements.h	(revision 258)
+++ src/generic/Qspectral_elements.h	(working copy)
@@ -355,7 +355,7 @@
   }
 
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& n, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& n, Vector<double>& s) const
   {
    s.resize(1);
    s[0] = OneDimensionalLegendreShape<NNODE_1D>::nodal_position(n);
@@ -402,23 +402,23 @@
  unsigned nnode_1d() const {return NNODE_1D;}
 
  /// C-style output 
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// Output 
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
  
 /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction).
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
   {
    if (nplot>1)
     {
@@ -432,7 +432,7 @@
  
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
   {
    std::ostringstream header;
    header << "ZONE I=" << nplot << "\n";
@@ -441,7 +441,7 @@
  
  /// \short Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {
    unsigned DIM=1;
    unsigned np=1;
@@ -604,7 +604,7 @@
  
 
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& n, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& n, Vector<double>& s) const
   {
    s.resize(2);
    unsigned n0 = n%NNODE_1D;
@@ -657,23 +657,23 @@
  unsigned nnode_1d() const {return NNODE_1D;}
  
  /// C-style output 
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// Output 
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
  
 /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction).
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
   {
    if (nplot>1)
     {
@@ -693,7 +693,7 @@
  
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
   {
    std::ostringstream header;
    header << "ZONE I=" << nplot << ", J=" << nplot << "\n";
@@ -702,7 +702,7 @@
  
  /// \short Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {
    unsigned DIM=2;
    unsigned np=1;
@@ -896,7 +896,7 @@
  
 
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& n, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& n, Vector<double>& s) const
   {
    s.resize(3);
    unsigned n0 = n%NNODE_1D;
@@ -955,23 +955,23 @@
  unsigned nnode_1d() const {return NNODE_1D;}
  
  /// C-style output 
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
  /// Output 
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at nplot points
- void output(std::ostream &outfile, const unsigned& nplot);
+ void output(std::ostream &outfile, const unsigned& nplot) const;
  
 /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction).
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s)
+                 Vector<double>& s) const
  {
   if (nplot>1)
    {
@@ -995,7 +995,7 @@
  
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot)
+ std::string tecplot_zone_string(const unsigned& nplot) const
   {
    std::ostringstream header;
    header << "ZONE I=" << nplot << ", J=" << nplot << ", K=" 
@@ -1005,7 +1005,7 @@
  
  /// \short Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot) 
+ unsigned nplot_points(const unsigned& nplot) const
   {
    unsigned DIM=3;
    unsigned np=1;
Index: src/generic/Qelements.cc
===================================================================
--- src/generic/Qelements.cc	(revision 258)
+++ src/generic/Qelements.cc	(working copy)
@@ -165,7 +165,7 @@
 /// The output function for general 1D QElements
 //=======================================================================
 template <unsigned NNODE_1D>
-void QElement<1,NNODE_1D>::output(std::ostream &outfile)
+void QElement<1,NNODE_1D>::output(std::ostream &outfile) const
 {
  //Tecplot header info 
  outfile << "ZONE I=" << NNODE_1D << std::endl;
@@ -198,7 +198,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void QElement<1,NNODE_1D>::output(std::ostream &outfile, 
-                                  const unsigned &n_plot)
+                                  const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -229,7 +229,7 @@
 /// C style output function for general 1D QElements
 //=======================================================================
 template <unsigned NNODE_1D>
-void QElement<1,NNODE_1D>::output(FILE* file_pt)
+void QElement<1,NNODE_1D>::output(FILE* file_pt) const
 {
 
  //Tecplot header info 
@@ -266,7 +266,7 @@
 /// C style output function for n_plot points in each coordinate direction
 //=======================================================================
 template <unsigned NNODE_1D>
-void QElement<1,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot)
+void QElement<1,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -570,7 +570,7 @@
 /// The output function for QElement<2,NNODE_1D>
 //===========================================================
 template <unsigned NNODE_1D>
-void QElement<2,NNODE_1D>::output(std::ostream &outfile)
+void QElement<2,NNODE_1D>::output(std::ostream &outfile) const
 {
  //Find the dimension of the nodes
  unsigned n_dim = this->nodal_dimension();
@@ -610,7 +610,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void QElement<2,NNODE_1D>::output(std::ostream &outfile, 
-                                  const unsigned &n_plot)
+                                  const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -647,7 +647,7 @@
 /// C-style output function for QElement<2,NNODE_1D>
 //===========================================================
 template <unsigned NNODE_1D>
-void QElement<2,NNODE_1D>::output(FILE* file_pt)
+void QElement<2,NNODE_1D>::output(FILE* file_pt) const
 {
  //Tecplot header info 
  //outfile << "ZONE I=" << NNODE_1D << ", J=" << NNODE_1D << std::endl;
@@ -691,7 +691,7 @@
 /// C-style  output function for n_plot points in each coordinate direction
 //=======================================================================
 template <unsigned NNODE_1D>
-void QElement<2,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot)
+void QElement<2,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(2);
@@ -1065,7 +1065,7 @@
 /// The output function for QElement<3,NNODE_1D>
 //===========================================================
 template <unsigned NNODE_1D>
-void QElement<3,NNODE_1D>::output(std::ostream &outfile)
+void QElement<3,NNODE_1D>::output(std::ostream &outfile) const
 {
  //Find the dimension of the nodes
  unsigned n_dim = this->nodal_dimension();
@@ -1109,7 +1109,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void QElement<3,NNODE_1D>::output(std::ostream &outfile, 
-                                  const unsigned &n_plot)
+                                  const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(3);
@@ -1151,7 +1151,7 @@
 /// C-style output function for QElement<3,NNODE_1D>
 //===========================================================
 template <unsigned NNODE_1D>
-void QElement<3,NNODE_1D>::output(FILE* file_pt)
+void QElement<3,NNODE_1D>::output(FILE* file_pt) const
 {
  //Find the dimension of the nodes
  unsigned n_dim = this->nodal_dimension();
@@ -1197,7 +1197,7 @@
 /// C-style output function for n_plot points in each coordinate direction
 //=======================================================================
 template <unsigned NNODE_1D>
-void QElement<3,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot)
+void QElement<3,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(3);
Index: src/generic/problem.h
===================================================================
--- src/generic/problem.h	(revision 258)
+++ src/generic/problem.h	(working copy)
@@ -1224,8 +1224,11 @@
  /// Return a pointer to the global time object
  Time* &time_pt() {return Time_pt;}
 
+  /// Return a pointer to the global time object (const version)
+ Time* time_pt() const {return Time_pt;}
+
  /// Return the current value of continuous time
- double& time(); 
+ double& time() const;
 
  /// \short Access function for the pointer to the first (presumably only) 
  /// timestepper
@@ -1584,7 +1587,7 @@
 
  /// \short Dump refinement pattern of all refineable meshes and all generic
  /// Problem data to file for restart. 
- virtual void dump(std::ofstream& dump_file);
+ virtual void dump(std::ofstream& dump_file) const;
 
 #ifdef OOMPH_HAS_MPI
 
Index: src/generic/map_matrix.h
===================================================================
--- src/generic/map_matrix.h	(revision 258)
+++ src/generic/map_matrix.h	(working copy)
@@ -234,7 +234,7 @@
  /// \short Dump all non-`zero' entries to file.
  /// Output is in the format
  ///   `i', `j', `entry[i][j]'
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    // NOTE:
    //------
@@ -517,7 +517,7 @@
  /// \short Dump all non-`zero' entries to file.
  /// Output is in the format
  ///   `i', `j', `entry[i][j]'
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    // NOTE:
    //------
Index: src/generic/refineable_brick_element.cc
===================================================================
--- src/generic/refineable_brick_element.cc	(revision 258)
+++ src/generic/refineable_brick_element.cc	(working copy)
@@ -42,8 +42,7 @@
 ///  in right order so that tecplot can draw a cube without crossed lines
 //========================================================================
 void RefineableQElement<3>::output_corners(std::ostream& outfile, 
-                                            const std::string& colour="BLACK")
- const
+                                            const std::string& colour="BLACK") const
 {
  
  Vector<double> s(3);
Index: src/generic/dg_elements.cc
===================================================================
--- src/generic/dg_elements.cc	(revision 258)
+++ src/generic/dg_elements.cc	(working copy)
@@ -175,7 +175,7 @@
 ///Return the interpolated values of the unknown fluxes
 //=====================================================================
 void DGFaceElement::interpolated_u(const Vector<double> &s, 
-                                   Vector<double> &u)
+                                   Vector<double> &u) const
 {
  //Find the number of nodes
  const unsigned n_node = nnode();
Index: src/generic/mesh.h
===================================================================
--- src/generic/mesh.h	(revision 258)
+++ src/generic/mesh.h	(working copy)
@@ -397,10 +397,17 @@
  /// Return pointer to global node n
  Node* &node_pt(const unsigned long &n) {return Node_pt[n];}
 
+ /// Return pointer to global node n (const version)
+ Node* node_pt(const unsigned long &n) const {return Node_pt[n];}
+
  /// Return  pointer to element e
  GeneralisedElement* &element_pt(const unsigned long &e) 
   {return Element_pt[e];}
 
+ /// Return pointer to element e (const version)
+ GeneralisedElement* element_pt(const unsigned long &e) const
+  {return Element_pt[e];}
+
  /// Return reference to the Vector of elements
  const Vector<GeneralisedElement*> &element_pt() const {return Element_pt;}
  
@@ -699,25 +706,25 @@
   }
 
  /// Dump the data in the mesh into a file for restart
- virtual void dump(std::ofstream &dump_file);
+ virtual void dump(std::ofstream &dump_file) const;
 
  /// \short Read solution from restart file
  virtual void read(std::ifstream &restart_file);
 
  /// Output for all elements
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at f(n_plot) points in each element
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// Output for all elements (C-style output)
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// Output at f(n_plot) points in each element (C-style output)
- void output(FILE* file_pt, const unsigned &nplot);
+ void output(FILE* file_pt, const unsigned &nplot) const;
 
  /// Output for all elements
- void output(const std::string& output_filename)
+ void output(const std::string& output_filename) const
   {
    std::ofstream outfile;
    outfile.open(output_filename.c_str());
@@ -726,7 +733,7 @@
   }
 
  /// Output at f(n_plot) points in each element
- void output(const std::string& output_filename, const unsigned &n_plot)
+ void output(const std::string& output_filename, const unsigned &n_plot) const
   {
    std::ofstream outfile;
    outfile.open(output_filename.c_str());
@@ -736,20 +743,20 @@
 
  /// Output a given Vector function at f(n_plot) points in each element
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                 FiniteElement::SteadyExactSolutionFctPt);
+                 FiniteElement::SteadyExactSolutionFctPt) const;
 
  /// \short Output a given time-dep. Vector function at f(n_plot) points in 
  /// each element
  void output_fct(std::ostream &outfile, const unsigned &n_plot,
                  const double& time, 
-                 FiniteElement::UnsteadyExactSolutionFctPt);
+                 FiniteElement::UnsteadyExactSolutionFctPt) const;
 
  /// Output the nodes on the boundaries (into separate tecplot zones)
- void output_boundaries(std::ostream &outfile);
+ void output_boundaries(std::ostream &outfile) const;
 
  /// Output the nodes on the boundaries (into separate tecplot zones).
  /// Specify filename
- void output_boundaries(const std::string& output_filename)
+ void output_boundaries(const std::string& output_filename) const
   {
    std::ofstream outfile;
    outfile.open(output_filename.c_str());
@@ -774,7 +781,7 @@
  virtual void compute_error(std::ostream &outfile,
                             FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                             const double& time,
-                            double& error, double& norm)
+                            double& error, double& norm) const
   {
    //Initialse the norm and error
    norm=0.0; error=0.0;
@@ -815,7 +822,7 @@
  ///  that of the exact solution
  virtual void compute_error(std::ostream &outfile, 
                             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                            double& error, double& norm)
+                            double& error, double& norm) const
   {
    //Initialise norm and error
    norm=0.0; error=0.0;
Index: src/generic/Telements.cc
===================================================================
--- src/generic/Telements.cc	(revision 258)
+++ src/generic/Telements.cc	(working copy)
@@ -53,7 +53,7 @@
 /// The output function for general 1D TElements
 //=======================================================================
 template <unsigned NNODE_1D>
-void TElement<1,NNODE_1D>::output(std::ostream &outfile)
+void TElement<1,NNODE_1D>::output(std::ostream &outfile) const
 {
  //Tecplot header info 
  outfile << "ZONE I=" << NNODE_1D << std::endl;
@@ -86,7 +86,7 @@
 //=======================================================================
 template <unsigned NNODE_1D>
 void TElement<1,NNODE_1D>::output(std::ostream &outfile, 
-                                  const unsigned &n_plot)
+                                  const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -117,7 +117,7 @@
 /// C style output function for general 1D TElements
 //=======================================================================
 template <unsigned NNODE_1D>
-void TElement<1,NNODE_1D>::output(FILE* file_pt)
+void TElement<1,NNODE_1D>::output(FILE* file_pt) const
 {
 
  //Tecplot header info 
@@ -154,7 +154,7 @@
 /// C style output function for n_plot points in each coordinate direction
 //=======================================================================
 template <unsigned NNODE_1D>
-void TElement<1,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot)
+void TElement<1,NNODE_1D>::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Local variables
  Vector<double> s(1);
@@ -548,7 +548,7 @@
 /// The output function for TElement<2,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<2,NNODE_1D>::output(std::ostream &outfile) 
+void TElement<2,NNODE_1D>::output(std::ostream &outfile) const
 {
  unsigned n_node = nnode();
  outfile << "ZONE N=" << n_node << ", F=FEPOINT, ET=TRIANGLE" << std::endl;
@@ -589,7 +589,7 @@
 /// The output function for TElement<2,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<2,NNODE_1D>::output(std::ostream &outfile,const unsigned &nplot) 
+void TElement<2,NNODE_1D>::output(std::ostream &outfile,const unsigned &nplot) const
 {
    
  //Vector of local coordinates
@@ -621,7 +621,7 @@
 /// The C-style output function for TElement<2,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<2,NNODE_1D>::output(FILE* file_pt)
+void TElement<2,NNODE_1D>::output(FILE* file_pt) const
 {
  unsigned n_node = nnode();
  fprintf(file_pt,"ZONE N=%i, F=FEPOINT, ET=TRIANGLE\n",n_node);
@@ -667,7 +667,7 @@
 /// The C-style output function for TElement<2,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<2,NNODE_1D>::output(FILE* file_pt,const unsigned &nplot) 
+void TElement<2,NNODE_1D>::output(FILE* file_pt,const unsigned &nplot) const
 {
 
  //Vector of local coordinates
@@ -708,7 +708,7 @@
 /// The output function for TElement<3,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<3,NNODE_1D>::output(std::ostream &outfile) 
+void TElement<3,NNODE_1D>::output(std::ostream &outfile) const
 {
  unsigned n_node = nnode();
  outfile << "ZONE N=" << n_node << ", F=FEPOINT, ET=TETRAHEDRON" << std::endl;
@@ -749,7 +749,7 @@
 /// The output function for TElement<3,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<3,NNODE_1D>::output(std::ostream &outfile,const unsigned &nplot) 
+void TElement<3,NNODE_1D>::output(std::ostream &outfile,const unsigned &nplot) const
 {
    
  //Vector of local coordinates
@@ -781,7 +781,7 @@
 /// The C-style output function for TElement<3,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<3,NNODE_1D>::output(FILE* file_pt)
+void TElement<3,NNODE_1D>::output(FILE* file_pt) const
 {
  unsigned n_node = nnode();
  fprintf(file_pt,"ZONE N=%i, F=FEPOINT, ET=TETRAHEDRON\n",n_node);
@@ -826,7 +826,7 @@
 /// The C-style output function for TElement<3,NNODE_1D> 
 //=======================================================================
 template<unsigned NNODE_1D>
-void TElement<3,NNODE_1D>::output(FILE* file_pt,const unsigned &nplot) 
+void TElement<3,NNODE_1D>::output(FILE* file_pt,const unsigned &nplot) const
 {
 
  //Vector of local coordinates
Index: src/generic/spines.h
===================================================================
--- src/generic/spines.h	(revision 258)
+++ src/generic/spines.h	(working copy)
@@ -573,8 +573,11 @@
  /// Return the i-th spine in the mesh
  Spine*& spine_pt(const unsigned long &i) {return Spine_pt[i];}
 
+ /// Return the i-th spine in the mesh (const version)
+ Spine* spine_pt(const unsigned long &i) const {return Spine_pt[i];}
+
  /// Return the number of spines in the mesh
- unsigned long nspine() {return Spine_pt.size();}
+ unsigned long nspine() const {return Spine_pt.size();}
 
  /// Add a spine to the mesh
  void add_spine_pt(Spine* const &spine_pt)
@@ -654,7 +657,7 @@
  virtual void spine_node_update(SpineNode* spine_node_pt)=0;
 
  /// \short Overload the dump function so that the spine data is dumped
- void dump(std::ofstream &dump_file);
+ void dump(std::ofstream &dump_file) const;
 
  /// \short Overload the read function so that the spine data is read 
  /// from the restart file
Index: src/generic/elements.h
===================================================================
--- src/generic/elements.h	(revision 258)
+++ src/generic/elements.h	(working copy)
@@ -246,7 +246,7 @@
 
  /// \short Return the local equation number corresponding to the j-th
  /// value stored at the i-th internal data
- inline int internal_local_eqn(const unsigned &i, const unsigned &j) 
+ inline int internal_local_eqn(const unsigned &i, const unsigned &j) const
   {
 #ifdef RANGE_CHECKING
    if(i >= Ninternal_data)
@@ -683,7 +683,7 @@
 
  /// \short Return the global equation number corresponding to the 
  /// ieqn_local-th local equation number
- unsigned long eqn_number(const unsigned &ieqn_local)
+ unsigned long eqn_number(const unsigned &ieqn_local) const
   {
 #ifdef RANGE_CHECKING
    if(ieqn_local >= Ndof)
@@ -705,7 +705,7 @@
  ///global equation number. Returns minus one (-1) if there is no
  ///local degree of freedom corresponding to the chosen global equation
  ///number
- int local_eqn_number(const unsigned long &ieqn_global)
+ int local_eqn_number(const unsigned long &ieqn_global) const
   {
    //Cache the number of degrees of freedom in the element
    const unsigned n_dof = this->Ndof;
@@ -1021,7 +1021,7 @@
 
  /// \short The number of types of degrees of freedom in this element
  /// are sub-divided into
- virtual unsigned ndof_types()
+ virtual unsigned ndof_types() const
   {
    // error message stream
    std::ostringstream error_message;
@@ -1221,7 +1221,7 @@
 
  /// \short Return the local equation number corresponding to the i-th
  /// value at the n-th local node.
- inline int nodal_local_eqn(const unsigned &n, const unsigned &i)
+ inline int nodal_local_eqn(const unsigned &n, const unsigned &i) const
   {
 #ifdef RANGE_CHECKING
    if(n >= Nnode)
@@ -1616,8 +1616,9 @@
   }
 
  /// \short Get local coordinates of node j in the element; vector 
- /// sets its own size (broken virtual)
+ /// sets its own size (broken virtual) const
  virtual void local_coordinate_of_node(const unsigned& j, Vector<double>& s)
+   const
   {
    throw OomphLibError(
     "local_coordinate_of_node(...) is not implemented for this element\n",
@@ -2239,14 +2240,14 @@
  /// local coordinate s. 
  virtual double interpolated_dxdt(const Vector<double> &s,
                                   const unsigned &i,
-                                  const unsigned &t);
+                                  const unsigned &t) const;
  
  /// \short Compte t-th time-derivative of the
  /// FE-interpolated Eulerian coordinate vector at
  /// local coordinate s. 
  virtual void interpolated_dxdt(const Vector<double> &s,
                                 const unsigned &t,
-                                Vector<double>& dxdt);
+                                Vector<double>& dxdt) const;
  
  /// \short A standard FiniteElement is fixed, so there are no geometric
  /// data when viewed in its GeomObject incarnation
@@ -2398,12 +2399,12 @@
  /// \short Virtual function to write the double precision numbers that
  /// appear in a single line of output into the data vector. Empty virtual,
  /// can be overloaded for specific elements; used e.g. by LineVisualiser.
- virtual void point_output_data(const Vector<double> &s, Vector<double>& data)
+ virtual void point_output_data(const Vector<double> &s, Vector<double>& data) const
  {}
  
  /// \short Output solution (as defined by point_output_data()) 
  /// at local cordinates s
- void point_output(std::ostream &outfile, const Vector<double> &s)
+ void point_output(std::ostream &outfile, const Vector<double> &s) const
  {
   // Get point data
   Vector<double> data;
@@ -2420,14 +2421,14 @@
 
  /// \short Output the element data --- typically the values at the 
  /// nodes in a format suitable for post-processing.
- virtual void output(std::ostream &outfile)
+ virtual void output(std::ostream &outfile) const
   {
    outfile << "Output function undefined" << std::endl;
   }
 
  /// \short Output the element data --- pass (some measure of) 
  /// the number of plot points per element
- virtual void output(std::ostream &outfile, const unsigned &n_plot)
+ virtual void output(std::ostream &outfile, const unsigned &n_plot) const
   {
    outfile << "Output function undefined" << std::endl;
   }
@@ -2435,7 +2436,7 @@
  /// \short Output the element data --- typically the values at the 
  /// nodes in a format suitable for post-processing.
  /// (C style output)
- virtual void output(FILE* file_pt)
+ virtual void output(FILE* file_pt) const
   {
    fprintf(file_pt,"C_style output function undefined\n");
   }
@@ -2443,14 +2444,14 @@
  /// \short Output the element data --- pass (some measure of) 
  /// the number of plot points per element
  /// (C style output)
- virtual void output(FILE* file_pt, const unsigned &n_plot)
+ virtual void output(FILE* file_pt, const unsigned &n_plot) const
   {
    fprintf(file_pt,"C_style output function undefined\n");
   }
 
  /// Output an exact solution over the element.
  virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
-                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                     FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
   {
    outfile << "Output function undefined for exact solution \n";
   }
@@ -2459,7 +2460,7 @@
  /// Output a time-dependent exact solution over the element.
  virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
                          const double& time, 
-                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) 
+                         FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
   {
    outfile << "Output function undefined for exact solution \n";
   }
@@ -2469,7 +2470,7 @@
  /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction").
  virtual void get_s_plot(const unsigned& i, const unsigned& nplot,
-                         Vector<double>& s)
+                         Vector<double>& s) const
   {
    throw OomphLibError(
     "get_s_plot(...) is not implemented for this element\n",
@@ -2479,7 +2480,7 @@
  
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction")
- virtual std::string tecplot_zone_string(const unsigned& nplot)
+ virtual std::string tecplot_zone_string(const unsigned& nplot) const
   {
    throw OomphLibError(
     "tecplot_zone_string(...) is not implemented for this element\n",
@@ -2493,18 +2494,18 @@
  /// Empty by default -- can be used, e.g., to add FE connectivity
  /// lists to elements that need it.
  virtual void write_tecplot_zone_footer(std::ostream& outfile, 
-                                        const unsigned& nplot){};
+                                        const unsigned& nplot) const{};
  
  /// \short Add tecplot zone "footer" to C-style output. (when plotting 
  /// nplot points in each "coordinate direction").
  /// Empty by default -- can be used, e.g., to add FE connectivity
  /// lists to elements that need it.
  virtual void write_tecplot_zone_footer(FILE* file_pt,
-                                        const unsigned& nplot){};
+                                        const unsigned& nplot) const{};
  
  /// \short Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction")
- virtual unsigned nplot_points(const unsigned& nplot)
+ virtual unsigned nplot_points(const unsigned& nplot) const
   {
    throw OomphLibError(
     "nplot_points(...) is not implemented for this element",
@@ -2521,7 +2522,7 @@
  /// error and that of the exact solution. 
  virtual void compute_error(std::ostream &outfile, 
                             FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
-                            double& error, double& norm)
+                            double& error, double& norm) const
   {
    std::string error_message = "compute_error undefined for this element \n";
    outfile << error_message;
@@ -2538,6 +2539,7 @@
  virtual void compute_error(std::ostream &outfile, 
                             FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                             const double& time, double& error, double& norm)
+   const
   {
    std::string error_message = 
     "time-dependent compute_error undefined for this element \n";
@@ -2554,7 +2556,7 @@
  virtual void compute_abs_error(std::ostream &outfile, 
 				FiniteElement::SteadyExactSolutionFctPt 
                                 exact_soln_pt,
-				double& error)
+				double& error) const
   {
    std::string error_message = 
     "compute_abs_error undefined for this element \n";
@@ -2568,13 +2570,13 @@
  /// \short Evaluate integral of a Vector-valued function
  /// \f$ {\bf f}({\bf x}) \f$ over the element.
  void integrate_fct(FiniteElement::SteadyExactSolutionFctPt integrand_fct_pt,
-                    Vector<double>& integral);
+                    Vector<double>& integral) const;
 
 
  /// \short Evaluate integral of a Vector-valued, time-dependent function 
  /// \f$ {\bf f}(t,{\bf x}) \f$ over the element.
  void integrate_fct(FiniteElement::UnsteadyExactSolutionFctPt integrand_fct_pt,
-                    Vector<double>& integral);
+                    Vector<double>& integral) const;
 
  /// \short Function for building a lower dimensional FaceElement
  /// on the specified face of the FiniteElement.
@@ -2639,7 +2641,7 @@
  void shape(const Vector<double> &s, Shape &psi) const;
 
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& j, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& j, Vector<double>& s) const
   {
    s.resize(0);
   }
@@ -3290,7 +3292,7 @@
  /// corresponds to the j-th coordinate of the k-th position-type at the 
  /// n-th local node.
  inline int position_local_eqn(const unsigned &n, const unsigned &k,
-                               const unsigned &j)
+                               const unsigned &j) const
   {
 #ifdef RANGE_CHECKING
    std::ostringstream error_message;
@@ -3765,7 +3767,7 @@
  /// local coordinate s. Overloaded to get information from bulk.
  double interpolated_dxdt(const Vector<double> &s,
                           const unsigned &i,
-                          const unsigned &t)
+                          const unsigned &t) const
   {
    // Local coordinates in bulk element
    Vector<double> s_bulk(dim()+1);
@@ -3780,7 +3782,7 @@
  /// local coordinate s.  Overloaded to get information from bulk.
  void interpolated_dxdt(const Vector<double> &s,
                         const unsigned &t,
-                        Vector<double>& dxdt)
+                        Vector<double>& dxdt) const
   {
    // Local coordinates in bulk element
    Vector<double> s_bulk(dim()+1);
@@ -4090,7 +4092,7 @@
   {return FaceElement::zeta_nodal(n,k,i);}     
 
  /// Output nodal coordinates
- void output(std::ostream &outfile)
+ void output(std::ostream &outfile) const
   {
    outfile << "ZONE" << std::endl;
    unsigned nnod=nnode();
@@ -4107,15 +4109,15 @@
   }
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot)
+ void output(std::ostream &outfile, const unsigned &n_plot) const
   {FiniteElement::output(outfile,n_plot);}
 
  /// C-style output 
- void output(FILE* file_pt)
+ void output(FILE* file_pt) const
   {FiniteElement::output(file_pt);}
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot)
+ void output(FILE* file_pt, const unsigned &n_plot) const
   {FiniteElement::output(file_pt,n_plot);}
 
 }; 
Index: src/generic/oomph_utilities.h
===================================================================
--- src/generic/oomph_utilities.h	(revision 258)
+++ src/generic/oomph_utilities.h	(working copy)
@@ -621,7 +621,7 @@
  unsigned Output_rank; 
 
  /// Boolean to control if output is performed only on a single
- /// processor (default: false)
+ /// processor (default: false) const
  bool Output_from_single_processor;
 
  /// Communicator
@@ -631,7 +631,7 @@
 
 
  /// Constructor -- initialise flags for output from all processors
- MPIOutputModifier() : Output_rank(0), 
+ MPIOutputModifier() const : Output_rank(0),
   Output_from_single_processor(false)
   {}
 
Index: src/generic/hermite_elements.h
===================================================================
--- src/generic/hermite_elements.h	(revision 258)
+++ src/generic/hermite_elements.h	(working copy)
@@ -204,7 +204,7 @@
 
  
  /// Get local coordinates of node j in the element; vector sets its own size
- void local_coordinate_of_node(const unsigned& j, Vector<double>& s)
+ void local_coordinate_of_node(const unsigned& j, Vector<double>& s) const
   {
    s.resize(DIM);
    Vector<unsigned> j_sub(DIM);
@@ -249,29 +249,29 @@
  unsigned nnode_1d() const {return 2;}
 
  /// Output 
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output 
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// \short  Get cector of local coordinates of plot point i (when plotting 
  /// nplot points in each "coordinate direction).
  void get_s_plot(const unsigned& i, const unsigned& nplot,
-                 Vector<double>& s);
+                 Vector<double>& s) const;
 
  /// \short Return string for tecplot zone header (when plotting 
  /// nplot points in each "coordinate direction)
- std::string tecplot_zone_string(const unsigned& nplot);
+ std::string tecplot_zone_string(const unsigned& nplot) const;
 
  /// Return total number of plot points (when plotting 
  /// nplot points in each "coordinate direction)
- unsigned nplot_points(const unsigned& nplot);
+ unsigned nplot_points(const unsigned& nplot) const;
 
  /// \short Build the lower-dimensional FaceElement of the type
  /// QHermiteElement<DIM-1>. The face index takes a value that 
@@ -307,7 +307,7 @@
 template<> 
 inline void QHermiteElement<1>::get_s_plot(const unsigned& i, const 
                                            unsigned& nplot,
-                                           Vector<double>& s)
+                                           Vector<double>& s) const
  {
   if (nplot>1)
    {
@@ -325,7 +325,7 @@
 //=======================================================================
 template<> 
 inline std::string QHermiteElement<1>::
-tecplot_zone_string(const unsigned& nplot)
+tecplot_zone_string(const unsigned& nplot) const
   {
    std::ostringstream header;
    header << "ZONE I=" << nplot << "\n";
@@ -337,7 +337,7 @@
 /// coordinate direction)
 //========================================================================
 template<> 
-inline unsigned QHermiteElement<1>::nplot_points(const unsigned& nplot) 
+inline unsigned QHermiteElement<1>::nplot_points(const unsigned& nplot) const
 {return nplot;}
 
 
@@ -348,7 +348,7 @@
 template<> 
 inline void QHermiteElement<2>::get_s_plot(const unsigned& i, const 
                                            unsigned& nplot,
-                                           Vector<double>& s)
+                                           Vector<double>& s) const
  {
   if (nplot>1)
    {
@@ -371,7 +371,7 @@
 //=======================================================================
 template<> 
 inline std::string QHermiteElement<2>::tecplot_zone_string(
- const unsigned& nplot)
+ const unsigned& nplot) const
 {
  std::ostringstream header;
  header << "ZONE I=" << nplot << ", J=" << nplot << "\n";
@@ -383,7 +383,7 @@
 /// nplot points in each coordinate direction)
 //=======================================================================
 template<> 
-inline unsigned QHermiteElement<2>::nplot_points(const unsigned& nplot) 
+inline unsigned QHermiteElement<2>::nplot_points(const unsigned& nplot) const
 {return nplot*nplot;}
 
 //=====================================================================
@@ -499,16 +499,16 @@
   }
 
  /// Overload the output function
- void output(std::ostream &outfile);
+ void output(std::ostream &outfile) const;
 
  /// Output at n_plot points
- void output(std::ostream &outfile, const unsigned &n_plot);
+ void output(std::ostream &outfile, const unsigned &n_plot) const;
 
  /// C-style output
- void output(FILE* file_pt);
+ void output(FILE* file_pt) const;
 
  /// C_style output at n_plot points
- void output(FILE* file_pt, const unsigned &n_plot);
+ void output(FILE* file_pt, const unsigned &n_plot) const;
 
  /// \short Build the lower-dimensional FaceElement of the type
  /// SolidQHermiteElement<DIM-1>. The face index takes a value that 
Index: src/generic/mesh.cc
===================================================================
--- src/generic/mesh.cc	(revision 258)
+++ src/generic/mesh.cc	(working copy)
@@ -824,7 +824,7 @@
 /// of the points on the boundary (in individual tecplot
 /// zones) 
 //========================================================
-void Mesh::output_boundaries(std::ostream &outfile)
+void Mesh::output_boundaries(std::ostream &outfile) const
 {
  //Loop over the boundaries
  unsigned num_bound = nboundary();
@@ -849,7 +849,7 @@
 /// Dump function for the mesh class.
 /// Loop over all nodes and elements and dump them
 //===================================================================
-void Mesh::dump(std::ofstream &dump_file)
+void Mesh::dump(std::ofstream &dump_file) const
 {
  // Find number of nodes
  unsigned long Node_pt_range = this->nnode(); 
@@ -977,7 +977,7 @@
 /// Loop over all elements and plot (i.e. execute
 /// the element's own output() function)
 //========================================================
-void Mesh::output(std::ostream &outfile)
+void Mesh::output(std::ostream &outfile) const
 {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
@@ -1019,7 +1019,7 @@
 /// the element's own output() function). Use
 /// n_plot plot points in each coordinate direction.
 //========================================================
-void Mesh::output(std::ostream &outfile, const unsigned &n_plot)
+void Mesh::output(std::ostream &outfile, const unsigned &n_plot) const
 {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
@@ -1066,7 +1066,7 @@
 /// the element's own output() function)
 /// (C style output)
 //========================================================
-void Mesh::output(FILE* file_pt)
+void Mesh::output(FILE* file_pt) const
 {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
@@ -1109,7 +1109,7 @@
 /// n_plot plot points in each coordinate direction.
 /// (C style output)
 //========================================================
-void Mesh::output(FILE* file_pt, const unsigned &n_plot)
+void Mesh::output(FILE* file_pt, const unsigned &n_plot) const
 {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
@@ -1153,7 +1153,7 @@
 /// n_plot plot points in each coordinate direction.
 //========================================================
 void Mesh::output_fct(std::ostream &outfile, const unsigned &n_plot, 
-                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
+                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt) const
 {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
@@ -1197,7 +1197,7 @@
 //========================================================
 void Mesh::output_fct(std::ostream &outfile, const unsigned &n_plot, 
                       const double& time, 
-                      FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
+                      FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt) const
 {
  //Loop over the elements and call their output functions
  //Assign Element_pt_range
Index: src/generic/trilinos_preconditioners.h
===================================================================
--- src/generic/trilinos_preconditioners.h	(revision 258)
+++ src/generic/trilinos_preconditioners.h	(working copy)
@@ -230,7 +230,7 @@
     }
 
    /// Function to set output - controls level of information output by ML
-   void set_output(int output)
+   void set_output(int output) const
     {
      ML_parameters.set("output", output); 
     }
Index: src/generic/line_visualiser.h
===================================================================
--- src/generic/line_visualiser.h	(revision 258)
+++ src/generic/line_visualiser.h	(working copy)
@@ -103,7 +103,7 @@
    
   
      /// \short Output function: output each plot point
-     void output(std::ostream &outfile)
+     void output(std::ostream &outfile) const
      {
       // Get data in array
       Vector<Vector<double> > data(Nplot_points);
@@ -129,7 +129,7 @@
   
      /// \short Output data function: store data associated with heach
      /// plot point in data array
-     void get_output_data(Vector<Vector<double> > &data)
+     void get_output_data(Vector<Vector<double> > &data) const
      {
       // Resize output data array
       data.resize(Nplot_points);
@@ -312,7 +312,10 @@
         if (Plot_point[i].first != NULL) // success
          {
           // Copy line into data array
-          Plot_point[i].first->point_output_data(data[i], Plot_point[i].second);
+	   //??ds this seems like a terrible way to do it, leave it as c++11 only so I have to fix it...
+	   auto temp = Plot_point[i].second;
+	   Plot_point[i].first->
+	     point_output_data(data[i],temp);
          }
         else // error
          {
Index: src/generic/nodes.h
===================================================================
--- src/generic/nodes.h	(revision 258)
+++ src/generic/nodes.h	(working copy)
@@ -326,7 +326,7 @@
  void copy(Data* orig_data_pt);
 
  /// Dump the data object to a file. 
- void dump(std::ostream& dump_file);
+ void dump(std::ostream& dump_file) const;
 
  /// Read data object from a file.
  void read(std::ifstream& restart_file);
@@ -341,7 +341,7 @@
   }
 
  /// Return the equation number of the i-th stored variable.
- inline long &eqn_number(const unsigned &i) 
+ inline long &eqn_number(const unsigned &i) const
   {
 #ifdef RANGE_CHECKING
    range_check(0,i);
@@ -370,7 +370,7 @@
   }
 
  /// \short Test whether the i-th variable is pinned (1: true; 0: false).
- bool is_pinned(const unsigned &i) {return (Eqn_number[i]==Is_pinned);}
+ bool is_pinned(const unsigned &i) const {return (Eqn_number[i]==Is_pinned);}
 
  /// \short Constrain the i-th stored variable when making hanging data
  /// If the data is already pinned leave it along, otherwise mark as
@@ -1044,7 +1044,7 @@
  void copy(Node* orig_node_pt);
 
  /// Dump nodal position and associated data to file for restart
- virtual void dump(std::ostream& dump_file);
+ virtual void dump(std::ostream& dump_file) const;
 
 ///Read nodal position and associated data from file for restart
  void read(std::ifstream& restart_file);
@@ -1445,7 +1445,7 @@
  virtual inline GeomObject** all_geom_object_pt() {return 0;}
 
  ///Output nodal position
- void output(std::ostream &outfile); 
+ void output(std::ostream &outfile) const;
 
 
 #ifdef OOMPH_HAS_MPI
@@ -1555,7 +1555,7 @@
 
  /// \short Dump nodal positions (variable and fixed) and associated 
  /// data to file for restart
- void dump(std::ostream& dump_file);
+ void dump(std::ostream& dump_file) const;
 
  /// \short Read nodal positions (variable and fixed) and associated 
  /// data from file for restart
Index: src/generic/macro_element.cc
===================================================================
--- src/generic/macro_element.cc	(revision 258)
+++ src/generic/macro_element.cc	(working copy)
@@ -37,7 +37,7 @@
 //=================================================================
 void QMacroElement<2>::macro_map(const unsigned& t, 
                                  const Vector<double>& S, 
-                                 Vector<double>& r)
+                                 Vector<double>& r) const
 {
  using namespace QuadTreeNames;
 
@@ -124,7 +124,7 @@
 /// \short Output all macro element boundaries as tecplot zones
 //=================================================================
 void QMacroElement<2>::output_macro_element_boundaries(std::ostream &outfile,
-                                                       const unsigned& nplot)
+                                                       const unsigned& nplot) const
 {
  using namespace QuadTreeNames;
 
@@ -360,7 +360,7 @@
 //=================================================================
 void QMacroElement<3>::macro_map(const unsigned& t, 
                                  const Vector<double>& S, 
-                                 Vector<double>& r)
+                                 Vector<double>& r)  const
 {
  //get the eight corners
  Vector<double> corner_LDB(3);
@@ -580,7 +580,7 @@
 /// \short Output all macro element boundaries as tecplot zones
 //=================================================================
 void QMacroElement<3>::output_macro_element_boundaries(std::ostream &outfile, 
-                                                       const unsigned& nplot)
+                                                       const unsigned& nplot) const
 {
  using namespace OcTreeNames;
  
Index: src/generic/elements.cc
===================================================================
--- src/generic/elements.cc	(revision 258)
+++ src/generic/elements.cc	(working copy)
@@ -3753,7 +3753,7 @@
 //==================================================================
  void FiniteElement::
  integrate_fct(FiniteElement::UnsteadyExactSolutionFctPt integrand_fct_pt,
-               Vector<double>& integral)
+               Vector<double>& integral) const
  {
   //Initialise all components of integral Vector and setup integrand vector
   const unsigned ncomponents=integral.size();
@@ -3802,7 +3802,7 @@
 //==================================================================
  void FiniteElement::
  integrate_fct(FiniteElement::SteadyExactSolutionFctPt integrand_fct_pt,
-               Vector<double>& integral)
+               Vector<double>& integral) const
  {
   //Initialise all components of integral Vector
   const unsigned ncomponents=integral.size();
@@ -4006,7 +4006,7 @@
 //=======================================================================
  double FiniteElement::interpolated_dxdt(const Vector<double> &s, 
                                          const unsigned &i,
-                                         const unsigned &t_deriv)
+                                         const unsigned &t_deriv) const
  {
   //Find the number of nodes and positions (locally cached)
   const unsigned n_node = nnode();
@@ -4040,7 +4040,7 @@
 //=======================================================================
  void FiniteElement::interpolated_dxdt(const Vector<double> &s, 
                                        const unsigned &t_deriv,
-                                       Vector<double>& dxdt)
+                                       Vector<double>& dxdt) const
  {
   //Find the number of nodes and positions (locally cached)
   const unsigned n_node = nnode();
Index: src/generic/oomph_definitions.h
===================================================================
--- src/generic/oomph_definitions.h	(revision 258)
+++ src/generic/oomph_definitions.h	(working copy)
@@ -366,7 +366,7 @@
 
 public:
 
- ///\short Set default values for the output stream (cout) 
+ ///\short Set default values for the output stream (cout) const
  ///and modifier (no modification)
  OomphInfo() : Stream_pt(&std::cout), 
                Output_modifier_pt(&default_output_modifier) {}
Index: external_src/parmetis.h
===================================================================
--- external_src/parmetis.h	(revision 258)
+++ external_src/parmetis.h	(working copy)
@@ -1 +1,211 @@
-link oomph_parmetis_3.1.1/oomph_parmetis_3.1.1.h
\ No newline at end of file
+/*
+ * Copyright 1997-2003, Regents of the University of Minnesota
+ *
+ * parmetis.h
+ *
+ * This file contains function prototypes and constrant definitions for 
+ * ParMETIS
+ *
+ * Started 7/21/03
+ * George
+ *
+ */
+
+#ifndef __parmetis_h__
+#define __parmetis_h__
+
+//ALH: Need to buffer this case for when compiling in serial
+#ifdef OOMPH_HAS_MPI
+#include <mpi.h>
+#endif
+
+#ifndef _MSC_VER
+#define __cdecl
+#endif
+
+
+/*************************************************************************
+* Data-structures
+**************************************************************************/
+/* Undefine the following #define in order to use short int as the idxtype */
+#define IDXTYPE_INT
+
+/* Indexes are as long as integers for now */
+#ifdef IDXTYPE_INT
+typedef int idxtype;
+#else
+typedef short idxtype;
+#endif
+
+
+//ALH: Also need to buffer out the entire rest of the code
+//     because MPIComm is not defined
+#ifdef OOMPH_HAS_MPI
+
+/*************************************************************************
+* Constants 
+**************************************************************************/
+#define PARMETIS_MAJOR_VERSION        3
+#define PARMETIS_MINOR_VERSION        1
+#define PARMETIS_SUBMINOR_VERSION     1
+
+
+/*************************************************************************
+* Function prototypes
+**************************************************************************/
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*-------------------------------------------------------------------
+* API Introduced with Release 3.0 (current API) 
+*--------------------------------------------------------------------*/
+void __cdecl ParMETIS_V3_AdaptiveRepart(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *vsize, idxtype *adjwgt, int *wgtflag, int *numflag, int *ncon, 
+	     int *nparts, float *tpwgts, float *ubvec, float *ipc2redist, 
+	     int *options, int *edgecut, idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_V3_PartGeomKway(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *ndims, float *xyz, 
+	     int *ncon, int *nparts, float *tpwgts, float *ubvec, int *options, 
+	     int *edgecut, idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_V3_PartGeom(
+             idxtype *vtxdist, int *ndims, float *xyz, idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_V3_PartKway(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *ncon, int *nparts, 
+	     float *tpwgts, float *ubvec, int *options, int *edgecut, idxtype *part, 
+	     MPI_Comm *comm);
+
+void __cdecl ParMETIS_V3_Mesh2Dual(
+             idxtype *elmdist, idxtype *eptr, idxtype *eind, int *numflag, 
+	     int *ncommonnodes, idxtype **xadj, idxtype **adjncy, MPI_Comm *comm);
+
+void __cdecl ParMETIS_V3_PartMeshKway(
+             idxtype *elmdist, idxtype *eptr, idxtype *eind, idxtype *elmwgt, 
+	     int *wgtflag, int *numflag, int *ncon, int *ncommonnodes, int *nparts, 
+	     float *tpwgts, float *ubvec, int *options, int *edgecut, idxtype *part, 
+	     MPI_Comm *comm);
+
+void __cdecl ParMETIS_V3_NodeND(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, int *numflag, 
+	     int *options, idxtype *order, idxtype *sizes, MPI_Comm *comm);
+
+void __cdecl ParMETIS_V3_RefineKway(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *ncon, int *nparts, 
+	     float *tpwgts, float *ubvec, int *options, int *edgecut, 
+	     idxtype *part, MPI_Comm *comm);
+
+
+/*------------------------------------------------------------------
+* Backward compatibility routines with Release 2.0
+*-------------------------------------------------------------------*/
+void __cdecl ParMETIS_PartKway(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *nparts, int *options, 
+             int *edgecut, idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_PartGeomKway(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, idxtype *adjwgt, 
+	     int *wgtflag, int *numflag, int *ndims, float *xyz, int *nparts, int *options, 
+	     int *edgecut, idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_PartGeom(
+             idxtype *vtxdist, int *ndims, float *xyz, idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_PartGeomRefine(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *ndims, float *xyz, 
+	     int *options, int *edgecut, idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_RefineKway(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *options, int *edgecut, 
+	     idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_RepartLDiffusion(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *options, int *edgecut, 
+	     idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_RepartGDiffusion(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, 
+	     idxtype *adjwgt, int *wgtflag, int *numflag, int *options, int *edgecut, 
+	     idxtype *part, MPI_Comm *comm);
+
+void __cdecl ParMETIS_RepartRemap(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, idxtype *adjwgt, 
+	     int *wgtflag, int *numflag, int *options, int *edgecut, idxtype *part, 
+	     MPI_Comm *comm);
+
+void __cdecl ParMETIS_RepartMLRemap(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, idxtype *adjwgt, 
+	     int *wgtflag, int *numflag, int *options, int *edgecut, idxtype *part, 
+	     MPI_Comm *comm);
+
+void __cdecl ParMETIS_NodeND(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, int *numflag, int *options, 
+	     idxtype *order, idxtype *sizes, MPI_Comm *comm);
+
+void __cdecl ParMETIS_SerialNodeND(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, int *numflag, int *options, 
+	     idxtype *order, idxtype *sizes, MPI_Comm *comm);
+
+
+
+
+/*-------------------------------------------------------------------
+* Backward compatibility routines with Release 1.0 
+*--------------------------------------------------------------------*/
+void __cdecl PARKMETIS(
+             idxtype *vtxdist, idxtype *xadj, idxtype *vwgt, idxtype *adjncy, idxtype *adjwgt, 
+	     idxtype *part, int *options, MPI_Comm comm);
+
+void __cdecl PARGKMETIS(
+             idxtype *vtxdist, idxtype *xadj, idxtype *vwgt, idxtype *adjncy, idxtype *adjwgt,
+             int ndims, float *xyz, idxtype *part, int *options, MPI_Comm comm);
+
+void __cdecl PARGRMETIS(
+             idxtype *vtxdist, idxtype *xadj, idxtype *vwgt, idxtype *adjncy, idxtype *adjwgt,
+             int ndims, float *xyz, idxtype *part, int *options, MPI_Comm comm);
+
+void __cdecl PARGMETIS(
+             idxtype *vtxdist, idxtype *xadj, idxtype *adjncy, int ndims, float *xyz,
+             idxtype *part, int *options, MPI_Comm comm);
+
+void __cdecl PARRMETIS(
+             idxtype *vtxdist, idxtype *xadj, idxtype *vwgt, idxtype *adjncy, 
+	     idxtype *adjwgt, idxtype *part, int *options, MPI_Comm comm);
+
+void __cdecl PARUAMETIS(
+             idxtype *vtxdist, idxtype *xadj, idxtype *vwgt, idxtype *adjncy, 
+	     idxtype *adjwgt, idxtype *part, int *options, MPI_Comm comm);
+
+void __cdecl PARDAMETIS(
+             idxtype *vtxdist, idxtype *xadj, idxtype *vwgt, idxtype *adjncy, idxtype *adjwgt,
+             idxtype *part, int *options, MPI_Comm comm);
+
+#ifdef __cplusplus
+}
+#endif
+
+
+/*************************************************************************
+* Various constants used for the different parameters
+**************************************************************************/
+/* Matching types */
+#define PARMETIS_MTYPE_LOCAL    1
+#define PARMETIS_MTYPE_GLOBAL   2
+
+/* Refinement types */
+#define PARMETIS_RTYPE_RANDOM    1
+#define PARMETIS_RTYPE_GREEDY    2
+#define PARMETIS_RTYPE_2PHASE    3
+
+#endif 
+#endif
Index: config/configure_options/current
===================================================================
--- config/configure_options/current	(revision 258)
+++ config/configure_options/current	(working copy)
@@ -1,158 +1,5 @@
-#=====================================================================
-# File that specifies options and compile/link flags for 
-# autogen.sh script: Needs to be processed with autogen-setup.sh
-# and creates the shell script autogen-configure.sh that is executed
-# by autogen.sh. 
-#
-#  NOTE: Options need to go first!
-#
-# A few options:    [type ./configure --help to see the full list] 
-# --------------
-#
-#         --enable-MPI   includes all MPI sources into the build
-#                        (you will probably have to specify
-#                        your MPI libraries and include directories
-#                        in the compiler/linker options; see the 
-#                        examples enclosed below).
-#         --enable-suppress-doc  Don't build the documentation (can take a long
-#                        and uses quite a bit of diskspace. You might
-#                        prefer to consult the online documentation at
-#                        http://www.oomph-lib.org
-#         --enable-suppress-demo Don't build the demo codes/self test  
-#
-# Common compiler/linker flags:
-# -----------------------------            
-#
-# - CXX =  C++ compiler (defaults to gcc/g++ if not specified)
-# - CC  =  C compiler (defaults to gcc if not specified)
-# - F77 =  F77 compiler (defaults to gcc/g77 if not specified)
-# 
-# - CXXFLAGS = flags for the C++ compiler. Specify optmisation flags
-#              for your compiler (e.g. -O3 for maximum optimisation
-#              with the gcc compiler suite, enable debugging (-g for
-#              the gcc compilers), etc.)
-#
-#              Here's a list of useful oomph-lib related flags:
-#              
-#              -DPARANOID enables "general paranoia", allowing the
-#                         code to perform various sanity checks
-#                         during execution. Incurs a moderate run-time
-#                         overhead.
-#              -DRANGE_CHECKING switches on bounds checking in
-#                         oomph-lib's Vector class (a wrapper to the
-#                         the STL vector class). This is VERY costly
-#                         in terms of run time but very useful for
-#                         tracking down the source of otherwise
-#                         inexcplicable segmentation faults...
-#              -DLEAK_CHECK mainly used during code developement. Used
-#                         to allow optional checks that objects are 
-#                         deleted to avoid memory leaks.
-#              -DWARN_ABOUT_SUBTLY_CHANGED_OOMPH_INTERFACES throws
-#                         an oomph-lib warning whenever a function
-#                         whose interface has been changed "subtly"
-#                         (i.e. in a way that the compiler can't detect,
-#                         e.g. a change in the order of two arguments
-#                         of the same type) during some revision is called.
-#                         Use this only (!) if your code behaves
-#                         oddly after upgrading to a newer release
-#                         of the library.
-# 
-# - CFLAGS   = flags for the C compiler. Specify optimisation flags
-#              for your compiler (e.g. -O3 for maximum optimisation
-#              with the gcc compiler suite, enable debugging (-g for
-#              the gcc compilers), etc.) The C-compiler is only used
-#              to compile certain external libraries, such as superlu.
-#              Therefore it is not necessary to specify any of 
-#              oomph-lib's own compilation flags.
-# 
-# - FFLAGS   = flags for the f77 compiler. Specify optimisation flags
-#              for your compiler (e.g. -O3 for maximum optimisation
-#              with the gcc compiler suite, enable debugging (-g for
-#              the gcc compilers), etc.) The f77-compiler is only used
-#              to compile certain external libraries, such as the
-#              frontal solver from the hsl library.
-#              Therefore it is not necessary to specify any of 
-#              oomph-lib's own compilation flags.
-#
-# - LIBS     = Specify any additional libraries that you might have
-#              to link against -- typically only required if  mpi is
-#              used. autoconf should automatically detect any 
-#              other libraries.
-#=====================================================================
-#
---enable-suppress-doc
---enable-MPI
 --enable-symbolic-links-for-headers
---enable-static-cxx-libs
---with-mpi-include-directory=/opt/cray/mpt/5.2.2/xt/gemini/mpich2-gnu/include
---with-blas=/home/e173/e173/mheil/local/gnu/lib/blas/blas.a
---with-lapack=/home/e173/e173/mheil/local/gnu/lib/lapack/lapack.a
---with-trilinos=/home/e173/e173/mheil/local/gnu/trilinos_default_installation
---with-hypre=/home/e173/e173/mheil/local/gnu/hypre_default_installation
-CXXFLAGS="-O3 -Wall"
-CFLAGS="-O3"
-FFLAGS="-O3"
-CXX=CC
-CC=cc
-F77=ftn
-LD=ftn
-
-
-#CXXFLAGS="-g -DPARANOID -DRANGE_CHECKING -Wall"
-#CFLAGS="-g"
-#FFLAGS="-g"
-
-
-
-#--with-blas=/home/e173/e173/mheil/local/gnu/lib/blas/blas.a
-#--with-lapack=/home/e173/e173/mheil/local/gnu/lib/lapack/lapack.a
-#--with-trilinos=/home/e173/e173/mheil/local/gnu/trilinos_default_installation
-#--with-hypre=/home/e173/e173/mheil/local/gnu/hypre_default_installation
-
-
-#
-
-
-
-#--with-blacs=/home/e173/e173/mheil/local/gnu/mumps_and_scalapack_default_installation/lib/
-#--with-scalapack=/home/e173/e173/mheil/local/gnu/mumps_and_scalapack_default_installation/lib/libscalapack.a
-#--with-pord=/home/e173/e173/mheil/local/gnu/mumps_and_scalapack_default_installation/lib/libpord.a 
-#--with-mumps=/home/e173/e173/mheil/local/gnu/mumps_and_scalapack_default_installation
-
-
-#CXXFLAGS="-O3 -Wall"
-#CFLAGS="-O3"
-#FFLAGS="-O3"
-
-
-#CXXFLAGS="-g -DPARANOID -DRANGE_CHECKING -Wall"
-#CFLAGS="-g"
-#FFLAGS="-g"
-
-#CXXFLAGS="-O3 -Wall"
-#CFLAGS="-O3"
-#FFLAGS="-O3"
-
-
-#--enable-suppress-oomph-metis
-#--enable-suppress-oomph-parmetis
-#--enable-suppress-oomph-superlu
-#--enable-suppress-oomph-superlu_dist
-#--with-mumps=auto
-#--with-blas=auto
-#--with-lapack=auto
-#--with-trilinos=auto
-#--with-hypre=auto
-#--enable-MPI
-#--enable-suppress-demo
-#--enable-symbolic-links-for-headers
-#--enable-static-cxx-libs
-#CXXFLAGS="-O3 -Wall"
-#CFLAGS="-O3"
-#FFLAGS="-O3"
-#CXX=CC
-#CC=cc
-#F77=ftn
-#LD=ftn
-
-
+--enable-suppress-doc
+CXXFLAGS="-g -DPARANOID -Wall -Wconversion --std=c++0x"
+CFLAGS="-g -Wall"
+FFLAGS="-g -Wall"
